[{"uri":"/CSBlog/index.html","title":"CSBlog\n","content":"# CSBlog\n\n![CSB](img/CSB.png)\n\nWelcome to the CSBlog.\nThis is the place where members of the department of Computational Systems Biology of the TU Kaiserslautern blog about their work,\nresearch, and other loosely related stuff.\n\nFor more information about our research and our group in general, head to our [website](https://csb.bio.uni-kl.de/).\nIf you want to take a look at our projects, head over to our [github page](https://github.com/CSBiology)\n\nBlogPosts are accessible on the sidebar."},{"uri":"/CSBlog/posts/0_how2JSONSchema.html","title":"How to develop and use a JSON Schema","content":"(**\n\n---\ntitle: How to develop and use a JSON Schema\ncategory: Implementation\ncategoryindex: 3\nindex: 0\n---\n\n# How to develop and use a JSON Schema\n\n\u003Cbr\u003E\u003C/br\u003E\n\n## Content\n- [What are JSON Schemas?](#What-are-JSON-Schemas)\n- [JSON syntax](#JSON-syntax)\n- [The basic structure of a JSON Schema](#The-basic-structure-of-a-JSON-Schema)\n- [References](#References)\n- [Validation of JSON files by a Schema](#Validation-of-JSON-files-by-a-Schema)\n- [Further reading](#Further-reading)\n\n## What are JSON Schemas?\n\nJSON (JavaScript Object Notation) is a common data format for storing data and metadata and widely used for data exchange purposes. It is easily human- as well as machine-readable.  \nWhile JSON files and formats can be written in a simple and non-standardized way (as long as the syntax is respected), standardizing a specific JSON format might be useful when considering validation, documentation, and interaction control.\n\nJSON Schemas are data models that are build out of JSON syntax themselves.\n\n## JSON syntax\n\nSince the syntax of JSON is very simple and easy to understand, here\u0027s everything to know:  \n\n- A JSON file consists of at least one empty object\n- Objects are opened with \u0060{\u0060 and closed with \u0060}\u0060\n- Objects consist of key/value (aka name/value) pairs. Keys (or names) are identifiers realized as strings, values are corresponding information realized via primitive data types, both are separated via the character \u0060:\u0060\n- There are 6 basic primitive data types:\n  - null: no value (\u0060null\u0060)\n  - boolean: \u0060true\u0060 or \u0060false\u0060 value\n  - number: decimal number value, e.g. \u00607\u0060 or \u00601.337\u0060\n  - string: unicode text value, e.g. \u0060\u0022Hello World!\u0022\u0060\n  - object: unordered set of properties, consists of key/value pairs, e.g. \u0060{ \u0022name\u0022: \u0022Max Mustermann\u0022, \u0022age\u0022: 44 }\u0060\n  - array: ordered list of instances, consists of values, e.g. \u0060[ \u0022Hello \u0022, \u0022World!\u0022 ]\u0060\n- As seen above, \u0060,\u0060 is used to separate different key/value pairs in objects and instances in arrays\n- Objects can be nested infinitely\n- Scoping is similar to F#, both \u0060[ \u0022Hello \u0022, \u0022World!\u0022 ]\u0060 as well as  \n![image](https://user-images.githubusercontent.com/47781170/131900223-3fa36d2f-d65a-44ce-9913-69a2f42b35f2.png)  \n  is possible\n\n## The basic structure of a JSON Schema\n\nSince JSON Schemas are JSON files in a sense, they are written very similarly.  \nLet\u0027s develop a JSON schema for \u2012 say \u2013 future blogposts. It should consist of an identifier, a title, a category to which it belongs, a value if it is already uploaded or not, and an array of tags.  \nA finished JSON file following this schema should therefore look like this:\n\n\u0060\u0060\u0060javascript\n{\n  \u0022identifier\u0022: 0,\n  \u0022title\u0022: \u0022How to develop and use a JSON Schema\u0022,\n  \u0022category\u0022: \u0022Implementation\u0022,\n  \u0022uploaded\u0022: true,\n  \u0022tags\u0022: [ \u0022implementation\u0022, \u0022JSON\u0022, \u0022standardization\u0022 ]\n}\n\u0060\u0060\u0060\n\nJSON Schemas must start with 2 unique key/value pairs that are referencing them as specific JSON Schemas:\n\n\u0060\u0060\u0060javascript\n{\n  \u0022$schema\u0022: \u0022https://json-schema.org/draft/2020-12/schema\u0022,\n  \u0022$id\u0022: \u0022https://raw.githubusercontent.com/omaus/CSBlogpost/main/blogpost.schema.json\u0022,\n}\n\u0060\u0060\u0060\n\nThe first key, \u0060\u0022$schema\u0022\u0060 references a JSON Schema to a so-called Metaschema, here of the ID \u0022https://json-schema.org/draft/2020-12/schema\u0022.  \nThe value of second key, \u0060\u0022$id\u0022\u0060, is a unique identifier for this JSON Schema, typically in the form of a URI.  \nThe \u0060$\u0060 is a special character and marks Schema-related keywords.\n\nThere\u0027s more to add: Our JSON Schema needs a title and a description:\n\n\u0060\u0060\u0060javascript\n{\n  \u0022$schema\u0022: \u0022https://json-schema.org/draft/2020-12/schema\u0022,\n  \u0022$id\u0022: \u0022https://raw.githubusercontent.com/omaus/CSBlogpost/main/blogpost.schema.json\u0022,\n  \u0022title\u0022: \u0022Blogpost entry\u0022,\n  \u0022description\u0022: \u0022An entry of our blogpost series, consisting of an identifier, a title, a category, the upload status, and some tags.\u0022,\n}\n\u0060\u0060\u0060\n\nThese are called \u0022Schema Annotations\u0022 since they annotate our Schema and provide some information about it.\nThe last thing to add is a so-called \u0022Validation keyword\u0022:\n\n\u0060\u0060\u0060javascript\n{\n  \u0022$schema\u0022: \u0022https://json-schema.org/draft/2020-12/schema\u0022,\n  \u0022$id\u0022: \u0022https://raw.githubusercontent.com/omaus/CSBlogpost/main/blogpost.schema.json\u0022,\n  \u0022title\u0022: \u0022Blogpost entry\u0022,\n  \u0022description\u0022: \u0022An entry of our blogpost series, consisting of an identifier, a title, a category, the upload status, and some tags.\u0022,\n  \u0022type\u0022: \u0022object\u0022\n}\n\u0060\u0060\u0060\n\nThe JSON files of our Schema must have a type. In our case, it\u0027s an object but the primitive data types as well as \u0060integer\u0060 (a \u0060number\u0060 without fractional parts) are also applicable. We will examine that later.\nThere are a lot of other Schema Keywords, Schema Annotations and Validation Keywords. We will see some of them later but there are also some that are not important now and can be looked at later if required.\n\nNow, since we wrote the \u0022metadata\u0022 of our JSON Schema, we want to add the properties of our blogpost JSON file seen above:\n\n\u0060\u0060\u0060javascript\n{\n  \u0022$schema\u0022: \u0022https://json-schema.org/draft/2020-12/schema\u0022,\n  \u0022$id\u0022: \u0022https://raw.githubusercontent.com/omaus/CSBlogpost/main/blogpost.schema.json\u0022,\n  \u0022title\u0022: \u0022Blogpost entry\u0022,\n  \u0022description\u0022: \u0022An entry of our blogpost series, consisting of an identifier, a title, a category, the upload status, and some tags.\u0022,\n  \u0022type\u0022: \u0022object\u0022,\n  \u0022properties\u0022: {\n    \u0022identifier\u0022: {\n      \u0022description\u0022: \u0022The identifier of a blogpost entry, an integer.\u0022,\n      \u0022type\u0022: \u0022integer\u0022\n    },\n    \u0022title\u0022: {\n      \u0022description\u0022: \u0022The title of a blogpost entry.\u0022,\n      \u0022type\u0022: \u0022string\u0022\n    },\n    \u0022category\u0022: {\n      \u0022description\u0022: \u0022The category a blogpost entry belongs to.\u0022,\n      \u0022type\u0022: \u0022string\u0022\n    },\n    \u0022uploaded\u0022: {\n      \u0022description\u0022: \u0022A value that tells if a blogpost entry has been already uploaded to a repository or not.\u0022,\n      \u0022type\u0022: \u0022boolean\u0022\n    },\n    \u0022tags\u0022: {\n        \u0022description\u0022: \u0022A list of tags that help describing and categorizing a blogpost entry.\u0022,\n        \u0022type\u0022: \u0022array\u0022,\n        \u0022items\u0022: {\n          \u0022type\u0022: \u0022string\u0022\n        },\n        \u0022uniqueItems\u0022: true\n    }\n  },\n  \u0022required\u0022:  [ \u0022identifier\u0022, \u0022title\u0022, \u0022category\u0022 ]\n}\n\u0060\u0060\u0060\n\n\u0060\u0022properties\u0022\u0060 is an object consisting of objects. The properties set in our original JSON file are realized here. As for the \u0060\u0022tags\u0022\u0060 property, we define that the tags must be different.  \nThere\u0027s another Validation Keyword we added here: The \u0060\u0022required\u0022\u0060 key. It is an array consisting of all the properties we think are mandatory for the JSON file to be valid. In our case, we think that the tags and the upload status should rather be optional information and thus are not added to the required list.\n\nSince we are dealing with this JSON file and its Schema right now we are realizing that an author is missing! \uD83D\uDE31\n\n\u0060\u0060\u0060javascript\n{\n  \u0022identifier\u0022: 0,\n  \u0022title\u0022: \u0022How to develop and use a JSON Schema\u0022,\n  \u0022category\u0022: \u0022Implementation\u0022,\n  \u0022uploaded\u0022: true,\n  \u0022tags\u0022: [ \u0022implementation\u0022, \u0022JSON\u0022, \u0022standardization\u0022 ],\n  \u0022authors\u0022: [\n    {\n      \u0022name\u0022: \u0022Oliver Maus\u0022,\n      \u0022organization\u0022: \u0022CSBiology\u0022\n    }\n  ]\n}\n\u0060\u0060\u0060\n\nThere\u0027s something new: We now must add a nested type to our Schema:\n\n\u0060\u0060\u0060javascript\n{\n  \u0022$schema\u0022: \u0022https://json-schema.org/draft/2020-12/schema\u0022,\n  \u0022$id\u0022: \u0022https://raw.githubusercontent.com/omaus/CSBlogpost/main/blogpost.schema.json\u0022,\n  \u0022title\u0022: \u0022Blogpost entry\u0022,\n  \u0022description\u0022: \u0022An entry of our blogpost series, consisting of an identifier, a title, a category, the upload status, and some tags.\u0022,\n  \u0022type\u0022: \u0022object\u0022,\n  \u0022properties\u0022: {\n    \u0022identifier\u0022: {\n      \u0022description\u0022: \u0022The identifier of a blogpost entry, an integer.\u0022,\n      \u0022type\u0022: \u0022integer\u0022\n    },\n    \u0022title\u0022: {\n      \u0022description\u0022: \u0022The title of a blogpost entry.\u0022,\n      \u0022type\u0022: \u0022string\u0022\n    },\n    \u0022category\u0022: {\n      \u0022description\u0022: \u0022The category a blogpost entry belongs to.\u0022,\n      \u0022type\u0022: \u0022string\u0022\n    },\n    \u0022uploaded\u0022: {\n      \u0022description\u0022: \u0022A value that tells if a blogpost entry has been already uploaded to a repository or not.\u0022,\n      \u0022type\u0022: \u0022boolean\u0022\n    },\n    \u0022tags\u0022: {\n      \u0022description\u0022: \u0022A list of tags that help describing and categorizing a blogpost entry.\u0022,\n      \u0022type\u0022: \u0022array\u0022,\n      \u0022items\u0022: {\n        \u0022type\u0022: \u0022string\u0022\n      },\n      \u0022uniqueItems\u0022: true\n    },\n    \u0022authors\u0022: {\n      \u0022description\u0022: \u0022A list of all authors associated with a blogpost entry.\u0022,\n      \u0022type\u0022: \u0022array\u0022,\n      \u0022items\u0022: {\n        \u0022type\u0022: \u0022object\u0022,\n        \u0022properties\u0022: {\n          \u0022name\u0022: {\n            \u0022type\u0022: \u0022string\u0022\n          },\n          \u0022organization\u0022: {\n            \u0022type\u0022: \u0022string\u0022\n          }\n        }\n      },\n      \u0022minItems\u0022: 1,\n      \u0022uniqueItems\u0022: true\n    }\n  },\n  \u0022required\u0022:  [ \u0022identifier\u0022, \u0022title\u0022, \u0022category\u0022, \u0022authors\u0022 ]\n}\n\u0060\u0060\u0060\n\nWe show our Schema to our boss but unfortunately he\u0027s not satisfied. He reckons that there should be a license associated with it.\n\n## References\n\nThere\u0027s already a JSON Schema for licenses. So we want to incorporate it into ours.\n\n\u0060\u0060\u0060javascript\n{\n  \u0022$schema\u0022: \u0022https://json-schema.org/draft/2020-12/schema\u0022,\n  \u0022$id\u0022: \u0022https://raw.githubusercontent.com/omaus/CSBlogpost/main/license.schema.json\u0022,\n  \u0022title\u0022: \u0022Copyright license\u0022,\n  \u0022description\u0022: \u0022A license regarding copyright\u0022,\n  \u0022type\u0022: \u0022object\u0022,\n  \u0022properties\u0022: {\n    \u0022name\u0022: {\n      \u0022description\u0022: \u0022The name of the license\u0022,\n      \u0022type\u0022: \u0022string\u0022\n    },\n    \u0022version\u0022: {\n      \u0022description\u0022: \u0022The version of this license in the form of \u0027v(Major).(Minor).(Patch)\u0027.\u0022,\n      \u0022type\u0022: \u0022string\u0022\n    },\n    \u0022author\u0022: {\n      \u0022description\u0022: \u0022The name of the author of a license.\u0022,\n      \u0022type\u0022: \u0022string\u0022\n    },\n    \u0022date\u0022: {\n      \u0022description\u0022: \u0022The exact date when a license was published.\u0022,\n      \u0022type\u0022: \u0022string\u0022\n    }\n  },\n  \u0022required\u0022: [ \u0022name\u0022, \u0022version\u0022, \u0022author\u0022, \u0022date\u0022 ]\n}\n\u0060\u0060\u0060\n\nOur new Blogpost Schema:\n\n\u0060\u0060\u0060javascript\n{\n  \u0022$schema\u0022: \u0022https://json-schema.org/draft/2020-12/schema\u0022,\n  \u0022$id\u0022: \u0022https://raw.githubusercontent.com/omaus/CSBlogpost/main/blogpost.schema.json\u0022,\n  \u0022title\u0022: \u0022Blogpost entry\u0022,\n  \u0022description\u0022: \u0022An entry of our blogpost series, consisting of an identifier, a title, a category, the upload status, and some tags.\u0022,\n  \u0022type\u0022: \u0022object\u0022,\n  \u0022properties\u0022: {\n    \u0022identifier\u0022: {\n      \u0022description\u0022: \u0022The identifier of a blogpost entry, an integer.\u0022,\n      \u0022type\u0022: \u0022integer\u0022\n    },\n    \u0022title\u0022: {\n      \u0022description\u0022: \u0022The title of a blogpost entry.\u0022,\n      \u0022type\u0022: \u0022string\u0022\n    },\n    \u0022category\u0022: {\n      \u0022description\u0022: \u0022The category a blogpost entry belongs to.\u0022,\n      \u0022type\u0022: \u0022string\u0022\n    },\n    \u0022uploaded\u0022: {\n      \u0022description\u0022: \u0022A value that tells if a blogpost entry has been already uploaded to a repository or not.\u0022,\n      \u0022type\u0022: \u0022boolean\u0022\n    },\n    \u0022tags\u0022: {\n      \u0022description\u0022: \u0022A list of tags that help describing and categorizing a blogpost entry.\u0022,\n      \u0022type\u0022: \u0022array\u0022,\n      \u0022items\u0022: {\n        \u0022type\u0022: \u0022string\u0022\n      },\n      \u0022uniqueItems\u0022: true\n    },\n    \u0022authors\u0022: {\n      \u0022description\u0022: \u0022A list of all authors associated with a blogpost entry.\u0022,\n      \u0022type\u0022: \u0022array\u0022,\n      \u0022items\u0022: {\n        \u0022type\u0022: \u0022object\u0022,\n        \u0022properties\u0022: {\n          \u0022name\u0022: {\n            \u0022type\u0022: \u0022string\u0022\n          },\n          \u0022organization\u0022: {\n            \u0022type\u0022: \u0022string\u0022\n          }\n        }\n      },\n      \u0022minItems\u0022: 1,\n      \u0022uniqueItems\u0022: true\n    },\n    \u0022license\u0022: {\n      \u0022description\u0022: \u0022The license used for a blogpost entry.\u0022,\n      \u0022$ref\u0022: \u0022https://raw.githubusercontent.com/omaus/CSBlogpost/main/license.schema.json\u0022\n    }\n  },\n  \u0022required\u0022:  [ \u0022identifier\u0022, \u0022title\u0022, \u0022category\u0022, \u0022authors\u0022, \u0022license\u0022 ]\n}\n\u0060\u0060\u0060\n\nLet\u0027s look at the finished JSON file for this blogpost:\n\n\u0060\u0060\u0060javascript\n{\n  \u0022identifier\u0022: 0,\n  \u0022title\u0022: \u0022How to develop and use a JSON Schema\u0022,\n  \u0022category\u0022: \u0022Implementation\u0022,\n  \u0022uploaded\u0022: true,\n  \u0022tags\u0022: [ \u0022implementation\u0022, \u0022JSON\u0022, \u0022standardization\u0022 ],\n  \u0022authors\u0022: [\n    {\n      \u0022name\u0022: \u0022Oliver Maus\u0022,\n      \u0022organization\u0022: \u0022CSBiology\u0022\n    }\n  ],\n  \u0022license\u0022: {\n    \u0022name\u0022: \u0022Creative Commons Attribution 4.0 International Public License\u0022,\n    \u0022version\u0022: \u0022v4.0.0\u0022,\n    \u0022author\u0022: null,\n    \u0022date\u0022: null\n  }\n}\n\u0060\u0060\u0060\n\n## Validation of JSON files by a Schema\n\nThe Newtonsoft.Json library provides great JSON Schema support regarding validating your JSON files by a given Schema.\n\n*)\n\n#r \u0022nuget: FSharp.Data\u0022\n#r \u0022nuget: Newtonsoft.Json\u0022\n#r \u0022nuget: Newtonsoft.Json.Schema\u0022\n\nopen FSharp.Data\nopen Newtonsoft.Json.Linq\nopen Newtonsoft.Json.Schema\n\n// We download the Json strings via FSharp.Data and parse them into a JSchema or JObject, respectively.\nlet licenseSchema = Http.RequestString @\u0022https://raw.githubusercontent.com/omaus/CSBlogpost/main/license.schema.json\u0022 |\u003E JSchema.Parse\nlet ccLicense = Http.RequestString @\u0022https://raw.githubusercontent.com/omaus/CSBlogpost/main/CCAtt4IPL.json\u0022 |\u003E JObject.Parse\n\n// We match the outcome of the IsValid method to get error messages, if available.\nmatch (ccLicense.IsValid(licenseSchema)) : (bool * #seq\u003Cstring\u003E) with\n| (false,msg) -\u003E printfn \u0022not valid due to: %A\u0022 msg\n| _ -\u003E printfn \u0022valid\u0022\n(*** include-output ***)\n\n(**\n\nOh no, our file seems to be invalid.  \nWhen giving it a closer look, we see that the required properties \u0022author\u0022 and \u0022date\u0022 are set to null. Thus, we replace them with empty strings and start anew.\n\n*)\n\nlet ccLicenseNew = Http.RequestString @\u0022https://raw.githubusercontent.com/omaus/CSBlogpost/main/CCAtt4IPL_new.json\u0022 |\u003E JObject.Parse\n\nmatch (ccLicenseNew.IsValid(licenseSchema)) : (bool * #seq\u003Cstring\u003E) with\n| (false,msg) -\u003E printfn \u0022not valid due to: %A\u0022 msg\n| _ -\u003E printfn \u0022valid\u0022\n(*** include-output ***)\n\n(**\n\nLet\u0027s now test this with our blogpost Schema and the corresponding JSON file.  \nSince this Schema references another one, we need a resolver:\n\n*)\n\nlet resolver = JSchemaUrlResolver()\n\nlet blogpostSchema = JSchema.Parse(Http.RequestString @\u0022https://raw.githubusercontent.com/omaus/CSBlogpost/main/blogpost.schema.json\u0022, resolver)\nlet blogpost0 = Http.RequestString @\u0022https://raw.githubusercontent.com/omaus/CSBlogpost/main/blogpost0.json\u0022 |\u003E JObject.Parse\n\nmatch (blogpost0.IsValid(blogpostSchema)) : (bool * #seq\u003Cstring\u003E) with\n| (false,msg) -\u003E printfn \u0022not valid due to: %A\u0022 msg\n| _ -\u003E printfn \u0022valid\u0022\n(*** include-output ***)\n\n(**\n\n## Further reading\n\n- [Understanding JSON](https://json-schema.org/understanding-json-schema/index.html)\n- [Official JSON Schema Homepage](https://json-schema.org/)\n- [Schema Core Specification](https://json-schema.org/draft/2020-12/json-schema-core.html)\n- [Schema Validation Specification](https://json-schema.org/draft/2020-12/json-schema-validation.html)\n- [Relative JSON pointers Specification](https://json-schema.org/draft/2020-12/relative-json-pointer.html)\n\n*)"},{"uri":"/CSBlog/posts/documentation.html","title":"Creating a Documentation","content":"(**\n\n---\ntitle: Creating a Documentation\ncategory: Documentation\ncategoryindex: 1\nindex: 0\n---\n\n*)\n\n(*** hide ***)\n\n#r \u0022nuget: Plotly.NET, 2.0.0-beta5\u0022\nopen Plotly.NET\n\n(**\n# Creating a Documentation\n## Introduction\n\nThis documentation is aimed at people of the CSB team who want to document their stuff by using the FSharp.Formatting formatter. \nThere of course is an [in depth documentation of how to use FSharp.Formatting by the creators](http://fsprojects.github.io/FSharp.Formatting/). \nAlso there\u0027s a good overview of the different mark down commands on [wikipedia](https://de.wikipedia.org/wiki/Markdown). \nThose things can be very cryptical at the beginning though. \nTherefore with this tutorial I want to give a quick and structured introduction into this topic. \nFor further information check out the aforementioned websites.  \nThe basic structure is as follows:\n\n* [At the start I want to introduce you to the **ProjectScaffold**](documentation.html#PS)\n* [Afterwards I\u0027ll explain **how to get started** and where to find what](documentation.html#Basics)\n* [Then I\u0027ll give a little introduction on **how you should write the documentian** for your code](documentation.html#What)\n* [I also include a small overview over the **different features** you have with markdown language and the formatted F#](documentation.html#Legend)\n* [At the end I\u0027ll explain **how to test your documentation**](documentation.html#Testing)  \n\n\u003Ca name=\u0022PS\u0022\u003E\u003C/a\u003E\n## What is Project Scaffold?\n\nThe libraries of the CSBiology organization are built using the [ProjectScaffold](https://github.com/fsprojects/ProjectScaffold). In principle, this is a blueprint project to make creating and maintaining a F# project easier.\nBesides many other features, this includes automatic Documentation via the [FSharp.Formatting](https://github.com/fsprojects/FSharp.Formatting) formatter. \nThis formatter is called when one executes the **build.cmd** which is located in the project folder. Opening this build.cmd does not only compile the project, it also formats the \u003Cb\u003E.fsx\u003C/b\u003E(FSharp script file) documents to \u003Cb\u003E.html\u003C/b\u003E documents by using the FSharpFormatting formatter, besides other things. \nThe script files which are formatted have to be placed in \u0022..*project name*\\docsrc\\content\u0022. The formatted html files are then automatically placed in \u0022..*project name*\\docs\u0022. Keep in mind that by using the build.cmd, those files are built and stored only locally.\n\nNow that that\u0027s covered let\u0027s get to the important questions:\n*)\n(**\n\u003Ca name=\u0022Basics\u0022\u003E\u003C/a\u003E\n## Where to put what?\nLet\u0027s say you want to write a documentation about the topic \u0060topic\u0060\n\n* Place \u0060topic.fsx\u0060 in \u0022..*project name*\\docsrc\\content\u0022\n* Write the documentation in this \u0060topic.fsx\u0060 as follows\n\n   \u0060(*** hide ***)\u0060 in front of helpful library calls; Those won\u0027t be formatted.  \n   Put text into a comment as follows: \u0060(** text *)\u0060. This text will be formatted by markdown.  \n   Everything outside those brackets will be formatted as an F#-snippet  \n\n* In the \u0022..*project name*docsrc\\tools\\templates\\template.cshtml\u0022: Put a link to the html using the following line in the place you want your link to be created:\n\n   \u0060\u003Cli\u003E\u003Ca href=\u0022@Root/topic.html\u0022\u003ETopic\u003C/a\u003E\u003C/li\u003E\u0060\n   If you have some experience with HTML, how to do this comes quite naturally. If not, you can either do it via [Trial and Error](documentation.html#Testing) or even easier: just ask.\n\n* Commit your changes and create a pull request to the upstream repository. The added htmls will be included in the next release.\n\n\n\u003Ca name=\u0022What\u0022\u003E\u003C/a\u003E\n## What should I write about? \n\nGood question! But all good questions of course also have good answers (unfortunately not really). \nThe people who will read your tutorial are of course the ones who want to use your functions. So your task in the tutorial is basically to tell them \u003Cb\u003Ehow to use\u003C/b\u003E it, not necessarily how it works. \nThe core of your documentation therefore should be code snippets of the function being applied with real values, not snippets of the function definition:\n\n\u003Cb class=\u0022redText\u0022\u003E Bad Snippet: \u003C/b\u003E\n\u0022As you can see this function takes an int and a string and multiplies every letter in the string by using an enumerator...\u0022\n*)\n\nlet multiplyLetters (count:int) (word:string) = \n    let en = word.GetEnumerator()\n    let rec loop l =\n        match en.MoveNext() with\n        | true -\u003E loop (l @ List.init count (fun i -\u003E en.Current))\n        | false -\u003E l\n    loop []\n    |\u003E fun chars -\u003E new string [|for c in chars -\u003E c|]\n  \n(**\nShowing the definition will just result in the reader to lose a lot of time deciphering your code. The snippet should only show how to apply the function, so that the user can pick it up quick and apply it to his values. What the function does behind the screens should be explained separately.\n\n\u003Cb class=\u0022greenText\u0022\u003E Good Snippet: \u003C/b\u003E\n\u0022As you can see this function takes an int and a string and multiplies the number of every letter in the string by the int\u0022\n*)\n\nlet originalString = \u0022Hello!\u0022\nlet newString = multiplyLetters 5 originalString\n\n(**\nIn many cases the user will only look for the snippet because he already knows the algorithm but is not sure about how to use the implementation. \nOf course also delivering an explanation of the background of your implementation is highly advised. Especially when the algorithms used are not as trivial as the example above. For this you can give a short intro to the topic in general and even include \u003Ca href=\u0022@Root/Documentation.html#Links\u0022\u003Elinks\u003C/a\u003E.\n*)\n\n\n\n\n\n(**\n\u003Ca name=\u0022Legend\u0022\u003E\u003C/a\u003E\n## What are the features?\n\nAs already mentioned, there are already many lists for the standard mark down commands available. A quick google search yields:\n\n* [quick intro by wikipedia](https://de.wikipedia.org/wiki/Markdown)\n* [very in-depth list by adam-p](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet)\n\nFor the matter of completion I\u0027ll still give a little overview on the different \u0060markdown-commands\u0060:  \n\n* [Headers](documentation.html#Headers) \n* Highlighting\n* [Links](documentation.html#Links) \n* [Images](documentation.html#Images) \n* [Lists](documentation.html#Lists) \n* [Escaping Markdown](documentation.html#[Escaping-Markdown) \n\nWhat\u0027s more important here though are the extra \u0060features of FSharp.Formatting\u0060, which are a bit hard to find otherwise:\n\n* Highlighting\n* [f# interactive output](documentation.html#ConsoleOutput) \n* [Plots by FSharp.Plotly](documentation.html#Plots)  \n\n\n### Headers\nFor headers, you can just put a number of \u0027#\u0027 at the start of the line, the header gets smaller, the more \u0027#\u0027 you use:  \n# One hashtag\n\u0060# One hashtag\u0060\n\n## Two hashtags\n\u0060## Two hashtags\u0060\n\n### Three hashtag\n\u0060### Three hashtags\u0060\n\n#### Four hashtags\n\u0060#### Four hashtags\u0060\n\n\u003Cbr\u003E\n\n### Links\nYou can easily link external websites or internal documents.\n\nThe basic command for this is\n\u003Cbr\u003E\n \u0060[text](link)\u0060\n\u003Cbr\u003E\nThe text you insert into the square brackets will be formatted to a clickable text. When you click it, the link will be opened. What you link to is your choice. You could for example link to external websites:  \n\u0060[Wikipedia](https://de.wikipedia.org/wiki/Wikipedia)\u0060 will be [Wikipedia](https://de.wikipedia.org/wiki/Wikipedia).  \nOn the other hand you can link local files:  \n\u0060[index](index.html)\u0060 will be [index](index.html)\n\n\n### Images\n\nImages are included similarly to normal links, but with a \u0060!\u0060 in front of them. So instead of \u0022\\[text](link)\u0022 you use  \n\u0060![image name](image link)\u0060  \nAgain you can link external images with a full url:  \n\u0060![Marshmallow](\\https://www.sammobile.com/wp-content/uploads/2015/12/android-marshmallow.jpg)\u0060 will be  \n\u003Cbr\u003E\n![Marshmallow](https://www.sammobile.com/wp-content/uploads/2015/12/android-marshmallow.jpg)\n\nOn the other hand you can link local files:  \n\u0060![logo](img/logo.png)\u0060 will be ![logo](img/logo.png) \nMake sure that the image you want to reference is located at \u0022..*project name*/docs/files/img\u0022. Also at the moment only **.png**s can be used for local referencing because only those are copied to the gh-pages in the building process.\n\n### Lists\n\nThere are unnumbered and numbered lists. For unnumbered lists, do a break and write consecutive lines with \u0060*\u0060 at the beginning. \nFor numbered lists, do the same but with numbers\u002Bdot instead.\nUnnumbered Lists:  \n\n\u0060* Entry1\u0060  \n\u0060* Entry2\u0060  \n\u0060* Entry3 also I include a piece of text so you get the idea of how the text will align when it reaches the end of the line.\u0060  \n\nwill be  \n\n* Entry1\n* Entry2\n* Entry3 also I include a piece of text so you get the idea of how the text will align when it reaches the end of the line.\n\nNumbered Lists:  \n\n\u00601. Entry1\u0060  \n\u00602. Entry2\u0060  \n\u00603. Entry3 also I include a piece of text so you get the idea of how the text will align when it reaches the end of the line.\u0060  \n\nwill be  \n\n1. Entry1\n2. Entry2\n3. Entry3 also I include a piece of text so you get the idea of how the text will align when it reaches the end of the line.  \n\nWhen you want to write **indented paragraphs** for one bullet point, \nafter writing the text which is supposed to stick to the bulletpoint, do: break, leave a line, tap space 3 times and write the text.  \n\u0060* Entry1\u0060  \n\u0060* Entry2 this is the text which sticks to this point, after this text I\u0027ll do the aforementioned things for an indented paragraph  \u0060  \n\u0060\u0060  \n\u0060   This is the next paragraph of this bulletpoint  \u0060  \n\u0060\u0060  \n\u0060* Entry3\u0060  \n\nwill be  \n\n* Entry1\n* Entry2 this is the text which sticks to this point, after this text I\u0027ll do the aforementioned things for an indented paragraph  \n\n   This is the next paragraph of this bulletpoint  \n\n* Entry3\n\n\n\n### Escaping Markdown\n\nSometimes you need to use characters for your documentation, which also are used by markdown. \nThis can lead to weird outcomes where characters are missing. \nTo circumvent this, you can use a \u0060\\\u0060 (backslash) infront of those characters.  \nE.g.:\n\n* \u0060There were two ** in the night sky\u0060 will be \u0060There were two in the night sky\u0060  \n* \u0060There were two \\*\\* in the night sky\u0060 will be \u0060There were two ** in the night sky\u0060\n\n\u003Ca name=\u0022ConsoleOutput\u0022\u003E\u003C/a\u003E\n### Console Output\nWith the FSharp.Formatting you can not only include stylized code snippets, but also include console output of the F# interactive. \n\nFor this, just put (\\*\\*\\* include-value:*ValueName* \\*\\*\\*\\) at the position in your document where you want your output to end up. The *ValueName* is the name to which a value has to be bound.\n\nE.g.:\n\u003Cpre\u003E\nlet whatAGreatName = 4 \u002B 5\n\n(\\*\\*\\* include-value:whatAGreatName \\*\\*\\*\\) \n\u003C/pre\u003E\nwill be\n\n*)\n\nlet whatAGreatName = 4 \u002B 5\n\n(*** include-value:whatAGreatName ***) \n\n(**\n\u003Ca name=\u0022Plots\u0022\u003E\u003C/a\u003E\n### Plots\nFor an in depth FSharp.Plotly tutorial, look [here](http://muehlhaus.github.io/FSharp.Plotly/).\n\nPlots can also be included via the same procedure:\n\u003Cpre\u003E\nlet myChart = Array.init 10 id |\u003E Array.indexed |\u003E Chart.Point\n\n(\\*\\*\\* include-value:myChart \\*\\*\\*\\) \n\u003C/pre\u003E\nwill be\n*)\n\nlet myChart = Array.init 10 id |\u003E Array.indexed |\u003E Chart.Point \n\n(*** include-value:myChart ***) \n\n(**\n\u003Ca name=\u0022Testing\u0022\u003E\u003C/a\u003E\n## How can I test my formatted documentation?\nYou can play around with the markdown text in an online tool like [dillinger.io](http://dillinger.io/).  \nThis is not really helpful though, if you want to test how the formattet site will look like on the project website. [As stated above](documentation.html#How), the build.cmd will create the \u0060htmls\u0060s of the \u0060fsx\u0060s which are located at \u0022..*project name*\\docsrc\\content\u0022 and automatically put them into \u0022..*project name*\\docs\u0022 together with all other needed files.\nYou can access the htmls there after building, but the references to the css styling files and all other ressources won\u0027t work. Therefore you will get a very plain looking, unstyled website.  \nTo bring everything in good form. A new buildtarget \u0022**releaseLocal**\u0022 was included in the CSB-projects. To access this target:\n\n### With VS2017\n\n* you have to **open your windows command prompt**\n* afterwards **navigate to the repository** \n\n   e.g. \u0060cd C:\\Users\\*ExampleUser*\\Source\\Repos\\*project name*\u0060\n\n* run \u0022**build -t releaselocal**\u0022\n\n   Besides compiling the repository, this will create the html files and copy everything from \u0022..*project name*\\docs\u0022 to \u0022..*project name*\\temp\\localDocs\u0022. \n\nWhen this is done, you can just open the \u0022temp/localDocs\u0022 folder and browse the htmls in a stylized form.\n\n*)"},{"uri":"/CSBlog/posts/blogposts_overview.html","title":"BlogPosts","content":"---\ntitle: BlogPosts\ncategory: Overview\ncategoryindex: 0\nindex: 1\n---\n\n# BlogPosts\n\nThis is a chronological overview over every published BlogPost on this page.  \nThe BlogPosts themselves have categories which they are assigned to. The corresponding category is listed on the sidebar (left).\n\n* February 1, 2017: [Creating a Documentation]() (by [Heinrich Lukas Weil](https://github.com/HLWeil))\n* February 8, 2019: [Introduction to Data visualization using Plotly.NET]() (by [Kevin Schneider](https://github.com/kMutagene))\n* September 3, 2021: [How to develop and use a JSON Schema]() (by [Oliver Maus](https://github.com/omaus))\n\n# CSBar Reports\n\nA chronological list about every CSBar Report published:\n\n1. [December 15, 2018]()"},{"uri":"/CSBlog/posts/WorkshopSeries_3_plotly.html","title":"Introduction to Data visualization using FSharp.Plotly","content":"(**\n\n---\ntitle: Introduction to Data visualization using FSharp.Plotly\ncategory: Visualization\ncategoryindex: 2\nindex: 0\n---\n\n*)\n\n(***hide***)\n#r \u0022nuget: Plotly.NET, 2.0.0-beta5\u0022\n#r \u0022nuget: FSharpAux, 1.0.0\u0022\nopen Plotly.NET\nopen FSharpAux\n\nlet xSin = [0. .. 0.01 .. (4. * System.Math.PI)]\nlet ySin = xSin |\u003E List.map sin\nlet sinChart = \n    Chart.Spline(xSin,ySin)\n    |\u003E Chart.withTitle(\u0022sin(x)\u0022)\n    |\u003E Chart.withX_AxisStyle(\u0022x\u0022,Showgrid=false,Showline=true)\n    |\u003E Chart.withY_AxisStyle(\u0022y\u0022,Showgrid=false,Showline=true)\n\n\n(**\n![HeaderPicture](../img/Plotly_HeadPic.png)\n\n# Introduction to Data visualization using FSharp.Plotly\n_[Kevin Schneider](https://github.com/kMutagene)_\n\n## Table of contents \n * [Plotly.js](#Plotly.js)\n * [FSharp.Plotly](#FSharp.Plotly)\n * [Chart functions](#Chart functions)\n * [Rendering Charts](#Rendering Charts)\n * [Styling your Charts](#Styling your Charts)\n * [Multicharts](#Multicharts)\n\nIn the scope of this post, I will shortly introduce Plotly.js and our FSharp counterpart FSharp.Plotly.\nI will go over the basic workflow to generate charts from data and how to style and combine charts.\n\n\u003C/br\u003E\n\n##Plotly.js\n\n[Plotly.js](https://plot.ly/javascript/) is an open source charting library written in javascript.\n\n![Plotly.js](../img/Plotly_1.png)\n\nVarious chart types are supported. From simple scatter and line plots over heatmaps and various 3D-plots to Map charts, \nyou will find something fitting your needs for visualization. \n\nOne of the coolest things about these charts is that all of them are interactive, as you can see in the example below. You can Zoom in and out,\nresize and move the axis, and much more.\n*)\n\n(***include-value:sinChart***)\n\n(**\nPlotly does not only generate your charts. It provides a service to change style and data of your chart after generation, which is called the chart studio.\n\u00DDou can access the chart studio by clicking on the \u0027edit in chart studio\u0027 icon above the chart.\n\n\u003C/br\u003E\n\n## FSharp.Plotly\n\n[FSharp.Plotly](https://github.com/muehlhaus/FSharp.Plotly) is a FSharp wrapper for Plotly.js. The library provides a complete mapping for the configuration options of \nthe underlying library but empowers you to use multiple programming styles (object oriented, functional, mixtures). So you get a nice F# interface support with the full power of Plotly.\n\n\u003C/br\u003E\n\n## Chart functions\n\nIn general, the Chart functions are a mapping from any kind of data to a GenericChart type:\n\n![chart functions](img/ChartFunctions.png)\n\nAll chart functions (Point,Line,Heatmap,etc.) are provided as static methods of the \u0060Chart\u0060 Class. All of them take the input data and map\nto a \u0060GenericChart\u0060 type. Creating a chart can be as easy as this:\n*)\n\nopen Plotly.NET\n\n//Create some example data\n\n///x values ranging from 0 to 4\u03C0\nlet xVals = [0. .. 0.01 .. (4. * System.Math.PI)]\n///cosine values from 0 to 4 \u03C0\nlet yVals = xVals |\u003E List.map cos\n\n///GenericChart containing an X/Y scatter plot of the values above\nlet cosChart = Chart.Point(xVals,yVals)\n\n(**\n\n\u003C/br\u003E\n\n## Rendering Charts\n\nAll cool and good, but how to actually render a chart? This is pretty easy. We simply use the \u0060Chart.Show\u0060 function, which can take any\n\u0060GenericChart\u0060, generate the respective html file, and display it in your default browser.\n\nIn general, the Chart.Show function maps from the GenericChart type to unit, and rendering the html file as a side effect:\n\n![Chart.Show](../img/ChartShow.png)\n\n\n*)\n(***do-not-eval***)\n//Render the chart from the example above in your browser\ncosChart\n|\u003E Chart.Show\n(**\n\nThis will display the following chart in your browser:\n\n*)\n\n(***include-value:cosChart***)\n\n(**\n\n\u003C/br\u003E\n\n## Styling your Charts\n\nI dont know about you, but i think this chart could look a little bit better.\n\nStyling charts with FSharp.Plotly can be done in multiple ways. We can use the optional parameters when initializing a chart:\n\n*)\n\nopen FSharpAux.Colors\n\nlet cosChart2 = \n    Chart.Point\n        (\n            xVals,\n            yVals,\n            MarkerSymbol = StyleParam.Symbol.Square,\n            Color = (Table.Office.lightGreen |\u003E toWebColor),\n            TextFont = Font.init(StyleParam.FontFamily.Droid_Sans_Mono)\n        )\n\n(***include-value:cosChart2***)\n\n(** \n\nOr use a more functional style and pipe our chart into styling functions, which have even more control:\nWe first apply a similar styling as in the example above, but then additionally take control over the axis stylings (title,line style, and grid display):\n*)\n\nlet sinChart2 =\n    Chart.Point(xVals,yVals)\n    |\u003E Chart.withMarkerStyle(Size=1,Color=(Table.Office.darkBlue |\u003E toWebColor),Symbol=StyleParam.Symbol.Square)\n    |\u003E Chart.withTitle(\u0022sin(x)\u0022)\n    |\u003E Chart.withX_AxisStyle(\u0022x\u0022,Showline=true,Showgrid=false,MinMax=(0.,(4.* System.Math.PI)))\n    |\u003E Chart.withY_AxisStyle(\u0022y\u0022,Showline=true,Showgrid=false)\n\n(***include-value:sinChart2***)\n\n(**\nI am a fan of mirrored axis. There is no option to do that in \u0060Chart.withX_AxisStyle\u0060.\nTo have even more control over the Axis, we can initialize custom axis. This has to be implemented as a \nfunction because of the axis object may be mutated by styling functions when used in different charts. \nWe can prevent this by using a function that for every chart returns a new Axis.\n*)\n\nlet myXAxis () = \n    Axis.LinearAxis.init(\n        Title   = \u0022x\u0022,\n        Showgrid= false,\n        Showline= true,\n        Mirror  = StyleParam.Mirror.All,\n        Range   = StyleParam.Range.MinMax (0.,(4. * System.Math.PI)),\n        Tickmode = StyleParam.TickMode.Array,\n        Tickvals = ([|0. .. (0.5 * System.Math.PI) .. (4. * System.Math.PI)|] |\u003E Array.map (round 2)),\n        Ticks   = StyleParam.TickOptions.Inside\n        )\n\nlet myYAxis () = \n    Axis.LinearAxis.init(\n        Title   = \u0022y\u0022,\n        Showgrid= false,\n        Showline= true,\n        Mirror  = StyleParam.Mirror.AllTicks,\n        Range   = StyleParam.Range.MinMax (-1.,1.),\n        Tickmode = StyleParam.TickMode.Auto,\n        Ticks   = StyleParam.TickOptions.Inside\n        )\n\nlet mirroredSinChart =\n    Chart.Point(xVals,yVals)\n    |\u003E Chart.withMarkerStyle(Size=1,Color=(Table.Office.darkBlue |\u003E toWebColor),Symbol=StyleParam.Symbol.Square)\n    |\u003E Chart.withTitle(\u0022sin(x)\u0022)\n    |\u003E Chart.withX_Axis(myXAxis())\n    |\u003E Chart.withY_Axis(myYAxis())\n    |\u003E Chart.withSize(750.,750.)\n\n(***include-value:mirroredSinChart***)\n\n(**\n\n\u003C/br\u003E\n\u003C/br\u003E\n\u003C/br\u003E\n\u003C/br\u003E\n\u003C/br\u003E\n\u003C/br\u003E\n\u003C/br\u003E\n\u003C/br\u003E\n\n## Multicharts\n\nTo leverage the full power of data visualization, we often want to display multiple data series in the same plot. There are basically\ntwo options: Combining charts in a single plot or displaying them side-by-side in a stacked chart. Both functions map from a GenericChart collection to a single GenericChart:\n\n![MultiCharts](../img/MultiCharts.png)\n\n### Combining charts\n\nThe \u0060Chart.Combine\u0060 function creates a single plot with the same axis from a collection of charts:\n\n*)\n\nlet combinedChart = \n    [\n        Chart.Spline(xVals,xVals |\u003E List.map sin, Name=\u0022sin(x)\u0022)\n\n        Chart.Spline(xVals,xVals |\u003E List.map cos,Name=\u0022cos(x)\u0022)\n    ]\n    |\u003E Chart.Combine\n    |\u003E Chart.withTitle(\u0022sin(x) and cos(x)\u0022)\n    |\u003E Chart.withX_Axis(myXAxis())\n    |\u003E Chart.withY_Axis(myYAxis())\n    |\u003E Chart.withSize(750.,750.)\n\n(***include-value:combinedChart***)\n\n(**\n\u003C/br\u003E\n\u003C/br\u003E\n\u003C/br\u003E\n\u003C/br\u003E\n\u003C/br\u003E\n\u003C/br\u003E\n\u003C/br\u003E\n\u003C/br\u003E\n\u003C/br\u003E\n\n### Stacking charts\n\nThe \u0060Chart.Stack\u0060 function creates a multichart with the contents in a given collection of charts.\nAll subplots keep their own axis.\n\n*)\n\nlet stackedChart = \n    [\n        Chart.Spline(xVals,xVals |\u003E List.map sin)\n        |\u003E Chart.withTraceName(Name=\u0022sin(x)\u0022)\n        |\u003E Chart.withY_Axis(myYAxis())\n        |\u003E Chart.withX_Axis(myXAxis())\n\n        Chart.Spline(xVals,xVals |\u003E List.map cos)\n        |\u003E Chart.withTraceName(Name=\u0022sin(x)\u0022)\n        |\u003E Chart.withY_Axis(myYAxis())\n        |\u003E Chart.withX_Axis(myXAxis())\n    ]\n    |\u003E Chart.Stack(1,0.1)\n\n(***include-value:stackedChart***)"},{"uri":"/CSBlog/posts/CoffeeReport1.html","title":"CSBar Report 1","content":"(**\n\n---\ntitle: CSBar Report 1\ncategory: CSBar Reports\ncategoryindex: 100\nindex: 0\n---\n\n*)\n\n(*** hide ***)\n\n#r \u0022nuget: Plotly.NET, 2.0.0-beta5\u0022\nopen Plotly.NET\n\n(**\n# CSBar Report 1\n_Kevin Schneider_\n\n##Welcome to the first CSBar report! \nAs you all know, our CSBar ticking system went live a few weeks ago.\nNow that we sent out the first balance notifications, I decided that its a good time to write the very first report and share an analysis of the coffe/beer/beverage consumption with you.\n\nBut first, I want to thank everyone participating. A whooping 100% of coffees registered by the coffee machine have actually been ticked with our system, thanks for your patience during beta and your honesty.\n\nI divided the analysis in 3 parts:\n\n 1. [Summary Stats](#Summary-stats) - A summary of the time course of coffee, beer and beverage consumption and their fraction of the total consumption\n 2. [Consumption Stats](#Consumption-stats) - Distributions of coffee, beer and beverage consumption over teams and the whole CSBar population\n 3. [Distance Stats](#Distance-stats) - An analysis of the distances teams and their members traveled to get coffee\n\nAnalysis and plots where done by using the toolkits we develop. Feel free to take a look at our libraries at [Github](https://github.com/CSBiology), they are all open source and free to use.\nAll the charts are interactive, meaning you can zoom in/out etc.\n\n## Summary stats\n\n### Time course of consumption\nThe overall timecourse of the respective consumptions so far is not too suprising.\nCoffee consumption is high during all weekdays and almost not present on weekends. Interestingly, there always seems to be somebody working in the building at weekends who needs a nice cup of coffee to get work done.\nBeer consumption seems to be the highest on wednesdays (Bergfest!) and especially on fridays (weekend is coming, yay!). There also seem to be no parties in the social room at weekends, at least not with CSBar beer.\nBeverage consumption peeks at Aug 28th, and the low consumption afterwards may be due to the missing afri cola, which was very delicious.\n\n  \u003Cdiv id=\u0022e075b67b-a726-4a55-a26c-4be921c46433\u0022 style=\u0022width: 600px; height: 600px;\u0022\u003E\u003C!-- Plotly chart will be drawn inside this DIV --\u003E\u003C/div\u003E        \n  \u003Cscript\u003E\n    var data = [{\u0022type\u0022:\u0022bar\u0022,\u0022x\u0022:[\u00222018-08-17T00:00:00\u0022,\u00222018-08-18T00:00:00\u0022,\u00222018-08-19T00:00:00\u0022,\u00222018-08-20T00:00:00\u0022,\u00222018-08-21T00:00:00\u0022,\u00222018-08-22T00:00:00\u0022,\u00222018-08-23T00:00:00\u0022,\u00222018-08-24T00:00:00\u0022,\u00222018-08-25T00:00:00\u0022,\u00222018-08-26T00:00:00\u0022,\u00222018-08-27T00:00:00\u0022,\u00222018-08-28T00:00:00\u0022,\u00222018-08-29T00:00:00\u0022,\u00222018-08-30T00:00:00\u0022,\u00222018-08-31T00:00:00\u0022,\u00222018-09-01T00:00:00\u0022,\u00222018-09-02T00:00:00\u0022,\u00222018-09-03T00:00:00\u0022,\u00222018-09-04T00:00:00\u0022],\u0022y\u0022:[0,1,0,18,13,9,29,23,1,2,23,31,32,20,19,1,0,24,14],\u0022marker\u0022:{},\u0022name\u0022:\u0022CoffeeConsumption\u0022,\u0022xaxis\u0022:\u0022x\u0022,\u0022yaxis\u0022:\u0022y\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022x\u0022:[\u00222018-08-17T00:00:00\u0022,\u00222018-08-18T00:00:00\u0022,\u00222018-08-19T00:00:00\u0022,\u00222018-08-20T00:00:00\u0022,\u00222018-08-21T00:00:00\u0022,\u00222018-08-22T00:00:00\u0022,\u00222018-08-23T00:00:00\u0022,\u00222018-08-24T00:00:00\u0022,\u00222018-08-25T00:00:00\u0022,\u00222018-08-26T00:00:00\u0022,\u00222018-08-27T00:00:00\u0022,\u00222018-08-28T00:00:00\u0022,\u00222018-08-29T00:00:00\u0022,\u00222018-08-30T00:00:00\u0022,\u00222018-08-31T00:00:00\u0022,\u00222018-09-01T00:00:00\u0022,\u00222018-09-02T00:00:00\u0022,\u00222018-09-03T00:00:00\u0022,\u00222018-09-04T00:00:00\u0022],\u0022y\u0022:[0,1,0,18,13,9,29,23,1,2,23,31,32,20,19,1,0,24,14],\u0022mode\u0022:\u0022lines\u0022,\u0022fill\u0022:\u0022tozeroy\u0022,\u0022name\u0022:\u0022 \u0022,\u0022line\u0022:{\u0022width\u0022:{},\u0022color\u0022:\u0022blue\u0022,\u0022shape\u0022:\u0022spline\u0022,\u0022smoothing\u0022:100,\u0022dash\u0022:\u0022dash\u0022},\u0022marker\u0022:{\u0022color\u0022:\u0022blue\u0022},\u0022xaxis\u0022:\u0022x\u0022,\u0022yaxis\u0022:\u0022y\u0022},{\u0022type\u0022:\u0022bar\u0022,\u0022x\u0022:[\u00222018-08-17T00:00:00\u0022,\u00222018-08-18T00:00:00\u0022,\u00222018-08-19T00:00:00\u0022,\u00222018-08-20T00:00:00\u0022,\u00222018-08-21T00:00:00\u0022,\u00222018-08-22T00:00:00\u0022,\u00222018-08-23T00:00:00\u0022,\u00222018-08-24T00:00:00\u0022,\u00222018-08-25T00:00:00\u0022,\u00222018-08-26T00:00:00\u0022,\u00222018-08-27T00:00:00\u0022,\u00222018-08-28T00:00:00\u0022,\u00222018-08-29T00:00:00\u0022,\u00222018-08-30T00:00:00\u0022,\u00222018-08-31T00:00:00\u0022,\u00222018-09-01T00:00:00\u0022,\u00222018-09-02T00:00:00\u0022,\u00222018-09-03T00:00:00\u0022,\u00222018-09-04T00:00:00\u0022],\u0022y\u0022:[5,1,0,1,4,6,4,10,0,0,4,6,4,0,3,0,0,5,0],\u0022marker\u0022:{\u0022color\u0022:\u0022rgb(246, 126, 0)\u0022},\u0022name\u0022:\u0022BeerConsumption\u0022,\u0022xaxis\u0022:\u0022x2\u0022,\u0022yaxis\u0022:\u0022y2\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022x\u0022:[\u00222018-08-17T00:00:00\u0022,\u00222018-08-18T00:00:00\u0022,\u00222018-08-19T00:00:00\u0022,\u00222018-08-20T00:00:00\u0022,\u00222018-08-21T00:00:00\u0022,\u00222018-08-22T00:00:00\u0022,\u00222018-08-23T00:00:00\u0022,\u00222018-08-24T00:00:00\u0022,\u00222018-08-25T00:00:00\u0022,\u00222018-08-26T00:00:00\u0022,\u00222018-08-27T00:00:00\u0022,\u00222018-08-28T00:00:00\u0022,\u00222018-08-29T00:00:00\u0022,\u00222018-08-30T00:00:00\u0022,\u00222018-08-31T00:00:00\u0022,\u00222018-09-01T00:00:00\u0022,\u00222018-09-02T00:00:00\u0022,\u00222018-09-03T00:00:00\u0022,\u00222018-09-04T00:00:00\u0022],\u0022y\u0022:[5,1,0,1,4,6,4,10,0,0,4,6,4,0,3,0,0,5,0],\u0022mode\u0022:\u0022lines\u0022,\u0022fill\u0022:\u0022tozeroy\u0022,\u0022name\u0022:\u0022 \u0022,\u0022line\u0022:{\u0022width\u0022:{},\u0022color\u0022:\u0022orange\u0022,\u0022shape\u0022:\u0022spline\u0022,\u0022smoothing\u0022:100,\u0022dash\u0022:\u0022dash\u0022},\u0022marker\u0022:{\u0022color\u0022:\u0022orange\u0022},\u0022xaxis\u0022:\u0022x2\u0022,\u0022yaxis\u0022:\u0022y2\u0022},{\u0022type\u0022:\u0022bar\u0022,\u0022x\u0022:[\u00222018-08-17T00:00:00\u0022,\u00222018-08-18T00:00:00\u0022,\u00222018-08-19T00:00:00\u0022,\u00222018-08-20T00:00:00\u0022,\u00222018-08-21T00:00:00\u0022,\u00222018-08-22T00:00:00\u0022,\u00222018-08-23T00:00:00\u0022,\u00222018-08-24T00:00:00\u0022,\u00222018-08-25T00:00:00\u0022,\u00222018-08-26T00:00:00\u0022,\u00222018-08-27T00:00:00\u0022,\u00222018-08-28T00:00:00\u0022,\u00222018-08-29T00:00:00\u0022,\u00222018-08-30T00:00:00\u0022,\u00222018-08-31T00:00:00\u0022,\u00222018-09-01T00:00:00\u0022,\u00222018-09-02T00:00:00\u0022,\u00222018-09-03T00:00:00\u0022,\u00222018-09-04T00:00:00\u0022],\u0022y\u0022:[0,0,0,3,2,5,6,3,1,0,0,7,2,0,2,1,0,0,0],\u0022marker\u0022:{\u0022color\u0022:\u0022rgb(65, 160, 33)\u0022},\u0022name\u0022:\u0022BeverageConsumption\u0022,\u0022xaxis\u0022:\u0022x3\u0022,\u0022yaxis\u0022:\u0022y3\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022x\u0022:[\u00222018-08-17T00:00:00\u0022,\u00222018-08-18T00:00:00\u0022,\u00222018-08-19T00:00:00\u0022,\u00222018-08-20T00:00:00\u0022,\u00222018-08-21T00:00:00\u0022,\u00222018-08-22T00:00:00\u0022,\u00222018-08-23T00:00:00\u0022,\u00222018-08-24T00:00:00\u0022,\u00222018-08-25T00:00:00\u0022,\u00222018-08-26T00:00:00\u0022,\u00222018-08-27T00:00:00\u0022,\u00222018-08-28T00:00:00\u0022,\u00222018-08-29T00:00:00\u0022,\u00222018-08-30T00:00:00\u0022,\u00222018-08-31T00:00:00\u0022,\u00222018-09-01T00:00:00\u0022,\u00222018-09-02T00:00:00\u0022,\u00222018-09-03T00:00:00\u0022,\u00222018-09-04T00:00:00\u0022],\u0022y\u0022:[0,0,0,3,2,5,6,3,1,0,0,7,2,0,2,1,0,0,0],\u0022mode\u0022:\u0022lines\u0022,\u0022fill\u0022:\u0022tozeroy\u0022,\u0022name\u0022:\u0022 \u0022,\u0022line\u0022:{\u0022width\u0022:{},\u0022color\u0022:\u0022green\u0022,\u0022shape\u0022:\u0022spline\u0022,\u0022smoothing\u0022:100,\u0022dash\u0022:\u0022dash\u0022},\u0022marker\u0022:{\u0022color\u0022:\u0022green\u0022},\u0022xaxis\u0022:\u0022x3\u0022,\u0022yaxis\u0022:\u0022y3\u0022}];\n    var layout = {\u0022yaxis\u0022:{\u0022tickmode\u0022:\u0022auto\u0022,\u0022ticks\u0022:\u0022inside\u0022,\u0022mirror\u0022:\u0022all\u0022,\u0022showline\u0022:true,\u0022showgrid\u0022:false,\u0022titlefont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022tickfont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022title\u0022:\u0022Consumption [cups]\u0022,\u0022range\u0022:[0.0,33.0],\u0022anchor\u0022:\u0022x\u0022,\u0022domain\u0022:[0.71666666666666667,1.0]},\u0022xaxis\u0022:{\u0022tickmode\u0022:\u0022auto\u0022,\u0022ticks\u0022:\u0022inside\u0022,\u0022mirror\u0022:\u0022all\u0022,\u0022showline\u0022:true,\u0022showgrid\u0022:false,\u0022zeroline\u0022:false,\u0022titlefont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022tickfont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022anchor\u0022:\u0022y\u0022,\u0022domain\u0022:[0.0,0.95]},\u0022yaxis2\u0022:{\u0022tickmode\u0022:\u0022auto\u0022,\u0022ticks\u0022:\u0022inside\u0022,\u0022mirror\u0022:\u0022all\u0022,\u0022showline\u0022:true,\u0022showgrid\u0022:false,\u0022titlefont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022tickfont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022title\u0022:\u0022Consumption [huelsen]\u0022,\u0022range\u0022:[0.0,33.0],\u0022anchor\u0022:\u0022x2\u0022,\u0022domain\u0022:[0.38333333333333341,0.66666666666666674]},\u0022xaxis2\u0022:{\u0022tickmode\u0022:\u0022auto\u0022,\u0022ticks\u0022:\u0022inside\u0022,\u0022mirror\u0022:\u0022all\u0022,\u0022showline\u0022:true,\u0022showgrid\u0022:false,\u0022zeroline\u0022:false,\u0022titlefont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022tickfont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022anchor\u0022:\u0022y2\u0022,\u0022domain\u0022:[0.0,0.95]},\u0022yaxis3\u0022:{\u0022tickmode\u0022:\u0022auto\u0022,\u0022ticks\u0022:\u0022inside\u0022,\u0022mirror\u0022:\u0022all\u0022,\u0022showline\u0022:true,\u0022showgrid\u0022:false,\u0022titlefont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022tickfont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022title\u0022:\u0022Consumption [bottles]\u0022,\u0022range\u0022:[0.0,33.0],\u0022anchor\u0022:\u0022x3\u0022,\u0022domain\u0022:[0.050000000000000044,0.33333333333333337]},\u0022xaxis3\u0022:{\u0022tickmode\u0022:\u0022auto\u0022,\u0022ticks\u0022:\u0022inside\u0022,\u0022mirror\u0022:\u0022all\u0022,\u0022showline\u0022:true,\u0022showgrid\u0022:false,\u0022zeroline\u0022:false,\u0022titlefont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022tickfont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022anchor\u0022:\u0022y3\u0022,\u0022domain\u0022:[0.0,0.95]},\u0022width\u0022:1000.0,\u0022height\u0022:750.0};\n    Plotly.newPlot(\u0027e075b67b-a726-4a55-a26c-4be921c46433\u0027, data, layout);\n  \u003C/script\u003E\n\n\u003Cbr\u003E\u003C/br\u003E\n\u003Cbr\u003E\u003C/br\u003E\n\n### Fractions\nThe total consumption consists of the following fractions:\n\n * 260 coffees\n * 53 beers \n * 32 other beverages.\n \n  \u003Cdiv class=\u0022PlotlyChart\u0022 id=\u0022366cabba-b467-4f10-b2de-2c5992d6980c\u0022 style=\u0022width: 600px; height: 600px;\u0022\u003E\u003C!-- Plotly chart will be drawn inside this DIV --\u003E\u003C/div\u003E        \n  \u003Cscript\u003E\n    var data = [{\u0022type\u0022:\u0022pie\u0022,\u0022values\u0022:[260,32,53],\u0022labels\u0022:[\u0022Coffee\u0022,\u0022Beverages\u0022,\u0022Beer\u0022],\u0022marker\u0022:{},\u0022text\u0022:[\u0022Coffee\u0022,\u0022Beverages\u0022,\u0022Beer\u0022]}];\n    var layout = {};\n    Plotly.newPlot(\u0027366cabba-b467-4f10-b2de-2c5992d6980c\u0027, data, layout);\n  \u003C/script\u003E\n\n## Consumption stats\n\n### Distribution by team\nCoffee consumption is by far the highest in the ITCrowd team. This may be due to the widely accepted rule that liquid coffee can be directly converted to code by our bodies using a pathway called \u0022I will stay until this code works\u0022. Or maybe some caffeine addiction problems. Your call.\n\nThe team with the next lower coffee consumption is the Mibis team. This is not surprising since ITCrowd and Mibis used the coffee machine together way before the move to the new building.\n\nThe low coffee consumption of the other teams could be explayined by them either primarily using their own coffee machines or not all team members knowing about the system yet.\nHowever, the beer consumption of some of these teams points more to the former than the latter.\n\nITCrowd is also the top dog of other beverage consumption (did I mention that I like afri cola?)\n\n  \u003Cdiv class=\u0022PlotlyChart\u0022 id=\u00228b2201a7-8f55-4bf6-8fbf-5956967303bc\u0022 style=\u0022width: 600px; height: 600px;\u0022\u003E\u003C!-- Plotly chart will be drawn inside this DIV --\u003E\u003C/div\u003E        \n  \u003Cscript\u003E\n    var data = [{\u0022type\u0022:\u0022bar\u0022,\u0022x\u0022:[\u0022Fungis\u0022,\u0022ITCrowd\u0022,\u0022Mibis\u0022,\u0022hotOrNot\u0022,\u0022Ribos\u0022],\u0022y\u0022:[4,169,71,14,6],\u0022marker\u0022:{},\u0022name\u0022:\u0022CoffeeConsumption\u0022,\u0022showlegend\u0022:true,\u0022textposition\u0022:\u0022top right\u0022,\u0022xaxis\u0022:\u0022x\u0022,\u0022yaxis\u0022:\u0022y\u0022},{\u0022type\u0022:\u0022bar\u0022,\u0022x\u0022:[\u0022Fungis\u0022,\u0022ITCrowd\u0022,\u0022Mibis\u0022,\u0022hotOrNot\u0022,\u0022Ribos\u0022],\u0022y\u0022:[6,11,4,17,15],\u0022marker\u0022:{},\u0022name\u0022:\u0022BeerConsumption\u0022,\u0022showlegend\u0022:true,\u0022textposition\u0022:\u0022top right\u0022,\u0022xaxis\u0022:\u0022x2\u0022,\u0022yaxis\u0022:\u0022y2\u0022},{\u0022type\u0022:\u0022bar\u0022,\u0022x\u0022:[\u0022Fungis\u0022,\u0022ITCrowd\u0022,\u0022Mibis\u0022,\u0022hotOrNot\u0022,\u0022Ribos\u0022],\u0022y\u0022:[2,20,1,5,4],\u0022marker\u0022:{},\u0022name\u0022:\u0022BeverageConsumption\u0022,\u0022xaxis\u0022:\u0022x3\u0022,\u0022yaxis\u0022:\u0022y3\u0022}];\n    var layout = {\u0022yaxis\u0022:{\u0022tickmode\u0022:\u0022auto\u0022,\u0022ticks\u0022:\u0022inside\u0022,\u0022mirror\u0022:\u0022all\u0022,\u0022showline\u0022:true,\u0022showgrid\u0022:false,\u0022titlefont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022tickfont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022title\u0022:\u0022Consumption [cups]\u0022,\u0022anchor\u0022:\u0022x\u0022,\u0022domain\u0022:[0.71666666666666667,1.0]},\u0022xaxis\u0022:{\u0022tickmode\u0022:\u0022auto\u0022,\u0022ticks\u0022:\u0022inside\u0022,\u0022mirror\u0022:\u0022all\u0022,\u0022showline\u0022:true,\u0022showgrid\u0022:false,\u0022zeroline\u0022:false,\u0022titlefont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022tickfont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022anchor\u0022:\u0022y\u0022,\u0022domain\u0022:[0.0,0.95]},\u0022yaxis2\u0022:{\u0022tickmode\u0022:\u0022auto\u0022,\u0022ticks\u0022:\u0022inside\u0022,\u0022mirror\u0022:\u0022all\u0022,\u0022showline\u0022:true,\u0022showgrid\u0022:false,\u0022titlefont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022tickfont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022title\u0022:\u0022Consumption [huelsen]\u0022,\u0022anchor\u0022:\u0022x2\u0022,\u0022domain\u0022:[0.38333333333333341,0.66666666666666674]},\u0022xaxis2\u0022:{\u0022tickmode\u0022:\u0022auto\u0022,\u0022ticks\u0022:\u0022inside\u0022,\u0022mirror\u0022:\u0022all\u0022,\u0022showline\u0022:true,\u0022showgrid\u0022:false,\u0022zeroline\u0022:false,\u0022titlefont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022tickfont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022anchor\u0022:\u0022y2\u0022,\u0022domain\u0022:[0.0,0.95]},\u0022yaxis3\u0022:{\u0022tickmode\u0022:\u0022auto\u0022,\u0022ticks\u0022:\u0022inside\u0022,\u0022mirror\u0022:\u0022all\u0022,\u0022showline\u0022:true,\u0022showgrid\u0022:false,\u0022titlefont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022tickfont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022title\u0022:\u0022Consumption [bottles]\u0022,\u0022anchor\u0022:\u0022x3\u0022,\u0022domain\u0022:[0.050000000000000044,0.33333333333333337]},\u0022xaxis3\u0022:{\u0022tickmode\u0022:\u0022auto\u0022,\u0022ticks\u0022:\u0022inside\u0022,\u0022mirror\u0022:\u0022all\u0022,\u0022showline\u0022:true,\u0022showgrid\u0022:false,\u0022zeroline\u0022:false,\u0022titlefont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022tickfont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022anchor\u0022:\u0022y3\u0022,\u0022domain\u0022:[0.0,0.95]},\u0022width\u0022:1000.0,\u0022height\u0022:750.0};\n    Plotly.newPlot(\u00278b2201a7-8f55-4bf6-8fbf-5956967303bc\u0027, data, layout);\n  \u003C/script\u003E\n\n\u003Cbr\u003E\u003C/br\u003E\n\u003Cbr\u003E\u003C/br\u003E\n\n### Population distribution\n\nThere seems to be only two types of coffee drinkers: Those that drink many cups, and those that drink a low amount of cups. A middle ground seems to be missing, but this could be due to the for us invisible amount of coffe from other machines that we cant register.\nThis seems not to be the case for the other types of drinks, where the decay from high to low consumption looks much more linear. Further clustering analysis could be used to further test this observation.\n\n  \u003Cdiv class=\u0022PlotlyChart\u0022 id=\u0022383d0f9c-c6a0-45b5-b52b-2e9901f13a55\u0022 style=\u0022width: 600px; height: 600px;\u0022\u003E\u003C!-- Plotly chart will be drawn inside this DIV --\u003E\u003C/div\u003E        \n  \u003Cscript\u003E\n    var data = [{\u0022type\u0022:\u0022bar\u0022,\u0022x\u0022:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],\u0022y\u0022:[32,30,27,25,25,23,21,9,9,7,7,7,6,6,5,4,4,3,3,2,2,2,2,1,1,1],\u0022marker\u0022:{},\u0022name\u0022:\u0022CoffeeConsumption\u0022,\u0022xaxis\u0022:\u0022x\u0022,\u0022yaxis\u0022:\u0022y\u0022},{\u0022type\u0022:\u0022bar\u0022,\u0022x\u0022:[0,1,2,3,4,5,6,7,8,9,10,11,12],\u0022y\u0022:[8,7,7,7,5,4,4,3,3,2,1,1,1],\u0022marker\u0022:{},\u0022name\u0022:\u0022BeerConsumption\u0022,\u0022xaxis\u0022:\u0022x2\u0022,\u0022yaxis\u0022:\u0022y2\u0022},{\u0022type\u0022:\u0022bar\u0022,\u0022x\u0022:[0,1,2,3,4,5,6,7,8,9,10,11,12,13],\u0022y\u0022:[5,5,3,3,3,3,2,2,1,1,1,1,1,1],\u0022marker\u0022:{},\u0022name\u0022:\u0022BeverageConsumption\u0022,\u0022xaxis\u0022:\u0022x3\u0022,\u0022yaxis\u0022:\u0022y3\u0022}];\n    var layout = {\u0022yaxis\u0022:{\u0022tickmode\u0022:\u0022auto\u0022,\u0022ticks\u0022:\u0022inside\u0022,\u0022mirror\u0022:\u0022all\u0022,\u0022showline\u0022:true,\u0022showgrid\u0022:false,\u0022titlefont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022tickfont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022title\u0022:\u0022Consumption [cups]\u0022,\u0022anchor\u0022:\u0022x\u0022,\u0022domain\u0022:[0.71666666666666667,1.0]},\u0022xaxis\u0022:{\u0022tickmode\u0022:\u0022auto\u0022,\u0022ticks\u0022:\u0022inside\u0022,\u0022mirror\u0022:\u0022all\u0022,\u0022showline\u0022:true,\u0022showgrid\u0022:false,\u0022zeroline\u0022:false,\u0022titlefont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022tickfont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022anchor\u0022:\u0022y\u0022,\u0022domain\u0022:[0.0,0.95]},\u0022yaxis2\u0022:{\u0022tickmode\u0022:\u0022auto\u0022,\u0022ticks\u0022:\u0022inside\u0022,\u0022mirror\u0022:\u0022all\u0022,\u0022showline\u0022:true,\u0022showgrid\u0022:false,\u0022titlefont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022tickfont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022title\u0022:\u0022Consumption [huelsen]\u0022,\u0022anchor\u0022:\u0022x2\u0022,\u0022domain\u0022:[0.38333333333333341,0.66666666666666674]},\u0022xaxis2\u0022:{\u0022tickmode\u0022:\u0022auto\u0022,\u0022ticks\u0022:\u0022inside\u0022,\u0022mirror\u0022:\u0022all\u0022,\u0022showline\u0022:true,\u0022showgrid\u0022:false,\u0022zeroline\u0022:false,\u0022titlefont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022tickfont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022anchor\u0022:\u0022y2\u0022,\u0022domain\u0022:[0.0,0.95]},\u0022yaxis3\u0022:{\u0022tickmode\u0022:\u0022auto\u0022,\u0022ticks\u0022:\u0022inside\u0022,\u0022mirror\u0022:\u0022all\u0022,\u0022showline\u0022:true,\u0022showgrid\u0022:false,\u0022titlefont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022tickfont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022title\u0022:\u0022Consumption [bottles]\u0022,\u0022anchor\u0022:\u0022x3\u0022,\u0022domain\u0022:[0.050000000000000044,0.33333333333333337]},\u0022xaxis3\u0022:{\u0022tickmode\u0022:\u0022auto\u0022,\u0022ticks\u0022:\u0022inside\u0022,\u0022mirror\u0022:\u0022all\u0022,\u0022showline\u0022:true,\u0022showgrid\u0022:false,\u0022zeroline\u0022:false,\u0022titlefont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022tickfont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022anchor\u0022:\u0022y3\u0022,\u0022domain\u0022:[0.0,0.95]},\u0022width\u0022:1000.0,\u0022height\u0022:750.0};\n    Plotly.newPlot(\u0027383d0f9c-c6a0-45b5-b52b-2e9901f13a55\u0027, data, layout);\n  \u003C/script\u003E\n\n\u003Cbr\u003E\u003C/br\u003E\n\u003Cbr\u003E\u003C/br\u003E\n\n## Distance stats\n\nFor this analysis, Venny and I chose the paths that we thought are most likely taken to walk to the coffee machine. If you feel like they are not adequate for your team, feel free to correct us.\n\n![Distances](img/Distances.png)\n\nThe distances for a one way walk to the coffee machines for the teams then are:\n\n * Fungis   : 25.2m\n * hotOrNot : 29.5m\n * Mibis    : 36.5m\n * Ribos    : 38.5m\n * ITCrowd  : 47m\n\nTaking into account that most of the time, one also has to walk back after/to/while consuming the coffee, this distance is doubled for every walk.\nAs the team with the highest distance to the coffee machine is also the one with the highest coffee consumption, the ITCrowd team finishes at a total of almost 16(!) walked kilometers, only to get coffee.\nAs the distances and coffee consumption of the other teams are lower, the walked kilometers decrease drastically.\n\n\n  \u003Cdiv class=\u0022PlotlyChart\u0022 id=\u0022f1808472-82db-4f1e-b4ff-751fbea243f3\u0022 style=\u0022width: 600px; height: 600px;\u0022\u003E\u003C!-- Plotly chart will be drawn inside this DIV --\u003E\u003C/div\u003E        \n  \u003Cscript\u003E\n    var data = [{\u0022type\u0022:\u0022bar\u0022,\u0022x\u0022:[\u0022Fungis\u0022,\u0022ITCrowd\u0022,\u0022Mibis\u0022,\u0022hotOrNot\u0022,\u0022Ribos\u0022],\u0022y\u0022:[201.6,15886.0,5183.0,826.0,462.0],\u0022marker\u0022:{},\u0022name\u0022:\u0022total distance traveled\u0022,\u0022xaxis\u0022:\u0022x\u0022,\u0022yaxis\u0022:\u0022y\u0022},{\u0022type\u0022:\u0022bar\u0022,\u0022x\u0022:[\u0022Fungis\u0022,\u0022ITCrowd\u0022,\u0022Mibis\u0022,\u0022hotOrNot\u0022,\u0022Ribos\u0022],\u0022y\u0022:[201.6,1985.75,471.18181818181819,206.5,231.0],\u0022marker\u0022:{},\u0022name\u0022:\u0022mean distance traveled\u0022,\u0022error_y\u0022:{\u0022array\u0022:[\u0022NaN\u0022,981.3084195530547,489.00589325320368,140.44809242800938,217.78888860545663]},\u0022xaxis\u0022:\u0022x2\u0022,\u0022yaxis\u0022:\u0022y2\u0022}];\n    var layout = {\u0022yaxis\u0022:{\u0022tickmode\u0022:\u0022auto\u0022,\u0022ticks\u0022:\u0022inside\u0022,\u0022mirror\u0022:\u0022all\u0022,\u0022showline\u0022:true,\u0022showgrid\u0022:false,\u0022titlefont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022tickfont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022title\u0022:\u0022Total distance traveled [m]\u0022,\u0022anchor\u0022:\u0022x\u0022,\u0022domain\u0022:[0.55,1.0]},\u0022xaxis\u0022:{\u0022tickmode\u0022:\u0022auto\u0022,\u0022ticks\u0022:\u0022inside\u0022,\u0022mirror\u0022:\u0022all\u0022,\u0022showline\u0022:true,\u0022showgrid\u0022:false,\u0022zeroline\u0022:false,\u0022titlefont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022tickfont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022anchor\u0022:\u0022y\u0022,\u0022domain\u0022:[0.0,0.95]},\u0022yaxis2\u0022:{\u0022tickmode\u0022:\u0022auto\u0022,\u0022ticks\u0022:\u0022inside\u0022,\u0022mirror\u0022:\u0022all\u0022,\u0022showline\u0022:true,\u0022showgrid\u0022:false,\u0022titlefont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022tickfont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022title\u0022:\u0022mean distance traveled [m/person]\u0022,\u0022anchor\u0022:\u0022x2\u0022,\u0022domain\u0022:[0.050000000000000044,0.5]},\u0022xaxis2\u0022:{\u0022tickmode\u0022:\u0022auto\u0022,\u0022ticks\u0022:\u0022inside\u0022,\u0022mirror\u0022:\u0022all\u0022,\u0022showline\u0022:true,\u0022showgrid\u0022:false,\u0022zeroline\u0022:false,\u0022titlefont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022tickfont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:15.0},\u0022anchor\u0022:\u0022y2\u0022,\u0022domain\u0022:[0.0,0.95]},\u0022width\u0022:1000.0,\u0022height\u0022:750.0};\n    Plotly.newPlot(\u0027f1808472-82db-4f1e-b4ff-751fbea243f3\u0027, data, layout);\n  \u003C/script\u003E\n\n\u003Cbr\u003E\u003C/br\u003E\n\u003Cbr\u003E\u003C/br\u003E\n## Final remarks\nThe main conclusion that can be drawn from this analysis is that the coffee machine is mainly used by the people which already used it before the move (ITCrowd and Mibis).\nThe other teams mainly use the ticking system for either alcoholic or non alcoholic beverages, and are either no big coffee drinkers or still use their own coffee machines. \nHowever, if you think this effect is due to problems using the new system, feel free to send me an email with your questions about the ticking system.\n\nIf you have ideas of other ways to look at this data or are interested in the datasets yourself, you are also welcome to write me an email or discuss it with me directly.\n\nSo far this was fun. I will use these kinds of reports in the future to explore more ways of analyzing the datasets we get by the ticking system and will include them in future reports.\n\nSo long and happy ticking,\nKevin\n\n\u003Cbr\u003E\u003C/br\u003E\n\u003Cbr\u003E\u003C/br\u003E\n\n*)\n\n"},{"uri":"/CSBlog/posts/about.html","title":"About","content":"---\ntitle: About\ncategory: Overview\ncategoryindex: 0\nindex: 0\n---\n\n# About this Blog\n\nThe CSBlog is the official blog of the Computational Systems Biology workgroup at the TU Kaiserslautern. \n\nWe are a relatively young workgroup, with Jun. Prof. Dr. Timo Muehlhaus being the head of the group. Besides research, creating a functional library including a broad range of computational tools written in F# is one of our major interests. The set of libraries can be viewed and accessed on [GitHub](https://github.com/CSBiology).\n\n## Maintainers\nHeinrich Lukas Weil  \nContact: hl.weil@t-online.de  \nGitHub: https://github.com/HLWeil\n\nKevin Schneider  \nContact: kevin-schneider@mutagene.de  \nGitHub: https://github.com/kMutagene\n\n## Technical Information about this Blog\nThe current version was set up using [FSharp.Formatting](https://github.com/fsprojects/FSharp.Formatting).\nThe style of the Website is based on a customized version of [Bulma](https://github.com/CSBiology/CSBlog/blob/main/docs/content/fsdocs-custom.css)."}]