[{"uri":"/CSBlog/index.html","title":"CSBlog\r\n","content":"# CSBlog\r\n\r\n![CSB](img/CSB.png)\r\n\r\nWelcome to the CSBlog.\r\nThis is the place where members of the department of Computational Systems Biology of the TU Kaiserslautern blog about their work,\r\nresearch, and other loosely related stuff.\r\n\r\nFor more information about our research and our group in general, head to our [website](https://csb.bio.uni-kl.de/).\r\nIf you want to take a look at our projects, head over to our [github page](https://github.com/CSBiology)\r\n\r\nBlogPosts are accessible on the sidebar."},{"uri":"/CSBlog/posts/0_how2JSONSchema.html","title":"How to develop and use a JSON Schema","content":"(**\n\n---\ntitle: How to develop and use a JSON Schema\ncategory: Implementation\ncategoryindex: 3\nindex: 0\n---\n\n# How to develop and use a JSON Schema\n_[Oliver Maus](https://github.com/omaus)_\n\n## Content\n- [What are JSON Schemas?](#What-are-JSON-Schemas)\n- [JSON syntax](#JSON-syntax)\n- [The basic structure of a JSON Schema](#The-basic-structure-of-a-JSON-Schema)\n- [References](#References)\n- [Validation of JSON files by a Schema](#Validation-of-JSON-files-by-a-Schema)\n- [Further reading](#Further-reading)\n\n## What are JSON Schemas?\n\nJSON (JavaScript Object Notation) is a common data format for storing data and metadata and widely used for data exchange purposes. It is easily human- as well as machine-readable.  \nWhile JSON files and formats can be written in a simple and non-standardized way (as long as the syntax is respected), standardizing a specific JSON format might be useful when considering validation, documentation, and interaction control.\n\nJSON Schemas are data models that are build out of JSON syntax themselves.\n\n## JSON syntax\n\nSince the syntax of JSON is very simple and easy to understand, here\u0027s everything to know:  \n\n- A JSON file consists of at least one empty object\n- Objects are opened with \u0060{\u0060 and closed with \u0060}\u0060\n- Objects consist of key/value (aka name/value) pairs. Keys (or names) are identifiers realized as strings, values are corresponding information realized via primitive data types, both are separated via the character \u0060:\u0060\n- There are 6 basic primitive data types:\n  - null: no value (\u0060null\u0060)\n  - boolean: \u0060true\u0060 or \u0060false\u0060 value\n  - number: decimal number value, e.g. \u00607\u0060 or \u00601.337\u0060\n  - string: unicode text value, e.g. \u0060\u0022Hello World!\u0022\u0060\n  - object: unordered set of properties, consists of key/value pairs, e.g. \u0060{ \u0022name\u0022: \u0022Max Mustermann\u0022, \u0022age\u0022: 44 }\u0060\n  - array: ordered list of instances, consists of values, e.g. \u0060[ \u0022Hello \u0022, \u0022World!\u0022 ]\u0060\n- As seen above, \u0060,\u0060 is used to separate different key/value pairs in objects and instances in arrays\n- Objects can be nested infinitely\n- Scoping is similar to F#, both \u0060[ \u0022Hello \u0022, \u0022World!\u0022 ]\u0060 as well as  \n![image](https://user-images.githubusercontent.com/47781170/131900223-3fa36d2f-d65a-44ce-9913-69a2f42b35f2.png)  \n  is possible\n\n## The basic structure of a JSON Schema\n\nSince JSON Schemas are JSON files in a sense, they are written very similarly.  \nLet\u0027s develop a JSON schema for \u2012 say \u2013 future blogposts. It should consist of an identifier, a title, a category to which it belongs, a value if it is already uploaded or not, and an array of tags.  \nA finished JSON file following this schema should therefore look like this:\n\n\u0060\u0060\u0060javascript\n{\n  \u0022identifier\u0022: 0,\n  \u0022title\u0022: \u0022How to develop and use a JSON Schema\u0022,\n  \u0022category\u0022: \u0022Implementation\u0022,\n  \u0022uploaded\u0022: true,\n  \u0022tags\u0022: [ \u0022implementation\u0022, \u0022JSON\u0022, \u0022standardization\u0022 ]\n}\n\u0060\u0060\u0060\n\nJSON Schemas must start with 2 unique key/value pairs that are referencing them as specific JSON Schemas:\n\n\u0060\u0060\u0060javascript\n{\n  \u0022$schema\u0022: \u0022https://json-schema.org/draft/2020-12/schema\u0022,\n  \u0022$id\u0022: \u0022https://raw.githubusercontent.com/omaus/CSBlogpost/main/blogpost.schema.json\u0022,\n}\n\u0060\u0060\u0060\n\nThe first key, \u0060\u0022$schema\u0022\u0060 references a JSON Schema to a so-called Metaschema, here of the ID \u0022https://json-schema.org/draft/2020-12/schema\u0022.  \nThe value of second key, \u0060\u0022$id\u0022\u0060, is a unique identifier for this JSON Schema, typically in the form of a URI.  \nThe \u0060$\u0060 is a special character and marks Schema-related keywords.\n\nThere\u0027s more to add: Our JSON Schema needs a title and a description:\n\n\u0060\u0060\u0060javascript\n{\n  \u0022$schema\u0022: \u0022https://json-schema.org/draft/2020-12/schema\u0022,\n  \u0022$id\u0022: \u0022https://raw.githubusercontent.com/omaus/CSBlogpost/main/blogpost.schema.json\u0022,\n  \u0022title\u0022: \u0022Blogpost entry\u0022,\n  \u0022description\u0022: \u0022An entry of our blogpost series, consisting of an identifier, a title, a category, the upload status, and some tags.\u0022,\n}\n\u0060\u0060\u0060\n\nThese are called \u0022Schema Annotations\u0022 since they annotate our Schema and provide some information about it.\nThe last thing to add is a so-called \u0022Validation keyword\u0022:\n\n\u0060\u0060\u0060javascript\n{\n  \u0022$schema\u0022: \u0022https://json-schema.org/draft/2020-12/schema\u0022,\n  \u0022$id\u0022: \u0022https://raw.githubusercontent.com/omaus/CSBlogpost/main/blogpost.schema.json\u0022,\n  \u0022title\u0022: \u0022Blogpost entry\u0022,\n  \u0022description\u0022: \u0022An entry of our blogpost series, consisting of an identifier, a title, a category, the upload status, and some tags.\u0022,\n  \u0022type\u0022: \u0022object\u0022\n}\n\u0060\u0060\u0060\n\nThe JSON files of our Schema must have a type. In our case, it\u0027s an object but the primitive data types as well as \u0060integer\u0060 (a \u0060number\u0060 without fractional parts) are also applicable. We will examine that later.\nThere are a lot of other Schema Keywords, Schema Annotations and Validation Keywords. We will see some of them later but there are also some that are not important now and can be looked at later if required.\n\nNow, since we wrote the \u0022metadata\u0022 of our JSON Schema, we want to add the properties of our blogpost JSON file seen above:\n\n\u0060\u0060\u0060javascript\n{\n  \u0022$schema\u0022: \u0022https://json-schema.org/draft/2020-12/schema\u0022,\n  \u0022$id\u0022: \u0022https://raw.githubusercontent.com/omaus/CSBlogpost/main/blogpost.schema.json\u0022,\n  \u0022title\u0022: \u0022Blogpost entry\u0022,\n  \u0022description\u0022: \u0022An entry of our blogpost series, consisting of an identifier, a title, a category, the upload status, and some tags.\u0022,\n  \u0022type\u0022: \u0022object\u0022,\n  \u0022properties\u0022: {\n    \u0022identifier\u0022: {\n      \u0022description\u0022: \u0022The identifier of a blogpost entry, an integer.\u0022,\n      \u0022type\u0022: \u0022integer\u0022\n    },\n    \u0022title\u0022: {\n      \u0022description\u0022: \u0022The title of a blogpost entry.\u0022,\n      \u0022type\u0022: \u0022string\u0022\n    },\n    \u0022category\u0022: {\n      \u0022description\u0022: \u0022The category a blogpost entry belongs to.\u0022,\n      \u0022type\u0022: \u0022string\u0022\n    },\n    \u0022uploaded\u0022: {\n      \u0022description\u0022: \u0022A value that tells if a blogpost entry has been already uploaded to a repository or not.\u0022,\n      \u0022type\u0022: \u0022boolean\u0022\n    },\n    \u0022tags\u0022: {\n        \u0022description\u0022: \u0022A list of tags that help describing and categorizing a blogpost entry.\u0022,\n        \u0022type\u0022: \u0022array\u0022,\n        \u0022items\u0022: {\n          \u0022type\u0022: \u0022string\u0022\n        },\n        \u0022uniqueItems\u0022: true\n    }\n  },\n  \u0022required\u0022:  [ \u0022identifier\u0022, \u0022title\u0022, \u0022category\u0022 ]\n}\n\u0060\u0060\u0060\n\n\u0060\u0022properties\u0022\u0060 is an object consisting of objects. The properties set in our original JSON file are realized here. As for the \u0060\u0022tags\u0022\u0060 property, we define that the tags must be different.  \nThere\u0027s another Validation Keyword we added here: The \u0060\u0022required\u0022\u0060 key. It is an array consisting of all the properties we think are mandatory for the JSON file to be valid. In our case, we think that the tags and the upload status should rather be optional information and thus are not added to the required list.\n\nSince we are dealing with this JSON file and its Schema right now we are realizing that an author is missing! \uD83D\uDE31\n\n\u0060\u0060\u0060javascript\n{\n  \u0022identifier\u0022: 0,\n  \u0022title\u0022: \u0022How to develop and use a JSON Schema\u0022,\n  \u0022category\u0022: \u0022Implementation\u0022,\n  \u0022uploaded\u0022: true,\n  \u0022tags\u0022: [ \u0022implementation\u0022, \u0022JSON\u0022, \u0022standardization\u0022 ],\n  \u0022authors\u0022: [\n    {\n      \u0022name\u0022: \u0022Oliver Maus\u0022,\n      \u0022organization\u0022: \u0022CSBiology\u0022\n    }\n  ]\n}\n\u0060\u0060\u0060\n\nThere\u0027s something new: We now must add a nested type to our Schema:\n\n\u0060\u0060\u0060javascript\n{\n  \u0022$schema\u0022: \u0022https://json-schema.org/draft/2020-12/schema\u0022,\n  \u0022$id\u0022: \u0022https://raw.githubusercontent.com/omaus/CSBlogpost/main/blogpost.schema.json\u0022,\n  \u0022title\u0022: \u0022Blogpost entry\u0022,\n  \u0022description\u0022: \u0022An entry of our blogpost series, consisting of an identifier, a title, a category, the upload status, and some tags.\u0022,\n  \u0022type\u0022: \u0022object\u0022,\n  \u0022properties\u0022: {\n    \u0022identifier\u0022: {\n      \u0022description\u0022: \u0022The identifier of a blogpost entry, an integer.\u0022,\n      \u0022type\u0022: \u0022integer\u0022\n    },\n    \u0022title\u0022: {\n      \u0022description\u0022: \u0022The title of a blogpost entry.\u0022,\n      \u0022type\u0022: \u0022string\u0022\n    },\n    \u0022category\u0022: {\n      \u0022description\u0022: \u0022The category a blogpost entry belongs to.\u0022,\n      \u0022type\u0022: \u0022string\u0022\n    },\n    \u0022uploaded\u0022: {\n      \u0022description\u0022: \u0022A value that tells if a blogpost entry has been already uploaded to a repository or not.\u0022,\n      \u0022type\u0022: \u0022boolean\u0022\n    },\n    \u0022tags\u0022: {\n      \u0022description\u0022: \u0022A list of tags that help describing and categorizing a blogpost entry.\u0022,\n      \u0022type\u0022: \u0022array\u0022,\n      \u0022items\u0022: {\n        \u0022type\u0022: \u0022string\u0022\n      },\n      \u0022uniqueItems\u0022: true\n    },\n    \u0022authors\u0022: {\n      \u0022description\u0022: \u0022A list of all authors associated with a blogpost entry.\u0022,\n      \u0022type\u0022: \u0022array\u0022,\n      \u0022items\u0022: {\n        \u0022type\u0022: \u0022object\u0022,\n        \u0022properties\u0022: {\n          \u0022name\u0022: {\n            \u0022type\u0022: \u0022string\u0022\n          },\n          \u0022organization\u0022: {\n            \u0022type\u0022: \u0022string\u0022\n          }\n        }\n      },\n      \u0022minItems\u0022: 1,\n      \u0022uniqueItems\u0022: true\n    }\n  },\n  \u0022required\u0022:  [ \u0022identifier\u0022, \u0022title\u0022, \u0022category\u0022, \u0022authors\u0022 ]\n}\n\u0060\u0060\u0060\n\nWe show our Schema to our boss but unfortunately he\u0027s not satisfied. He reckons that there should be a license associated with it.\n\n## References\n\nThere\u0027s already a JSON Schema for licenses. So we want to incorporate it into ours.\n\n\u0060\u0060\u0060javascript\n{\n  \u0022$schema\u0022: \u0022https://json-schema.org/draft/2020-12/schema\u0022,\n  \u0022$id\u0022: \u0022https://raw.githubusercontent.com/omaus/CSBlogpost/main/license.schema.json\u0022,\n  \u0022title\u0022: \u0022Copyright license\u0022,\n  \u0022description\u0022: \u0022A license regarding copyright\u0022,\n  \u0022type\u0022: \u0022object\u0022,\n  \u0022properties\u0022: {\n    \u0022name\u0022: {\n      \u0022description\u0022: \u0022The name of the license\u0022,\n      \u0022type\u0022: \u0022string\u0022\n    },\n    \u0022version\u0022: {\n      \u0022description\u0022: \u0022The version of this license in the form of \u0027v(Major).(Minor).(Patch)\u0027.\u0022,\n      \u0022type\u0022: \u0022string\u0022\n    },\n    \u0022author\u0022: {\n      \u0022description\u0022: \u0022The name of the author of a license.\u0022,\n      \u0022type\u0022: \u0022string\u0022\n    },\n    \u0022date\u0022: {\n      \u0022description\u0022: \u0022The exact date when a license was published.\u0022,\n      \u0022type\u0022: \u0022string\u0022\n    }\n  },\n  \u0022required\u0022: [ \u0022name\u0022, \u0022version\u0022, \u0022author\u0022, \u0022date\u0022 ]\n}\n\u0060\u0060\u0060\n\nOur new Blogpost Schema:\n\n\u0060\u0060\u0060javascript\n{\n  \u0022$schema\u0022: \u0022https://json-schema.org/draft/2020-12/schema\u0022,\n  \u0022$id\u0022: \u0022https://raw.githubusercontent.com/omaus/CSBlogpost/main/blogpost.schema.json\u0022,\n  \u0022title\u0022: \u0022Blogpost entry\u0022,\n  \u0022description\u0022: \u0022An entry of our blogpost series, consisting of an identifier, a title, a category, the upload status, and some tags.\u0022,\n  \u0022type\u0022: \u0022object\u0022,\n  \u0022properties\u0022: {\n    \u0022identifier\u0022: {\n      \u0022description\u0022: \u0022The identifier of a blogpost entry, an integer.\u0022,\n      \u0022type\u0022: \u0022integer\u0022\n    },\n    \u0022title\u0022: {\n      \u0022description\u0022: \u0022The title of a blogpost entry.\u0022,\n      \u0022type\u0022: \u0022string\u0022\n    },\n    \u0022category\u0022: {\n      \u0022description\u0022: \u0022The category a blogpost entry belongs to.\u0022,\n      \u0022type\u0022: \u0022string\u0022\n    },\n    \u0022uploaded\u0022: {\n      \u0022description\u0022: \u0022A value that tells if a blogpost entry has been already uploaded to a repository or not.\u0022,\n      \u0022type\u0022: \u0022boolean\u0022\n    },\n    \u0022tags\u0022: {\n      \u0022description\u0022: \u0022A list of tags that help describing and categorizing a blogpost entry.\u0022,\n      \u0022type\u0022: \u0022array\u0022,\n      \u0022items\u0022: {\n        \u0022type\u0022: \u0022string\u0022\n      },\n      \u0022uniqueItems\u0022: true\n    },\n    \u0022authors\u0022: {\n      \u0022description\u0022: \u0022A list of all authors associated with a blogpost entry.\u0022,\n      \u0022type\u0022: \u0022array\u0022,\n      \u0022items\u0022: {\n        \u0022type\u0022: \u0022object\u0022,\n        \u0022properties\u0022: {\n          \u0022name\u0022: {\n            \u0022type\u0022: \u0022string\u0022\n          },\n          \u0022organization\u0022: {\n            \u0022type\u0022: \u0022string\u0022\n          }\n        }\n      },\n      \u0022minItems\u0022: 1,\n      \u0022uniqueItems\u0022: true\n    },\n    \u0022license\u0022: {\n      \u0022description\u0022: \u0022The license used for a blogpost entry.\u0022,\n      \u0022$ref\u0022: \u0022https://raw.githubusercontent.com/omaus/CSBlogpost/main/license.schema.json\u0022\n    }\n  },\n  \u0022required\u0022:  [ \u0022identifier\u0022, \u0022title\u0022, \u0022category\u0022, \u0022authors\u0022, \u0022license\u0022 ]\n}\n\u0060\u0060\u0060\n\nLet\u0027s look at the finished JSON file for this blogpost:\n\n\u0060\u0060\u0060javascript\n{\n  \u0022identifier\u0022: 0,\n  \u0022title\u0022: \u0022How to develop and use a JSON Schema\u0022,\n  \u0022category\u0022: \u0022Implementation\u0022,\n  \u0022uploaded\u0022: true,\n  \u0022tags\u0022: [ \u0022implementation\u0022, \u0022JSON\u0022, \u0022standardization\u0022 ],\n  \u0022authors\u0022: [\n    {\n      \u0022name\u0022: \u0022Oliver Maus\u0022,\n      \u0022organization\u0022: \u0022CSBiology\u0022\n    }\n  ],\n  \u0022license\u0022: {\n    \u0022name\u0022: \u0022Creative Commons Attribution 4.0 International Public License\u0022,\n    \u0022version\u0022: \u0022v4.0.0\u0022,\n    \u0022author\u0022: null,\n    \u0022date\u0022: null\n  }\n}\n\u0060\u0060\u0060\n\n## Validation of JSON files by a Schema\n\nThe Newtonsoft.Json library provides great JSON Schema support regarding validating your JSON files by a given Schema.\n\n*)\n\n(***hide***)\n\n#nowarn \u00220064\u0022\n\n(******)\n\n#r \u0022nuget: FSharp.Data\u0022\n#r \u0022nuget: Newtonsoft.Json\u0022\n#r \u0022nuget: Newtonsoft.Json.Schema\u0022\n\nopen FSharp.Data\nopen Newtonsoft.Json.Linq\nopen Newtonsoft.Json.Schema\n\n// We download the Json strings via FSharp.Data and parse them into a JSchema or JObject, respectively.\nlet licenseSchema = Http.RequestString @\u0022https://raw.githubusercontent.com/omaus/CSBlogpost/main/license.schema.json\u0022 |\u003E JSchema.Parse\nlet ccLicense = Http.RequestString @\u0022https://raw.githubusercontent.com/omaus/CSBlogpost/main/CCAtt4IPL.json\u0022 |\u003E JObject.Parse\n\n// We match the outcome of the IsValid method to get error messages, if available.\nmatch (ccLicense.IsValid(licenseSchema)) : (bool * #seq\u003Cstring\u003E) with\n| (false,msg) -\u003E printfn \u0022not valid due to: %A\u0022 msg\n| _ -\u003E printfn \u0022valid\u0022\n(*** include-output ***)\n\n(**\n\nOh no, our file seems to be invalid.  \nWhen giving it a closer look, we see that the required properties \u0022author\u0022 and \u0022date\u0022 are set to null. Thus, we replace them with empty strings and start anew.\n\n*)\n\nlet ccLicenseNew = Http.RequestString @\u0022https://raw.githubusercontent.com/omaus/CSBlogpost/main/CCAtt4IPL_new.json\u0022 |\u003E JObject.Parse\n\nmatch (ccLicenseNew.IsValid(licenseSchema)) : (bool * #seq\u003Cstring\u003E) with\n| (false,msg) -\u003E printfn \u0022not valid due to: %A\u0022 msg\n| _ -\u003E printfn \u0022valid\u0022\n(*** include-output ***)\n\n(**\n\nLet\u0027s now test this with our blogpost Schema and the corresponding JSON file.  \nSince this Schema references another one, we need a resolver:\n\n*)\n\nlet resolver = JSchemaUrlResolver()\n\nlet blogpostSchema = JSchema.Parse(Http.RequestString @\u0022https://raw.githubusercontent.com/omaus/CSBlogpost/main/blogpost.schema.json\u0022, resolver)\nlet blogpost0 = Http.RequestString @\u0022https://raw.githubusercontent.com/omaus/CSBlogpost/main/blogpost0.json\u0022 |\u003E JObject.Parse\n\nmatch (blogpost0.IsValid(blogpostSchema)) : (bool * #seq\u003Cstring\u003E) with\n| (false,msg) -\u003E printfn \u0022not valid due to: %A\u0022 msg\n| _ -\u003E printfn \u0022valid\u0022\n(*** include-output ***)\n\n(**\n\n## Further reading\n\n- [Understanding JSON](https://json-schema.org/understanding-json-schema/index.html)\n- [Official JSON Schema Homepage](https://json-schema.org/)\n- [Schema Core Specification](https://json-schema.org/draft/2020-12/json-schema-core.html)\n- [Schema Validation Specification](https://json-schema.org/draft/2020-12/json-schema-validation.html)\n- [Relative JSON pointers Specification](https://json-schema.org/draft/2020-12/relative-json-pointer.html)\n\n*)"},{"uri":"/CSBlog/posts/1_how2Fable.html","title":"How to use Fable","content":"---\r\ntitle: How to use Fable\r\ncategory: Implementation\r\ncategoryindex: 3\r\nindex: 1\r\n---\r\n\r\n# What is Fable and how to use it\r\n_[Kevin Frey](https://github.com/Freymaurer)_\r\n\r\n## Content\r\n- [What is Fable?](#What-is-Fable)\r\n- [Fable Example](#Fable-Example)\r\n    - [Fable Template](#Fable-Template)\r\n    - [Fable REPL code](#Fable-REPL-code)\r\n- [F# to JS](#FSharp-to-JS)\r\n- [JS in F#](#JS-in-F#)\r\n    - [Dynamic casting](#Dynamic-casting)\r\n    - [Setting up an interface](#Setting-up-an-interface)\r\n    - [Typesafety?](#Typesafety)\r\n- [Further reading](#Further-reading)\r\n\r\n## What is Fable\r\n\r\n\u003E Fable is a compiler that lets you use F# to build applications that run in the JavaScript ecosystem.\r\n\r\nWhat does this exactly mean?\r\n\r\nYou can write F# code and let fable translate it to javascript. (The following window shows [Fable REPL](https://fable.io/repl/) and in-browser tool live translating F# code to javascript.)\r\n\r\n\u003Cbr\u003E\r\n\r\n\u003Cdetails\u003E\r\n\u003Csummary\u003EClick to show Fable REPL\u003C/summary\u003E\r\n\r\n\u003Ciframe height=\u0022600px\u0022 width=\u0022100%\u0022 src=\u0022https://fable.io/repl/#?code=LYewJgrgNgpgBAFRBATgOgKoDsCWIsDOAsAFCkD05cAYiiMHABYAuzADgQFyVggDGBNMBx86BEADNmaPvXIwsAWggFyvZlhjNyEgowCGKNuWbIUFKgDUcBHMzjNG8KDiwBrOPoBGIAG7wJEBQ4UBR4V0CUYH1mPCw4fDgYfT5GBxA2EQs4AE1kOD59eP0ocTgJVzAQoOdklFwsAHM4MPFUPhgCT3sWdi5KXQMjNCDG8lJSDIU4AGUATwJmGGAJklBIWDgAERtRHGEsGJgwbDiugF5VuGu4SioEJ3KQKCgQAHdXZrC2VoVmLsc8AIEDsCQknjgbCg\u002BjmnwKhjAaFINwcczY8BmIPslxIKJRAB84AAJOr-ZF466EgDCUAgXmIuIpcEJO30oCwYAZTOZszY\u002BjAnSuNzucAAgttdih9q4jlVTolCsVSiA4F54CpjukWjAfp0-g5Higih5JBCoTC4YUUIjyddmGj4AAlY1wHHckWOnW-LD-A3wI3uMHw61dABMcDQaDgAEYAAy2vGEywlCDwU2uZgJglijpZm6EgDSnzzlLgAEVUwoSzyAFIpNxCikinYEPYHWVweWEeFKsr7KHLfUgLwAKxgfGYiiCOD\u002BmuAyzVKEE1cWMREIQXMGCAHEtKKXs73AQABQASld1ZRAG04LCYFAqqLc4zuSjInAcB-4uHIzHY3BeFvGcHzgZNaXCS88TvEC6z4BsX1fa5oKqCsYCrBDEOQuAiyaOAAF1G1uShEEYGwPy6fRtVka1UXRA0YgKegvFcToIUxUEiiqSjDzcJEEJFABJZgAHIulkYB2S1DVVRARw4E9ajOU8DkJVbKV2yWOVcHwLo3iceJvm9WJcLAGJ9D4lF7ToqkEVdOAAG9ZixTgnLsABueTjRcni4AAX0IkUHjI8S2AgJYKLgFxFm1XUCD\u002BOESigP1gyU1xkoFOCLJuWB7AkaAoC2ccPDdJkr0Jd9gVBNKbxJQx-g81l2U5DyaTpAgPJmPkBQIPCAJASC3yCFoXTSni0F3Zh9ygHiT3PXgBqZLDHPY5hzkq5gPJ484Aw8XzmQIsh\u002BOIoKuhgAAPNkB0YrB-BQX1KOEmzrWEhJR3HexTAhRYpSaLLrhyuA9HeAAFaFYSaJ6qmPPgXMh88SopAGdpmZgfuaBHX2iZhUgKNAfI\u002BRwFsJJ94EUAA\u002BOAACIScponsLhcmqZwxpaYwplCVQ6ZGcpzmsFZxDS1gjxuaF-mBaTFN4HiRnvrhLBqwB9aUbRi82YpLGcb4NAVrgAnGDp1r6Tgbm\u002BFpekxcQlkcDZfAlO5sBraaggLdfQlOv5VjuYILrOhd7lCVqu6um5pw6ud6tkdRuE4AAaipoNKdjwGsWV4tDpRQLSNOi7gCun4Mwol5kqtVLikhMG4Qy3iEwB-OfSmyHZtV7l3xLr9ynywq4L6ha6\u002BYCR4kpgBSZ24GPIG3lBi0IdskvT0IgGwCNN4AHlNFFDlgZ\u002B5hIbPZumSRzi7M0N5ZgWJZgDxzj6DPas8peLveKvANEQAOXO5hj3vgqirQAAZBQjRHCnl6tWfEFNx6MBBhXGeNEyYUz7gPKmI9Kbz0OgmJe\u002BhV7r03tvXeaCUSYOwTADeYAt4ZnwRg5ea8SG4IoQiW\u002B6DDpAA\u0026html=DwCwLgtgNgfAsAKAAQqaApgQwCb2ag4CdMTJcMABwFp0BHAVwEsA3AXgCIBhAewDsw6AdQAqAT0roOSAMb9BAzoIAeYAPThoAbhkhMAJwDOJNgzAAzagA4OeQhqy5EhAEY9sYu6mBq3HvD6asEA\u0026css=Q\u0022\u003E\u003C/iframe\u003E\r\n\r\n\u003C/details\u003E\r\n\r\n\u003Cbr\u003E\r\n\r\nTarget runtime is JavaScript! _All code execution will be done on a JavaScript level_. Fable output can only be executed in the Browser.\r\n\r\n## Fable Example\r\n\r\nThe Fable application with the final code can be found in the root directory of the [CSBlog](https://github.com/CSBiology/CSBlog) repository.\r\n\r\n- Download \u0060How2Fable.zip\u0060 (if you download the whole repo, you will need to move the zip out of it, or it will lead to depedency issues and it will not run)\r\n- Unzip it \r\n- Open powershell/commandline in the unzipped \u0060How2Fable\u0060 folder.\r\n- \u0060npm install\u0060\r\n- \u0060npm start\u0060\r\n- open browser at \u0060localhost:8080\u0060\r\n\r\nAll further examples are based on the standard Fable template, which you can install as described [here](https://fable.io/docs/2-steps/your-first-fable-project.html).\r\n\r\n### Fable Template\r\n\r\nShort summary:\r\n\r\n- \u0060dotnet new --install Fable.Template\u0060 \u0026#10142; install newest Fable template.\r\n- \u0060dotnet new fable\u0060 \u0026#10142; create new Fable template in open folder.\r\n- \u0060npm install\u0060 \u0026#10142; install all JS dependencies.\r\n- \u0060npm start\u0060 \u0026#10142; install all .NET dependencies and start local webpack server with fable output.\r\n\r\nYou can find the example project in the CSBlogpost repository (*How2Fable*-Folder).\r\n\r\nFirst to the important elements in the fable folder:\r\n\r\n- \u0060package.json\u0060\r\n    - \u0060scripts\u0060 defines for example \u0060npm start\u0060 as \u0060dotnet fable watch src --run webpack-dev-server\u0060\r\n    -  \u0060devDependencies\u0060 reference of all JS dependencies.\r\n- \u0060webpack.config.js\u0060 all settings for webapplication. For exmaple, determines localhost port.\r\n- \u0060public\\index.html\u0060 the base [html](https://www.w3schools.com/html/default.asp) page displayed in browser.\r\n- \u0060public\\bundle.js\u0060 all Fable output bundled together.\r\n- \u0060src\u0060, this folder contains the F# project, which will be compiled to JS.\r\n    - Can use [paket](https://fsprojects.github.io/Paket/) or nuget references in \u0060\u0060.fsproj\u0060\u0060 file for dependencies.\r\n    - Can consist of multiple \u0060\u0060.fs\u0060\u0060 files.\r\n\r\n### Fable REPL code\r\n\r\nIn the next step I added the code from the Fable REPL above to the Fable template project and adjusted the button for it.\r\nThis will result in a button (which can be found in the \u0060\u0060index.html\u0060\u0060), which displays on-click one drawn card.\r\n\r\n\u003Cdetails\u003E\r\n\u003Csummary\u003Eindex.html code\u003C/summary\u003E\r\n\r\n\u0060\u0060\u0060html\r\n\u003C!--index.html--\u003E\r\n\u003Cbody\u003E\r\n    \u003Cp\u003EFable is running\u003C/p\u003E\r\n    \u003Cp\u003EYou can click on this button:\u003C/p\u003E\r\n    \u003C!--This is our button--\u003E\r\n    \u003Cbutton class=\u0022my-button\u0022\u003EClick me\u003C/button\u003E\r\n    \u003Cscript src=\u0022bundle.js\u0022\u003E\u003C/script\u003E\r\n\u003C/body\u003E\r\n\u0060\u0060\u0060\r\n\u003C/details\u003E\r\n\r\n\u003Cdetails\u003E\r\n\u003Csummary\u003EApp.fs code\u003C/summary\u003E\r\n\r\n\u0060\u0060\u0060fsharp\r\n/// App.fs\r\n/// \r\nmodule Cards =\r\n\r\n    /// The following represents the suit of a playing card.\r\n    type Suit =\r\n        | Hearts\r\n        | Clubs\r\n        | Diamonds\r\n        | Spades\r\n\r\n    /// A Discriminated Union can also be used to represent the rank of a playing card.\r\n    type Rank =\r\n        /// Represents the rank of cards 2 .. 10\r\n        | Value of int\r\n        | Ace\r\n        | King\r\n        | Queen\r\n        | Jack\r\n\r\n        /// Discriminated Unions can also implement object-oriented members.\r\n        static member GetAllRanks() =\r\n            [ yield Ace\r\n              for i in 2 .. 10 do yield Value i\r\n              yield Jack\r\n              yield Queen\r\n              yield King ]\r\n\r\n    /// This is a record type that combines a Suit and a Rank.\r\n    /// It\u0027s common to use both Records and Discriminated Unions when representing data.\r\n    type Card = { Suit: Suit; Rank: Rank }\r\n\r\n    /// This computes a list representing all the cards in the deck.\r\n    let fullDeck =\r\n        [| for suit in [ Hearts; Diamonds; Clubs; Spades] do\r\n              for rank in Rank.GetAllRanks() do\r\n                  yield { Suit=suit; Rank=rank } |]\r\n\r\n    /// This example converts a \u0027Card\u0027 object to a string.\r\n    let showPlayingCard (c: Card) =\r\n        let rankString =\r\n            match c.Rank with\r\n            | Ace -\u003E \u0022Ace\u0022\r\n            | King -\u003E \u0022King\u0022\r\n            | Queen -\u003E \u0022Queen\u0022\r\n            | Jack -\u003E \u0022Jack\u0022\r\n            | Value n -\u003E string n\r\n        let suitString =\r\n            match c.Suit with\r\n            | Clubs -\u003E \u0022clubs\u0022\r\n            | Diamonds -\u003E \u0022diamonds\u0022\r\n            | Spades -\u003E \u0022spades\u0022\r\n            | Hearts -\u003E \u0022hearts\u0022\r\n        rankString  \u002B \u0022 of \u0022 \u002B suitString\r\n\r\n    /// This example prints all the cards in a playing deck.\r\n    let printAllCards() =\r\n        for card in fullDeck do\r\n            printfn \u0022%s\u0022 (showPlayingCard card)\r\n\r\n    let drawOneAndPrintCard() =\r\n        let rand = new System.Random()\r\n        fullDeck.[rand.Next(fullDeck.Length)] \r\n        |\u003E (showPlayingCard)\r\n\r\n// Mutable variable to count the number of times we clicked the button\r\nlet mutable drawnCard = \u0022\u0022\r\n\r\n// Get a reference to our button (in file: index.html) and cast the Element to an HTMLButtonElement.\r\n/// The last step is necessary as the compiler does otherwise not understand which type the html element has.\r\nlet myButton = document.querySelector(\u0022.my-button\u0022) :?\u003E Browser.Types.HTMLButtonElement\r\n\r\n// Register our listener\r\nmyButton.onclick \u003C- fun _ -\u003E\r\n    drawnCard \u003C- Cards.drawOneAndPrintCard()\r\n    myButton.innerText \u003C- sprintf \u0022You pulled: %s \u0022 drawnCard\r\n\u0060\u0060\u0060\r\n\r\n\u003C/details\u003E\r\n\r\nThe example will at this point, and after clicking the button, look like this:\r\n\r\n![Image of Fable with the code implemented](../img/How2Fable_example1.png)\r\n\r\n## FSharp to JS\r\n\r\nHow can Fable translate our F# code to JS? Because most functions of the core F# libraries were redone in JS and Fable downloads these functions to \u0060\u0060src\\.fable\u0060\u0060.\r\nThese are then used to compile the F# source files into their JS counterparts. After \u0060\u0060npm start\u0060\u0060, Fable will create \u0060\u0060.fs.js\u0060\u0060 (default) files from all F# source files.\r\nFor example \u0060\u0060App.fs\u0060\u0060  \u0026#10142; \u0060\u0060App.fs.js\u0060\u0060. If we look into these, we can see that the modules are imported from the \u0060\u0060.fable\u0060\u0060 folder and used to translate our code.\r\nThis translated code will be used for the webpack app.\r\n\r\nTo further showcase this, I created a new source file \u0060SearchMe.fs\u0060 with just one binding and call this binding from the App.fs file.\r\nThis is necessary, as \u0060App.fs\u0060 is defined as our app entry in the \u0060webpack.config.js\u0060 and Fable will only compile referenced F# code to JS, to minimize bloat.\r\n\r\n\u0060\u0060\u0060fsharp\r\n/// SearchMe.fs\r\n///\r\nmodule SearchMe\r\n\r\nlet iAmAVeryLongAndEasilySearchableName = \u0022Hello World\u0022\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060fsharp\r\n/// App.fs\r\n///\r\nprintfn $\u0022{SearchMe.iAmAVeryLongAndEasilySearchableName}\u0022\r\n\u0060\u0060\u0060\r\n\r\n\u0060npm run build\u0060 will bundle all Fable-compiled JS files into \u0060public\\bundle.js\u0060. This file will contain imports from \u0060./src/.fable/\u0060, \r\nbut also one for each F# source file. If we search it for \u0060iAmAVeryLongAndEasilySearchableName\u0060 or \u0060drawOneAndPrintCard\u0060 we will find the respective JS code.\r\n\r\n\u003Cbr\u003E\r\n\r\nBecause Fable can only compile code patterns and the functions from the modules in \u0060\u0060src\\.fable\u0060\u0060 it is **not** possible to compile any F# library with Fable out of the box.\r\n\r\nIf we add \u0060\u003CPackageReference Include=\u0022FSharp.Stats\u0022 Version=\u00220.4.3\u0022 /\u003E\u0060 to \u0060App.fsproj\u0060 it will return an error.\r\n\r\n\u0060\u0060\u0060fsharp\r\n/// App.fs\r\n///\r\nopen FSharp.Stats\r\n\r\n// Example from https://fslab.org/FSharp.Stats/BasicStats.html\r\nlet mean1 = \r\n    [10; 2; 19; 24; 6; 23; 47; 24; 54; 77;]\r\n    |\u003E Seq.meanBy float\r\n\r\nprintfn $\u0022{mean1}\u0022\r\n\u0060\u0060\u0060\r\n\r\nError in powershell/cmd.\r\n\u0060\u0060\u0060powershell\r\nF# compilation finished in 59ms\r\nC:/Users/User/source/repos/How2Fable/src/App.fs(70,13): (70,18) error FSHARP: The namespace \u0027Stats\u0027 is not defined. (code 39)\r\nC:/Users/User/source/repos/How2Fable/src/App.fs(74,12): (74,18) error FSHARP: The value, constructor, namespace or type \u0027meanBy\u0027 is not defined. Maybe you want one of the following:\r\n   maxBy\r\n   minBy\r\n   maxBy\r\n   minBy (code 39)\r\nWatching src\r\n\u0060\u0060\u0060\r\n\r\nFable has no idea about the \u0060Seq.meanBy\u0060 function and cannot translate it to JS. For a list of Fable compatible libraries you can look \r\n[here](https://fable.io/docs/dotnet/compatibility.html) for F# Core libraries and [here](https://fable.io/resources.html#Libraries) for community ressources.\r\n\r\nIt is also **possible to make F# libraries Fable compatible** as described [here](https://fable.io/docs/your-fable-project/author-a-fable-library.html). \r\nThis was for example done for the [ISADotNet library](https://github.com/nfdi4plants/ISADotNet/blob/developer/src/ISADotnet/ISADotNet.fsproj#L65) with a \r\nconditional trigger, to publish two nuget package versions. One with and one without Fable compatibility.\r\n\r\n\r\n\u003Cdetails\u003E\r\n\u003Csummary\u003EApp.fsproj code\u003C/summary\u003E\r\n\u0060\u0060\u0060xml\r\n\u003C!--App.fsproj--\u003E\r\n\u003CItemGroup Condition=\u0022 \u0027$(PackageId)\u0027 == \u0027ISADotNet.Fable\u0027 \u0022\u003E\r\n  \u003CContent Include=\u0022*.fsproj; **\\*.fs; **\\*.fsi\u0022 PackagePath=\u0022fable\\\u0022 /\u003E\r\n\u003C/ItemGroup\u003E\r\n\u0060\u0060\u0060\r\n\u003C/details\u003E\r\n\r\n\r\n\u003Cdetails\u003E\r\n\u003Csummary\u003Ebuild.fsx code\u003C/summary\u003E\r\n\r\nThis code is a modified version of the build target from the [libary development knowledgebase article](https://github.com/CSBiology/KnowledgeBase/blob/main/knowledgebase/devops/library-development/full-guide.md#packing-a-nuget-package).\r\n\r\n\u0060\u0060\u0060fsharp\r\n/// build.fsx\r\n///\r\nlet pack = BuildTask.create \u0022Pack\u0022 [clean; build; runTests; copyBinaries] {\r\n    if promptYesNo (sprintf \u0022creating stable package with version %s OK?\u0022 stableVersionTag ) \r\n        then\r\n            !! \u0022src/**/*.*proj\u0022\r\n            |\u003E Seq.iter (Fake.DotNet.DotNet.pack (fun p -\u003E\r\n                let msBuildParams =\r\n                    {p.MSBuildParams with \r\n                        Properties = ([\r\n                            \u0022Version\u0022,stableVersionTag\r\n                            \u0022PackageReleaseNotes\u0022,  (release.Notes |\u003E List.map replaceCommitLink |\u003E String.concat \u0022\\r\\n\u0022)\r\n                        ] @ p.MSBuildParams.Properties)\r\n                    }\r\n                {\r\n                    p with \r\n                        MSBuildParams = msBuildParams\r\n                        OutputPath = Some pkgDir\r\n                }\r\n            ))\r\n            /// This is used to create ISADotNet.Fable with the Fable subfolder as explained here:\r\n            /// https://fable.io/docs/your-fable-project/author-a-fable-library.html\r\n            \u0022src/ISADotNet/ISADotNet.fsproj\u0022\r\n            |\u003E Fake.DotNet.DotNet.pack (fun p -\u003E\r\n                let msBuildParams =\r\n                    {p.MSBuildParams with \r\n                        Properties = ([\r\n                            \u0022PackageId\u0022, \u0022ISADotNet.Fable\u0022\r\n                            \u0022Version\u0022,stableVersionTag\r\n                            \u0022Description\u0022,\u0022Fable compliant release for the ISA compliant experimental metadata toolkit in F#. Additionally to the compiled library, it is shipped with the uncompiled code.\u0022\r\n                            \u0022PackageTags\u0022,\u0022F# FSharp dotnet .Net bioinformatics biology datascience metadata investigation study assay ISA Json Fable\u0022\r\n                            \u0022PackageReleaseNotes\u0022,  (release.Notes |\u003E List.map replaceCommitLink |\u003E String.concat \u0022\\r\\n\u0022)\r\n                        ] @ p.MSBuildParams.Properties)\r\n                    }\r\n                let test = p\r\n                {\r\n                    p with \r\n                        MSBuildParams = msBuildParams\r\n                        OutputPath = Some pkgDir\r\n                }\r\n            )\r\n    else failwith \u0022aborted\u0022\r\n}\r\n\r\n\u0060\u0060\u0060\r\n\u003C/details\u003E\r\n\r\n*(ISADotNet was changed and is at the time of writing not Fable compatible, because of the JSON parser library.)*\r\n\r\n## JS in FSharp\r\n\r\nSome of the following text is based on an explanation from the awesome guys at [@compositionalit](https://twitter.com/compositionalit)!\r\n\r\nOne of the big advantages of Fable is not only that F# code becomes accessible with JavaScript, but also that one can use JavaScript libraries in F#.\r\n\r\nThe javascript library that we\u0027ll be interacting with is [shuffle](https://www.npmjs.com/package/shuffle), because why should we implement a all those cards functions if they already exist ..\r\n\r\n### Installing the shuffle npm package\r\n\r\n1. Install the \u0060shuffle\u0060 package using \u0060npm\u0060 or \u0060yarn\u0060\r\n\r\n\u0060\u0060\u0060powershell\r\nnpm install shuffle\r\n\u0060\u0060\u0060\r\n\r\n### Dynamic casting\r\n\r\n\u0060\u0060\u0060fsharp\r\n/// App.fs\r\n///\r\nopen Fable.Core.JsInterop\r\n\r\nlet shuffle: obj = importDefault \u0022shuffle\u0022\r\n\r\nconsole.log(shuffle)\r\n\u0060\u0060\u0060\r\n\r\n\u003E For more information on import statements in fable visit the [SAFE documentation](https://safe-stack.github.io/docs/recipes/javascript/import-js-module/) or the [offical Fable docs](https://fable.io/docs/).\r\n\r\n1. To check that the package has been brought in add \u0060console.log(shuffle)\u0060 within the \u0060App.fs\u0060 file\r\n\r\n2. Open the browsers console window (Shift \u002B \u2318 \u002B J (on macOS) or Shift \u002B CTRL \u002B J (on Windows/Linux)) and you should see something like:\r\n\r\n\u0060\u0060\u0060javascript\r\n{ Object\r\n    playingCards: \u0192 ()\r\n    shuffle: \u0192 (options)\r\n    [[Prototype]]: Object }\r\n\u0060\u0060\u0060\r\n\r\nIf you\u0027ve done something wrong such as mispelling the import you may see:\r\n\r\n\u0060\u0060\u0060javascript\r\nclient:159 ./src/App.fs.js\r\nModule not found: Error: Can\u0027t resolve \u0027shufle\u0027 in \u0027C:\\Users\\User\\source\\repos\\How2Fable\\src\u0027\r\n\u0060\u0060\u0060\r\n\r\n### Use dynamic casting to access members.\r\n\r\nDynamic casting relies on your understanding of the code. The \u0060?\u0060 operator allows us to access any members of our JsInterop elements.\r\n\r\nThe following is taken from the official documentation. We want to access those functions with the \u0060?\u0060 operator.\r\n\r\n\u0060\u0060\u0060javascript\r\n// shuffle documentation in JavaScript\r\nvar Shuffle = require(\u0027shuffle\u0027);\r\nvar deck = Shuffle.shuffle();\r\nvar card = deck.draw();\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060fsharp\r\n// Dynamic casting in F# \r\nlet shuffle: obj = importDefault \u0022shuffle\u0022\r\nlet deck : obj = shuffle?shuffle()\r\nlet card : obj = deck?draw()\r\nconsole.log(card)\r\n\u0060\u0060\u0060\r\n\r\nWe check our console and see that it worked and we got a random card consisting of 3 values: suit, description and sort.\r\nIn addition a \u0060card\u0060 has two more members \u0060toShortDisplayString\u0060 and \u0060toString\u0060. Which we can access in the same way.\r\n\r\n\u0060\u0060\u0060javascript\r\n// console.log(card)\r\n\r\nmodule.exports {suit: \u0027Spade\u0027, description: \u0027Ten\u0027, sort: 10, toString: \u0192, toShortDisplayString: \u0192}\r\ndescription: \u0022Ten\u0022\r\nsort: 10\r\nsuit: \u0022Spade\u0022\r\ntoShortDisplayString: \u0192 ()\r\ntoString: \u0192 ()\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060fsharp\r\n// F#\r\nconsole.log(card?toShortDisplayString())\r\nconsole.log(card?toString())\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060\r\n10S\r\nTen of Spades\r\n\u0060\u0060\u0060\r\n\r\nWe implement our dynamic casting functions for a button, by duplicating the button functionality with \u0060myButton2\u0060.\r\n\r\n\r\n\u003Cdetails\u003E\r\n\u003Csummary\u003EmyButton2\u003C/summary\u003E\r\n\r\n\u0060\u0060\u0060html\r\n\u003C!--index.html--\u003E\r\n\u003Cbody\u003E\r\n    \u003Cp\u003EFable is running\u003C/p\u003E\r\n    \u003Cp\u003EYou can click on this button:\u003C/p\u003E\r\n    \u003Cbutton class=\u0022my-button\u0022\u003EClick me\u003C/button\u003E\r\n    \u003C!--This is our new button--\u003E\r\n    \u003Cbutton class=\u0022my-button2\u0022\u003EClick me\u003C/button\u003E\r\n    \u003Cscript src=\u0022bundle.js\u0022\u003E\u003C/script\u003E\r\n\u003C/body\u003E\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060fsharp\r\n/// App.fs\r\n///\r\nopen Fable.Core.JsInterop\r\n\r\nlet mutable drawnCard2 = \u0022\u0022\r\n\r\nlet myButton2 = document.querySelector(\u0022.my-button2\u0022) :?\u003E Browser.Types.HTMLButtonElement\r\nmyButton2.onclick \u003C- fun _ -\u003E\r\n    drawnCard2 \u003C- JsInteropDynamicCasting.deck?drawRandom()?toString()\r\n    myButton2.innerText \u003C- sprintf \u0022You pulled: %s \u0022 drawnCard2\r\n\u0060\u0060\u0060\r\n\r\n\u003C/details\u003E\r\n\r\nAnd it works! \uD83C\uDF89\r\n\r\n![Fable example for dynamic casting button](../img/How2Fable_example2.png)\r\n\r\n### Setting up an interface\r\n\r\nRather than unsafely accessing the \u0060shuffle\u0060 it would be better to use an interface \r\nso that we can use the normal \u0060.\u0060 notation to call methods on \u0060shuffle\u0060.\r\n\r\nDeclare an interface type called \u0060Shuffle\u0060. This interface will have to be declared before:\r\n\r\n\u0060\u0060\u0060fsharp\r\nlet Shuffle: obj = importDefault \u0022shuffle\u0022\r\n\u0060\u0060\u0060\r\n\r\nThe interface will need an \u0060\u0060abstract\u0060\u0060 member called \u0060shuffle\u0060 that is a function of type \u0060unit -\u003E obj\u0060.\r\n\r\n\u0060\u0060\u0060fsharp\r\ntype Shuffle =\r\n    abstract member shuffle: unit -\u003E obj\r\n\u0060\u0060\u0060\r\n\r\nUpdate the \u0060shuffle\u0060 import to use the new type \u0060Shuffle\u0060 rather than \u0060obj\u0060.\r\n\r\n\u0060\u0060\u0060diff\r\n--  let Shuffle: obj        = importDefault \u0022shuffle\u0022\r\n\u002B\u002B  let Shuffle: Shuffle    = importDefault \u0022shuffle\u0022  \r\n\u0060\u0060\u0060\r\n\r\nIn the end you can write Fable bindings for all functions of the npm library which could look like the following:\r\n\r\n\u0060\u0060\u0060fsharp\r\nmodule JsInteropInterface =\r\n\r\n    open Fable.Core.JsInterop   \r\n\r\n    type Cards = \r\n        abstract member suit: string with get, set\r\n        abstract member description: string with get, set\r\n        abstract member sort: int with get, set\r\n        abstract member toString: unit -\u003E string\r\n        abstract member toShortDisplayString: unit -\u003E string\r\n\r\n    type Deck =\r\n        abstract member length : int\r\n        abstract member cards: Cards []\r\n        abstract member draw : int -\u003E Cards\r\n        abstract member draw : unit -\u003E Cards\r\n        abstract member drawRandom : int -\u003E Cards\r\n        abstract member drawRandom : unit -\u003E Cards\r\n        abstract member putOnTopOfDeck: Cards -\u003E unit\r\n        abstract member putOnTopOfDeck: Cards [] -\u003E unit\r\n        abstract member putOnBottomOfDeck: Cards -\u003E unit\r\n        abstract member putOnBottomOfDeck: Cards [] -\u003E unit\r\n\r\n    type Shuffle =\r\n        abstract member shuffle: unit -\u003E Deck\r\n        abstract member shuffle: \u0027a -\u003E Deck\r\n        abstract member playingCards: unit -\u003E obj\r\n\r\n    let Shuffle: Shuffle = importAll \u0022shuffle\u0022  \r\n\u0060\u0060\u0060\r\n\r\nWith this done we can update our \u0060myButton2\u0060 to use our typesafe bindings. While we are at it, we change the mutable to an \u0060option\u0060 and \r\nstop initializing a new deck everytime we press the button. \r\n\r\n\u0060\u0060\u0060fsharp\r\nlet mutable drawnCard2 : Cards option = None\r\nlet deck = Shuffle.shuffle()\r\n\r\nlet myButton2 = document.querySelector(\u0022.my-button2\u0022) :?\u003E Browser.Types.HTMLButtonElement\r\nmyButton2.onclick \u003C- fun _ -\u003E\r\n    drawnCard2 \u003C- deck.draw() |\u003E Some\r\n    console.log deck.length\r\n    myButton2.innerText \u003C- sprintf \u0022You pulled: %s \u0022 (drawnCard2.Value.toString())\r\n\u0060\u0060\u0060\r\n\r\n### Typesafety?\r\n\r\nJavaScript is not type safe and while we are writing F# we use the JS runtime to execute our code. This is best shown in the following example.\r\nThe implemented \u0060deck.putOnTopOfDeck\u0060 if of type \u0060Cards -\u003E unit\u0060 or \u0060Cards [] -\u003E unit\u0060. Sadly, the author of \u0060shuffle\u0060 did not intend us to add more standard cards to the deck \r\nand does **not** expose the create function for us to use in Fable. Altough there are some options on how to circumvent this.\r\n\r\n#### Goal\r\n\r\nAdd a button which puts a specific card on top of the deck with \u0060deck.putOnTopOfDeck\u0060.\r\n\r\n\u003Cdetails\u003E\r\n\u003Csummary\u003EButton html\u003C/summary\u003E\r\n\r\n\u0060\u0060\u0060html\r\n\u003C!--index.html--\u003E\r\n\u003Cbody\u003E\r\n    \u003Cp\u003EFable is running\u003C/p\u003E\r\n    \u003Cp\u003EYou can click on this button:\u003C/p\u003E\r\n    \u003C!--This are our buttons--\u003E\r\n    \u003Cbutton class=\u0022my-button\u0022\u003EClick me\u003C/button\u003E\r\n    \u003Cbutton class=\u0022my-button2\u0022\u003EClick me\u003C/button\u003E\r\n    \u003Cbutton class=\u0022my-button3\u0022\u003EIs this allowed?\u003C/button\u003E\r\n    \u003Cscript src=\u0022bundle.js\u0022\u003E\u003C/script\u003E\r\n\u003C/body\u003E\r\n\u0060\u0060\u0060\r\n\r\n\u003C/details\u003E\r\n\r\nUse \u0060deck.putOnTopOfDeck\u0060 (with the array parameter overload, as the single card version seems to be buggy and does **not** work), but we still need the new card.\r\n\r\n\u0060\u0060\u0060fsharp\r\nlet myButton3 = document.querySelector(\u0022.my-button3\u0022) :?\u003E Browser.Types.HTMLButtonElement\r\nmyButton3.onclick \u003C- fun _ -\u003E\r\n    deck.putOnTopOfDeck [||]\r\n    console.log deck.length\r\n\u0060\u0060\u0060\r\n\r\n#### Option 1: Search and explicit import.\r\n\r\nIt is possible to search through the JS library (\u0060\u0022\\node_modules\\shuffle\\src\\playingCard.js\u0022\u0060) to find the \u0060card\u0060 creation and definition logic.\r\nAnd even though it is not exported to the main \u0060index.js\u0060 we can access the exact file and use it to create \u0060Cards\u0060.\r\n\r\n\u0060\u0060\u0060fsharp\r\nlet playingCard : obj = importDefault (\u0022../node_modules/shuffle/src/playingCard.js\u0022)\r\n// createNew is a Fable function to simulate the JS \u0060new\u0060 operator\r\nlet newCard = createNew playingCard (\u0022Heart\u0022, \u0022Five\u0022, 5) :?\u003E Cards\r\n\u0060\u0060\u0060\r\n\r\nThis is only necessary because the author did not intend this behavior, instead we are meant to write our own card type, as shown in the following example from the docs.\r\n\r\n\u0060\u0060\u0060javascript\r\n// shuffle docs in JavaScript\r\nvar Shuffle = require(\u0027shuffle\u0027);\r\nvar goFish = [{color: \u0027red\u0027, number: 1}, {color: \u0027blue\u0027, number: 2}, ...];\r\nvar deck = Shuffle.shuffle({deck: goFish});\r\n\u0060\u0060\u0060\r\n\r\nBut more on that later.\r\n\r\n#### Option 2: Anonymous records and createObject\r\n\r\nWe could imitate the JS \u0060card\u0060 object with different options. Fable translates F# anonymous records to JS objects.\r\n\r\n\u0060\u0060\u0060fsharp\r\nlet newCard : Cards = !!{|suit = \u0022Heart\u0022; description = \u0022Five\u0022; sort = 5|}\r\n\u0060\u0060\u0060\r\n\r\nAlthough \u0060deck.putOnTopOfDeck\u0060 is of type \u0060Cards [] -\u003E unit\u0060 we can handle the anonymous record as such, because of the \u0060!!\u0060 operator. \r\nIt more or less tells the dotnet compiler to not worry about typesafety for whatever follows it. Therefore we can declare \u0060newCard : Cards\u0060.\r\n\r\nIf we just add this card to the input array we will get an error, because we try to call the \u0060toString()\u0060 method on the drawn cards and our anonymous record type has no such member.\r\n_But_ we can replace \u0060drawnCard2.Value.toString()\u0060 with for example \u0060drawnCard2.Value.suit\u0060 and it will work just fine! \uD83C\uDF89\r\nThe Javascript compiler will try to access the \u0060suit\u0060 member and both \u0060Cards\u0060 as well as our anonymous record have this member and we can change the print command accordingly.\r\n\r\nFable provides us with even more alternatives, which work just like the anonymous record type as they will **not** contain the \u0060toString()\u0060 method.\r\n\r\n\u003Cdetails\u003E\r\n\u003Csummary\u003EAlternative 1\u003C/summary\u003E\r\n\r\n\u0060\u0060\u0060fsharp\r\nlet newCard = createEmpty\u003CCards\u003E\r\nnewCard.suit \u003C- \u0022Heart\u0022\r\nnewCard.description \u003C- \u0022Five\u0022\r\nnewCard.sort \u003C- 5\r\n\u0060\u0060\u0060\r\n\u003C/details\u003E\r\n\r\n\r\n\u003Cdetails\u003E\r\n\u003Csummary\u003EAlternative 2\u003C/summary\u003E\r\n\r\n\u0060\u0060\u0060fsharp\r\nlet newCard = jsOptions\u003CCards\u003E(fun newCard -\u003E\r\n    newCard.suit \u003C- \u0022Heart\u0022\r\n    newCard.description \u003C- \u0022Five\u0022\r\n    newCard.sort \u003C- 5\r\n)\r\n\u0060\u0060\u0060\r\n\u003C/details\u003E\r\n\r\n\u003Cbr\u003E\r\n\r\n#### Option 3: F# Record type\r\n\r\nAs we just saw we can circumvent type safety quite easily and the author already intends us to write our own card type, so we will do exactly that. \u003Csub\u003E(Please do not cringe about the following joke)\u003C/sub\u003E\r\n\r\n\u0060\u0060\u0060fsharp\r\n/// App.fs\r\n///\r\n// https://fable.io/docs/communicate/fable-from-js.html\r\n[\u003CAttachMembers\u003E]\r\ntype MyCard = {\r\n    Name : string\r\n} with\r\n    static member create name = {Name = name}\r\n    member this.toString() =\r\n        match this.Name with\r\n        | \u0022Exodia\u0022 -\u003E $\u0022{this.Name} \uD83D\uDE31. That means you win!\u0022\r\n        | anythingElse -\u003E $\u0022{anythingElse}?? ..\u0022\r\n\u0060\u0060\u0060\r\n\r\nThis type is rather different to the \u0060Cards\u0060 type, except it also contains a \u0060.toString()\u0060 method. So we will tell \r\nthe typesafe dotnet compiler to not worry and will add our \u0022Joker\u0022 to the pile of poker cards.\r\nBecause the only time we interact with the card will be when we call the \u0060.toString()\u0060 method it will work without any problems.\r\n\r\n\u0060\u0060\u0060fsharp\r\nlet myButton3 = document.querySelector(\u0022.my-button3\u0022) :?\u003E Browser.Types.HTMLButtonElement\r\nmyButton3.onclick \u003C- fun _ -\u003E\r\n    let newCard = !!MyCard.create \u0022Exodia\u0022\r\n    deck.putOnTopOfDeck [|newCard|]\r\n    console.log deck.length\r\n\u0060\u0060\u0060\r\n\r\n![Fable example ignoring type safety button](../img/How2Fable_example3.png)\r\n\r\nThis is an extreme example on how JS and F# will interact through Fable. By ignoring the F# typesafety with \u0060!!\u0060 or \r\nusing dynamic casting we make our code error-prone. It would be better to write the bindings in a way to directly work with the intended card type, \r\nas all functions will work independently of the card type used.\r\n\r\nUsing existing JS libraries for Fable applications can safe a lot of time, so knowing how to use the \u2013 often \u2013 excellent work of other \r\nprogrammers is valuable know-how... and result in less time wasted recreating already existing libraries.\r\n\r\n## Further reading\r\n\r\n- [Official Fable docs](https://fable.io/docs/)\r\n- [Computational IT Blogs](https://www.compositional-it.com/news-blog/)\r\n\r\nBlogpost ressources\r\n\r\n- [Fable REPL](https://fable.io/repl/)\r\n- [Fable compatible F# Core libraries](https://fable.io/docs/dotnet/compatibility.html)\r\n- [Fable compatible community ressources](https://fable.io/resources.html#Libraries)\r\n- [Shuffle](https://www.npmjs.com/package/shuffle)\r\n- [SAFE stack](https://safe-stack.github.io/docs/intro/)\r\n"},{"uri":"/CSBlog/posts/3_sequence_features.html","title":"Modelling and visualizing sequence features with BioFSharp and Plotly.NET","content":"(**\n\n---\ntitle: Modelling and visualizing sequence features with BioFSharp and Plotly.NET\ncategory: Implementation\ncategoryindex: 3\nindex: 3\n---\n*)\n\n(***hide***)\n#r \u0022nuget: BioFSharp, 2.0.0-beta7\u0022\n#r \u0022nuget: BioFSharp.IO, 2.0.0-beta6\u0022\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022nuget: FSharp.Stats, 0.4.3\u0022\n\nopen BioFSharp\nopen System.IO\n\ntype SequenceFeature = {\n    Name: string\n    //zero-based\n    Start: int\n    //zero-based\n    End: int\n    Length: int\n    Abbreviation: char\n    Metadata: Map\u003Cstring,string\u003E\n    FeatureType: string\n} with\n    static member create \n        (\n            name: string,\n            featureStart: int,\n            featureEnd: int,\n            ?Abbreviation: char,\n            ?Metadata: Map\u003Cstring,string\u003E,\n            ?FeatureType: string\n        ) =\n            if featureStart \u003C 0 || featureEnd \u003C 0 || featureStart \u003E featureEnd then\n                failwith $\u0022invalid feature stretch ({featureStart},{featureEnd})\u0022\n            else\n                {\n                    Name            = name        \n                    Start           = featureStart\n                    End             = featureEnd  \n                    Length          = featureEnd - featureStart \u002B 1\n                    Abbreviation    = Abbreviation |\u003E Option.defaultValue \u0027 \u0027\n                    Metadata        = Metadata |\u003E Option.defaultValue (Map.ofList [])\n                    FeatureType     = FeatureType |\u003E Option.defaultValue \u0022\u0022\n                }\n\n    static member tryGetIntersection (feature1:SequenceFeature) (feature2:SequenceFeature) =\n        let s1,e1 = feature1.Start, feature1.End\n        let s2,e2 = feature2.Start, feature2.End\n        \n        if (s2 \u003E e1) || (s1 \u003E e2) then\n            None\n        else\n            Some ((max s1 s2), (min e1 e2))\n\ntype AnnotatedSequence\u003C\u0027T when \u0027T :\u003E IBioItem\u003E = \n    {\n        Tag: string\n        Sequence : seq\u003C\u0027T\u003E\n        Features: Map\u003Cstring,SequenceFeature list\u003E\n    } \n\nmodule AnnotatedSequence =\n    \n    let create tag sequence (featureMap: Map\u003Cstring,SequenceFeature list\u003E) =\n\n        let mutable hasInvalidFeatures = false\n        let mutable invalidFeatures: (string*(SequenceFeature*SequenceFeature)) list = []\n\n        let isOverlap (stretch1:int * int) (stretch2: int * int) =\n            let s1, e1 = stretch1\n            let s2, e2 = stretch2\n\n            (s1 \u003C= s2 \u0026\u0026 e1 \u003E= s2)\n            || (s1 \u003C= s2 \u0026\u0026 e1 \u003E= e2)\n            || (s1 \u003C= e2 \u0026\u0026 e1 \u003E= e2)\n            || (s1 \u003E= s2 \u0026\u0026 e1 \u003C= e2)\n\n        featureMap\n        |\u003E Map.iter (fun key features -\u003E\n            let rec loop (featureList:SequenceFeature list) =\n                match featureList with\n                | f::rest -\u003E \n                    for frest in rest do \n                        if isOverlap (f.Start, f.End) (frest.Start, frest.End) then \n                            hasInvalidFeatures \u003C- true\n                            invalidFeatures \u003C- (key,(f,frest))::invalidFeatures\n                    loop rest\n                | [] -\u003E ()\n            loop features\n        )\n        if hasInvalidFeatures then\n            failwith $\u0022\u0022\u0022At least one  sequence feature annotation collection contains overlapping annotations. This is not supported. Please annotate them as separate feature lists.\nOffending annotations: \n{invalidFeatures}\n\u0022\u0022\u0022         \n        else\n            {\n                Tag = tag\n                Sequence = sequence\n                Features= featureMap\n            }\n\n    let addFeatures (featureKey: string) (features: SequenceFeature list) (anns: AnnotatedSequence\u003C_\u003E) =\n        {\n            anns with\n                Features = \n                    if Map.containsKey featureKey anns.Features then\n                        anns.Features |\u003E Map.add featureKey (features @ anns.Features.[featureKey])\n                    else\n                        anns.Features |\u003E Map.add featureKey features\n                \n        }\n\n    let toStrings (anns: AnnotatedSequence\u003C_\u003E) =\n        let sequenceString = anns.Sequence |\u003E Seq.map (BioItem.symbol \u003E\u003E string) |\u003E String.concat \u0022\u0022\n        let emptyFormatString = [for i in 1 .. (Seq.length anns.Sequence) do yield \u0022 \u0022] |\u003E String.concat \u0022\u0022\n        let featureFormats =\n            anns.Features\n            |\u003E Map.map (fun key features -\u003E \n                features\n                |\u003E Seq.fold (fun (acc:string) (feature) -\u003E\n                    let featureStretch = [for _ in 1 .. feature.Length do yield (feature.Abbreviation |\u003E string)] |\u003E String.concat \u0022\u0022\n                    acc\n                        .Remove(feature.Start, feature.Length)\n                        .Insert(feature.Start, featureStretch)\n                ) emptyFormatString\n            )\n        sequenceString,featureFormats\n\n    let format (anns: AnnotatedSequence\u003C_\u003E) =\n        let sequenceString, featureStrings = anns |\u003E toStrings\n        let longestId = \n            [\u0022Sequence\u0022; yield! (featureStrings |\u003E Map.toList |\u003E List.map fst)] \n            |\u003E Seq.maxBy (fun x -\u003E x.Length)\n            |\u003E fun s -\u003E s.Length\n\n        let ids = \n            [\u0022Sequence\u0022; yield! (featureStrings |\u003E Map.toList |\u003E List.map fst)]\n            |\u003E List.map (fun s -\u003E s.PadRight(longestId\u002B4))\n        \n        let blocks = \n            [sequenceString; yield! (featureStrings |\u003E Map.toList |\u003E List.map snd)]\n            |\u003E List.mapi (fun index seqString -\u003E\n                let id = ids.[index]\n                let splits = \n                    seqString.ToCharArray() \n                    |\u003E Seq.map string\n                    |\u003E Seq.chunkBySize 60 \n                    |\u003E Seq.map (String.concat \u0022\u0022)\n\n                let innerSplits = \n                    splits |\u003E Seq.map (fun s -\u003E \n                        s.ToCharArray() \n                        |\u003E Seq.map string\n                        |\u003E Seq.chunkBySize 10 \n                        |\u003E Seq.map (String.concat \u0022\u0022)\n                )\n\n                innerSplits \n                |\u003E Seq.mapi (fun i strs -\u003E  \n                    let line = \n                        strs \n                        |\u003E Seq.fold (fun acc elem -\u003E sprintf \u0022%s %s\u0022 acc elem) \u0022\u0022 \n                    $\u0022{id} {(string (((i\u002B1)*60) - 60 \u002B 1)).PadLeft(10)}{line}\u0022 \n                )\n                |\u003E Array.ofSeq\n            )\n\n        [for i in 0 .. blocks.[0].Length-1 do\n            for b in blocks do yield b.[i]\n        ]\n        |\u003E String.concat System.Environment.NewLine\n        |\u003E fun s -\u003E $\u0022{System.Environment.NewLine}{s}{System.Environment.NewLine}\u0022\n\n(**\n# Modelling and visualizing sequence features with BioFSharp and Plotly.NET\n\n_[Kevin Schneider](https://github.com/kMutagene)_\n\n### Table of contents\n\n- [Assigning secondary structure for proteins based on .pdb files](#Assigning-secondary-structure-for-proteins-based-on-pdb-files)\n- [Comparing structural annotations](#Comparing-structural-annotations)\n- [Generalizing sequence features]()\n    - [Implementing the Sequence feature](#Implementing-the-Sequence-feature)\n    - [Implementing the Annotated Sequence](#Implementing-the-Annotated-Sequence)\n- [Visualizing sequence features with Plotly.NET](#Visualizing-sequence-features-with-Plotly-NET)\n    - [Plotting sequences with Plotly.NET](#Plotting-sequences-with-Plotly-NET)\n    - [A sequence feature view plot for AnnotatedSequence](#A-sequence-feature-view-plot-for-AnnotatedSequence)\n\n\n## Assigning secondary structure for proteins based on .pdb files\n\nI recently started to work with a lot of structural protein data with the aim of extracting features based on the proteins secondary structures.\n\nThis involved assigning secondary structures for \u0060.pdb\u0060 files, which is a file format that contains positional information about each atom in a polipeptide chain.\nAs in many bioinformatic fields, tried-and-tested algorithms for this are several decades old but seem to be still the gold standard. \nThe algorithm that pops up most is [**DSSP**](https://swift.cmbi.umcn.nl/gv/dssp/) (Dictionary of Protein Secondary Structure). You can clearly see the age in every ounce of that website.\n\nDSSP was originally used to assign all secondary structures for the [PDB (Protein Data bank)](https://www.rcsb.org/). I cannot find a source if that is still the case though. \n\u0060.pdb\u0060 files obtained from PDB usually already contain a section with the assigned structures, but this is not true for example for the output of alpha fold, which only predicts the raw atom positions without any structure assignment.\n\nUsing dssp is straight forward, it can be installed directly via apt on ubuntu, and there is a biocontainer available [here](https://biocontainers.pro/tools/dssp)\n\ndssp itself is also very easy to use. Once in the container, simply run\n\n\u0060\u0060\u0060bash\ndssp -i \u003C.pdb file\u003E -o \u003Cdssp file\u003E\n\u0060\u0060\u0060\n\nThe output format of DSSP is weird, but writing parsers is not too hard. It contains metadata sections indicated by the line start, which are not very interesting fort my purposes.\nThe structure assignments are contained in a fixed-column data format further down the file. \n\nHere is an example of how it looks like:\n\n\u0060\u0060\u0060no-highlight\n#  RESIDUE AA STRUCTURE BP1 BP2  ACC     N-H--\u003EO    O--\u003EH-N    N-H--\u003EO    O--\u003EH-N    TCO  KAPPA ALPHA  PHI   PSI    X-CA   Y-CA   Z-CA            CHAIN\n  1    1 A M              0   0  235      0, 0.0     4,-0.1     0, 0.0     0, 0.0   0.000 360.0 360.0 360.0  58.6   -7.4   17.5   38.1               \n  2    2 A Y     \u003E  \u002B     0   0  202      2,-0.1     4,-0.6     3,-0.1     0, 0.0   0.539 360.0  69.8-121.3  -9.6   -8.6   17.8   34.5               \n  3    3 A Y  H  \u003E S\u002B     0   0  209      1,-0.2     4,-1.1     2,-0.2     3,-0.3   0.865  91.2  58.3 -82.3 -33.1   -5.5   19.3   32.5               \n  4    4 A F  H  \u003E S\u002B     0   0  193      1,-0.2     4,-1.7     2,-0.2    -1,-0.2   0.861 101.0  56.5 -67.1 -33.2   -3.2   16.2   32.7               \n  5    5 A S  H  \u003E S\u002B     0   0   91      1,-0.2     4,-1.5     2,-0.2    -1,-0.2   0.835 104.5  51.5 -71.2 -31.9   -5.6   13.8   31.0               \n  6    6 A R  H  X S\u002B     0   0  204     -4,-0.6     4,-1.4    -3,-0.3    -1,-0.2   0.816 108.4  51.3 -75.1 -30.1   -6.0   16.0   27.8               \n  7    7 A V  H  X S\u002B     0   0   96     -4,-1.1     4,-1.8     2,-0.2    -2,-0.2   0.924 110.2  49.0 -72.1 -41.8   -2.2   16.3   27.3               \n  8    8 A A  H  X S\u002B     0   0   54     -4,-1.7     4,-1.9     1,-0.2    -2,-0.2   0.860 109.1  52.8 -65.7 -36.0   -1.8   12.5   27.5               \n  9    9 A A  H  X S\u002B     0   0   65     -4,-1.5     4,-1.7     2,-0.2    -1,-0.2   0.885 108.6  50.6 -67.1 -36.6   -4.6   11.9   25.0               \n 10   10 A R  H  X S\u002B     0   0  206     -4,-1.4     4,-1.6     2,-0.2    -2,-0.2   0.888 110.4  48.5 -68.7 -39.2   -2.9   14.3   22.5               \n 11   11 A T  H  X S\u002B     0   0   84     -4,-1.8     4,-1.6     2,-0.2    -2,-0.2   0.894 109.7  52.6 -70.1 -36.5    0.5   12.5   22.7               \netc.\n\u0060\u0060\u0060\n\nWriting a parser for that section was straight forward. I added it to [BioFSharp.IO]() if you are interested in using it yourself.\n\n## Comparing structural annotations\n\nWithout going into too much detail, one of the things I am interested in is how the structural assignments of DSSP relate to other structural annotations for it.\nAn example would be **intrinsically disordered stretches**, parts of the chain that do not have a structure, but this disorder is actually crucial for the proteins function.\n\nYou can read more about disorder in protein structures [here](https://en.wikipedia.org/wiki/Intrinsically_disordered_proteins). An awesome ressource for disorder annotations is [DisProt](https://disprot.org/). You can download its annotations in an easily usable tsv format (no custom parsing yay).\nWith these two annotations at hand, i started scripting with BioFSharp and Plotly.NET to get visual comparisons of both features (DSSP structure and disprot annotation).\n\nMy first attempts involved chunking the sequence and annotations by 60 and creating a annotated heatmap, assigning color based on the one character code of the structure. It achieved the goal, but was very hard to read, especially for large sequences.\nI wont even include the source code for this, because it obviously sucks:\n\n\u003Cbr\u003E\n\u003Chr\u003E\n\n![heatmap](/img/sequence_features_heatmap.png)\n\n_Fig1: My first pitiful attempt at visualizing sequence features_\n\u003Chr\u003E\n\u003Cbr\u003E\n\nAt this point, i thought i was pretty much near the goal of my project (i calculated some fancy metrics downstream from the features that do not belong in this post),\nand therefore content with the visualization. But as often happens in any kind of project - especially in academia - the scale of the project increased and i wanted to include more features in my calculations.\n\nOne was the secondary structure assigment of [Stride](http://webclu.bio.wzw.tum.de/stride/) - basically an improved version of DSSP. Also, i wanted to look at different disprot annotations individually.\nAt this point, a generic solution for both handling sequence features as well as their visualization was needed.\n\nStride is not as straight-forward to use as DSSP. I ended up creating my own docker container that builds it from [source](http://webclu.bio.wzw.tum.de/stride/install.html):\n\n\u0060\u0060\u0060dockerfile\nFROM biocontainers/biocontainers:vdebian-buster-backports_cv1\n\nUSER root\nRUN apt-get update \u0026\u0026 (apt-get install -t buster-backports -y gcc || apt-get install -y gcc) \u0026\u0026 (apt-get install -t buster-backports -y make || apt-get install -y make) \u0026\u0026 apt-get clean \u0026\u0026 apt-get purge\n\nWORKDIR /bin/stride\nCOPY ./stride.tar.gz /bin/stride\n\nENV DEBIAN_FRONTEND noninteractive\nRUN tar -zxf stride.tar.gz\nRUN make\nENV PATH=\u0022/bin/stride/:${PATH}\u0022\n\nWORKDIR /data\nUSER biodocker\n\u0060\u0060\u0060\n\n## Implementing the Sequence feature\n\nA sequence feature in its most basic form just need start and end index within the sequence. They are usually abbreviated by a one-character code in most visualizations, and DSSP as well as Stride use on-letter codes for their assignment. \nI added additional metadata such as the name, type, and length of the feature, as well as arbitrary metadata. The full implementation in BioFSharp can be seen [here]()\n\n\u0060\u0060\u0060\ntype SequenceFeature = \n    {\n        Name: string\n        //zero-based\n        Start: int\n        //zero-based\n        End: int\n        Length: int\n        Abbreviation: char\n        Metadata: Map\u003Cstring,string\u003E\n        FeatureType: string\n    }\n\n\u0060\u0060\u0060\n\n## Implementing the Annotated Sequence\n\nAn annotated sequence is a sequence which has feature annotations. I decided to model these as a Map of sequence features, where the key represents the feature type, and the list contains the individual feature stretches of that type.\nThe sequence can also be tagged with a string to give it an identifier:\n\n\u0060\u0060\u0060\ntype AnnotatedSequence\u003C\u0027T when \u0027T :\u003E IBioItem\u003E = \n    {\n        Tag: string\n        Sequence : seq\u003C\u0027T\u003E\n        Features: Map\u003Cstring,SequenceFeature list\u003E\n    } \n\n\u0060\u0060\u0060\n\nThe full implementation with all additional functions can be found in BioFSharp [here]()\n\nBased on this type, i first created a pretty printer in the fasta style to see if i was going in the right direction:\n\n*)\nopen BioFSharp\n\nlet testSeq = \n    AnnotatedSequence.create\n        \u0022Test\u0022\n        (\u0022ATGCTAGTGTCATGCTAGTGTCATGCTAGTGTCATGCTAGATGCTAGTGTCATGCTAGTGTCATGCTAGTGTCATGCTAGATGCTAGTGTCATGCTAGTGTCATGCTAGTGTCATGCTAGATGCTAGTGTCATGCTAGTGTCATGCTAGTGTCATGCTAG\u0022 |\u003E BioArray.ofNucleotideString)\n        (Map.ofList [\n            \u0022Feature1\u0022, [SequenceFeature.create(\u0022F1\u0022,0,10,\u0027A\u0027)]\n            \u0022Feature2\u0022, [SequenceFeature.create(\u0022F2\u0022,0,10,\u0027B\u0027); SequenceFeature.create(\u0022F2\u0022,100,120,\u0027B\u0027)]\n            \u0022Feature3\u0022, [SequenceFeature.create(\u0022F3\u0022,30,90,\u0027C\u0027)]\n\n        ])\n\nAnnotatedSequence.format testSeq\n(***include-it***)\n\n(**\nSo with this type modelling i was able to annotate a sequence with arbitrary features and visualize their positions. This text-based representation has the same problems as my heatmap approach though: it gets quite hard to read with increasing sequence length and feature count.\nStill, this is a nice pretty prionter for usage with \u0060fsi.AddPrinter\u0060.\n\n# Visualizing sequence features with Plotly.NET\n\nI took heavy inspiration from DisProt\u0027s sequence viewer, which displays feature lanes below the actual sequence as bars.\n\n## Plotting sequences with Plotly.NET\n\nTo plot a sequence of characters on a 2D plot, we can leverage Plotly.NETs \u0060Annotations\u0060. \nTo give the annotations points that can trigger hovertext, i added an invisible line trace behind them.\n*)\n#r \u0022nuget: Plotly.NET, 2.0.0-preview.16\u0022\n\nopen Plotly.NET\nopen Plotly.NET.LayoutObjects\n\nlet testSeqChart = \n    Chart.Line(\n        [for i in 0..3 -\u003E (i,1)], \n        MultiText=[\u0022A\u0022;\u0022T\u0022;\u0022G\u0022;\u0022C\u0022], \n        Opacity=0.0,\n        ShowLegend = false,\n        LineColor= Color.fromKeyword Black\n    )\n    |\u003E Chart.withAnnotations (\n        [\u0022A\u0022;\u0022T\u0022;\u0022G\u0022;\u0022C\u0022]\n        |\u003E Seq.mapi (fun x text -\u003E\n                Annotation.init(\n                    x,1,\n                    Text=(string text),\n                    ShowArrow=false,\n                    Font = Font.init(Size=16.)\n                )\n        )\n    )\n\n(**\n\u003Chr\u003E\n*)\n\n(***hide***)\ntestSeqChart |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n_Fig 2: A simple sequence plot using Plotly.NET\u0027s Annotations._\n\u003Chr\u003E\n\u003Cbr\u003E\n*)\n\n(**\nWith some additional styling, we can make this look pretty good already:\n\n- Remove the Y axis\n- Mirror the X Axis\n- Add spike lines per default (very usefull later when combining with the feature traces)\n\n*)\n\ntype Chart with\n    static member SequencePlot\n        (\n            annotationText: #seq\u003Cstring\u003E,\n            ?FontSize: float\n        ) =\n            let fontSize = defaultArg FontSize 16.\n\n            Chart.Line(\n                [for i in 0..((Seq.length annotationText) - 1) -\u003E (i,1)], \n                MultiText=annotationText, \n                Opacity=0.0,\n                ShowLegend = false,\n                LineColor= Color.fromKeyword Black\n            )\n            |\u003E Chart.withXAxis(\n                LinearAxis.init(\n                    Visible=true, \n                    ShowLine= true, \n                    ShowTickLabels = true, \n                    ShowSpikes= true, \n                    ZeroLine = false, \n                    Range= StyleParam.Range.MinMax(0.,60.), // as default, show the first 60 characters. Double click to zoom out.\n                    Title = Title.init(\u0022Sequence index (0-based)\u0022, Font=Font.init(Size=fontSize)),\n                    TickFont = Font.init(Size=fontSize),\n                    Ticks = StyleParam.TickOptions.Inside,\n                    Mirror = StyleParam.Mirror.AllTicks\n                )\n            )        \n            |\u003E Chart.withYAxis(\n                LinearAxis.init(Visible=false, ShowLine= false, ShowTickLabels = false, ShowGrid = false, ZeroLine=false)\n            )\n            |\u003E Chart.withAnnotations (\n                annotationText\n                |\u003E Seq.mapi (fun x text -\u003E\n                    Annotation.init(\n                        x,1,\n                        Text=(string text),\n                        ShowArrow=false,\n                        Font = Font.init(Size=fontSize)\n                    )\n                )\n            )\n\nlet seqPlot = \n    Chart.SequencePlot(testSeq.Sequence |\u003E Seq.map (BioItem.symbol \u003E\u003E string))\n    |\u003E Chart.withSize(1000)\n\n(**\n\u003Chr\u003E\n*)\n\n(***hide***)\nseqPlot |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n_Fig 3: A better styled version of the Sequence plot._\n\u003Chr\u003E\n\u003Cbr\u003E\n*)\n\n(**\n## A sequence feature view plot for AnnotatedSequence\n\nNow we need to add the feature traces. While Plotly.NET supports shapes to draw on a Plot, these have the disadvantage of not triggering hover events (at least to my knowledge).\n\nSo i decided to render each feature as a horizontal Bar trace, setting its \u0060Base\u0060 property (the Bar start) to the feature start, and the length accordingly.\n\nUsing \u0060Chart.SingleStack\u0060 in shared axis mode together with the previous sequence plot, this has the additional advantage that spikelines of the sequence plot span over the features (try hovering over the sequence below)\n\n*)\n\nlet featureTraceTestPlot = \n    [\n        Chart.SequencePlot(testSeq.Sequence |\u003E Seq.map (BioItem.symbol \u003E\u003E string))\n        [\n            Chart.Bar([\u0022Feature1\u0022, 20], Base=10, ShowLegend = false)\n            Chart.Bar([\u0022Feature1\u0022, 20], Base=41, ShowLegend = false)\n            Chart.Bar([\u0022Feature2\u0022, 50], Base=20, ShowLegend = false)\n        ]\n        |\u003E Chart.combine\n    ]\n    |\u003E Chart.SingleStack(Pattern=StyleParam.LayoutGridPattern.Coupled)\n    |\u003E Chart.withSize(1000)\n\n(**\n\u003Chr\u003E\n*)\n\n(***hide***)\nfeatureTraceTestPlot |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n_Fig 4: Bar traces with different bases can be used in a stacked chart to indicate features mapping to the sequence position of the sequence plot on top._\n\u003Chr\u003E\n\u003Cbr\u003E\n*)\n\n(**\n\nThat looks exactly like i wanted it to turn out!\n\nThe rest is now a matter of styling. here is what i did additionally (in words):\n\n- render all features with the same color, unless indicated otherwise by a color mapping function\n- As seen on the plot above, When there are multiple features in a single lane, they get rendered with a y offset. This can be overcome by setting the barmode of the chart layout to \u0060Overlay\u0060\n- Add a x axis range slider to give more exploratory power\n\nAnd here is the final result (in code):\n\n*)\n\n\ntype Chart with\n    static member SequenceFeatureView\n        (\n            annotatedSequence: AnnotatedSequence\u003C_\u003E,\n            ?FontSize: float,\n            ?ColorMapping: seq\u003C(string*Color)\u003E,\n            ?ShowRangeSlider: bool\n        ) =\n            let showRangeSlider = defaultArg ShowRangeSlider true\n            let sequenceString = annotatedSequence.Sequence |\u003E Seq.map (BioItem.symbol \u003E\u003E string)\n\n            let featureColorMap = \n                ColorMapping\n                |\u003E Option.defaultValue Seq.empty\n                |\u003E Map.ofSeq\n\n            let featurePlots =\n                annotatedSequence.Features\n                |\u003E Map.toSeq\n                |\u003E Seq.map (fun (featureName,features) -\u003E\n                    features\n                    |\u003E List.map (fun f -\u003E\n                        Chart.Bar(\n                            [featureName,f.Length-1], \n                            Width=0.8, \n                            Base=f.Start, \n                            Text = $\u0022({f.Start}-{f.End}):  {f.Abbreviation}\u0022, \n                            TextPosition = StyleParam.TextPosition.Inside,\n                            ShowLegend = false,\n                            MarkerColor = (Map.tryFind featureName featureColorMap |\u003E Option.defaultValue (Color.fromKeyword Black))\n                        )\n                    \n                    )\n                )\n                |\u003E Seq.concat\n\n            [\n                Chart.SequencePlot(sequenceString, ?FontSize = FontSize)\n                |\u003E Chart.withYAxis(\n                    LinearAxis.init(Domain = StyleParam.Range.MinMax(0.81,1.))\n                )\n\n                featurePlots\n                |\u003E Chart.combine\n                |\u003E Chart.withYAxis(\n                    LinearAxis.init(ShowGrid=true, FixedRange = false, Domain = StyleParam.Range.MinMax(0.,0.79))\n                )\n            ]\n            |\u003E Chart.SingleStack(Pattern = StyleParam.LayoutGridPattern.Coupled)\n            |\u003E fun c -\u003E \n                if showRangeSlider then\n                    c\n                    |\u003E Chart.withXAxisRangeSlider(\n                        RangeSlider.init(BorderColor=Color.fromKeyword Gray, BorderWidth=1.)\n                    )\n                else\n                    c\n            |\u003E Chart.withConfig(\n                Config.init(ModeBarButtonsToAdd=[\n                    StyleParam.ModeBarButton.ToggleSpikelines\n                ])\n            )\n            |\u003E Chart.withLayout(\n                Layout.init(\n                    BarMode = StyleParam.BarMode.Overlay\n                )\n            )\n            |\u003E Chart.withTitle $\u0022Sequence feature view for {annotatedSequence.Tag}\u0022\n\n(**\nHere is what it looks like with a big test sequence:\n*)\n\nlet bigTestSeq = \n    AnnotatedSequence.create\n        \u0022test sequence\u0022\n        (\u0022ATGCTAGTGTCATGCTAGTGTCATGCTAGTGTCATGCTAGTGTCATGCTAGTGTCATGCTAGTGTCATGCTAGTGTCATGCTAGTGTCATGCTAGTGTCATGCTAGTGTC\u0022 |\u003E BioArray.ofNucleotideString)\n        (Map.ofList [\n            \u0022Feature 1\u0022, [SequenceFeature.create(\u0022F\u0022,1,33,\u0027X\u0027);  SequenceFeature.create(\u0022F\u0022,50,60,\u0027D\u0027)]\n            \u0022Feature 2\u0022, [SequenceFeature.create(\u0022F\u0022,0,30,\u0027L\u0027);  SequenceFeature.create(\u0022F\u0022,40,50,\u0027E\u0027); SequenceFeature.create(\u0022F\u0022,52,100,\u0027L\u0027)]\n            \u0022Feature 3\u0022, [SequenceFeature.create(\u0022F\u0022,8,83,\u0027X\u0027);  SequenceFeature.create(\u0022F\u0022,84,100,\u0027D\u0027)]\n            \u0022Feature 4\u0022, [SequenceFeature.create(\u0022F\u0022,80,85,\u0027L\u0027); SequenceFeature.create(\u0022F\u0022,40,50,\u0027E\u0027); SequenceFeature.create(\u0022F\u0022,52,79,\u0027L\u0027)]            \n            \u0022Feature 5\u0022, [SequenceFeature.create(\u0022F\u0022,1,33,\u0027X\u0027);  SequenceFeature.create(\u0022F\u0022,50,60,\u0027D\u0027)]\n            \u0022Feature 6\u0022, [SequenceFeature.create(\u0022F\u0022,0,30,\u0027L\u0027);  SequenceFeature.create(\u0022F\u0022,40,50,\u0027E\u0027); SequenceFeature.create(\u0022F\u0022,52,100,\u0027L\u0027)]\n            \u0022Feature 7\u0022, [SequenceFeature.create(\u0022F\u0022,8,83,\u0027X\u0027);  SequenceFeature.create(\u0022F\u0022,84,100,\u0027D\u0027)]\n            \u0022Feature 8\u0022, [SequenceFeature.create(\u0022F\u0022,80,85,\u0027L\u0027); SequenceFeature.create(\u0022F\u0022,40,50,\u0027E\u0027); SequenceFeature.create(\u0022F\u0022,52,79,\u0027L\u0027)]\n            \u0022Feature 9\u0022, [SequenceFeature.create(\u0022F\u0022,1,33,\u0027X\u0027);  SequenceFeature.create(\u0022F\u0022,50,60,\u0027D\u0027)]\n            \u0022Feature 10\u0022,[SequenceFeature.create(\u0022F\u0022,0,30,\u0027L\u0027);  SequenceFeature.create(\u0022F\u0022,40,50,\u0027E\u0027); SequenceFeature.create(\u0022F\u0022,52,100,\u0027L\u0027)]\n            \u0022Feature 11\u0022,[SequenceFeature.create(\u0022F\u0022,8,83,\u0027X\u0027);  SequenceFeature.create(\u0022F\u0022,84,100,\u0027D\u0027)]\n            \u0022Feature 12\u0022,[SequenceFeature.create(\u0022F\u0022,80,85,\u0027L\u0027); SequenceFeature.create(\u0022F\u0022,40,50,\u0027E\u0027); SequenceFeature.create(\u0022F\u0022,52,79,\u0027L\u0027)]            \n            \u0022Feature 13\u0022,[SequenceFeature.create(\u0022F\u0022,1,33,\u0027X\u0027);  SequenceFeature.create(\u0022F\u0022,50,60,\u0027D\u0027)]\n            \u0022Feature 14\u0022,[SequenceFeature.create(\u0022F\u0022,0,30,\u0027L\u0027);  SequenceFeature.create(\u0022F\u0022,40,50,\u0027E\u0027); SequenceFeature.create(\u0022F\u0022,52,100,\u0027L\u0027)]\n            \u0022Feature 15\u0022,[SequenceFeature.create(\u0022F\u0022,8,83,\u0027X\u0027);  SequenceFeature.create(\u0022F\u0022,84,100,\u0027D\u0027)]\n            \u0022Feature 16\u0022,[SequenceFeature.create(\u0022F\u0022,80,85,\u0027L\u0027); SequenceFeature.create(\u0022F\u0022,40,50,\u0027E\u0027); SequenceFeature.create(\u0022F\u0022,52,79,\u0027L\u0027)]\n        ])\n\nlet finalChart =\n    Chart.SequenceFeatureView(\n        bigTestSeq,\n        ColorMapping = [\u0022Feature 10\u0022, Color.fromKeyword DarkSalmon] // show feature 10 in a different color\n    )\n    |\u003E Chart.withSize(1000)\n\n(**\n\u003Chr\u003E\n*)\n\n(***hide***)\nfinalChart |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n_Fig 5: The final result of my feature view plotting efforts._\n\u003Chr\u003E\n*)"},{"uri":"/CSBlog/posts/4_qvalues.html","title":"q values","content":"(**\n\n---\ntitle: q values\ncategory: Learning resources\ncategoryindex: 4\nindex: 0\n---\n*)\n\n\n(***hide***)\n#r \u0022nuget: FSharpAux, 1.1.0\u0022\n#r \u0022nuget: Plotly.NET, 2.0.0-preview.16\u0022\n#r \u0022nuget: FSharp.Stats, 0.4.3\u0022\n\nopen Plotly.NET\nopen Plotly.NET.StyleParam\nopen Plotly.NET.LayoutObjects\n\nmodule Chart = \n    let myAxis name = LinearAxis.init(Title=Title.init name,Mirror=StyleParam.Mirror.All,Ticks=StyleParam.TickOptions.Inside,ShowGrid=false,ShowLine=true)\n    let withAxisTitles x y chart = \n        chart \n        |\u003E Chart.withTemplate ChartTemplates.lightMirrored\n        |\u003E Chart.withXAxis (myAxis x) \n        |\u003E Chart.withYAxis (myAxis y)\n    \n(**\n# q values\n\n_[Benedikt Venn](https://github.com/bvenn), Jan 2022_\n\n\n### Table of contents\n\n- [Introduction](#Introduction)\n- [The multiple testing problem](#The-multiple-testing-problem)\n- [False discovery rate](#False-discovery-rate)\n    - [q values](#q-values)\n    - [Variants](#variants)\n- [Quality plots](#Quality-plots)\n- [Definitions and Notes](#Definitions-and-Notes)\n- [References](#References)\n\n## Introduction\n\n\u003Cb\u003EHigh throughput techniques\u003C/b\u003E like microarrays with its successor RNA-Seq and mass spectrometry proteomics lead to an huge data amount.\nThousands of features (e.g. transcripts or proteins) are measured simultaneously. \u003Cb\u003EDifferential expression analysis\u003C/b\u003E aims to identify features, that change significantly\nbetween two conditions. A common experimental setup is the analysis of which genes are over- or underexpressed between e.g. a wild type and a mutant.\n\nHypothesis tests aim to identify differences between two or more samples. The most common statistical test is the \u003Cb\u003Et test\u003C/b\u003E that tests a difference of means. Hypothesis tests report \na p value, that correspond the probability of obtaining results at least as extreme as the observed results, assuming that the null hypothesis is correct. In other words:\n\n\n\n_\u003Ccenter\u003EIf there is no effect (no mean difference), a p value of 0.05 indicates that in 5 % of the tests a false positive is reported.\u003C/center\u003E_\n \n\n\u003Chr\u003E\n\nConsider two population distributions that follow a normal distribution. Both have the \u003Cb\u003Esame\u003C/b\u003E mean and standard deviation.\n*)\n\n\n\nopen FSharpAux\nopen FSharp.Stats\n\nlet distributionA = Distributions.Continuous.normal 10.0 1.0\nlet distributionB = Distributions.Continuous.normal 10.0 1.0\n\n(***hide***)\nlet distributionChartAB = \n    [\n        Chart.Area([5. .. 0.01 .. 15.] |\u003E List.map (fun x -\u003E x,distributionA.PDF x),\u0022distA\u0022)\n        Chart.Area([5. .. 0.01 .. 15.] |\u003E List.map (fun x -\u003E x,distributionB.PDF x),\u0022distB\u0022)\n    ]\n    |\u003E Chart.combine\n    |\u003E Chart.withAxisTitles \u0022variable X\u0022 \u0022relative count\u0022\n    |\u003E Chart.withSize (900.,600.)\n    |\u003E Chart.withTitle \u0022null hypothesis\u0022\n\n(**\u003Ccenter\u003E*)\n(***hide***)\ndistributionChartAB |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n\u003C/center\u003E\n\nSamples with sample size 5 are randomly drawn from both population distributions.\nBoth samples are tested \u003Cb\u003Eif a mean difference exist\u003C/b\u003E using a two sample t test where equal variances of the underlying population distribution are assumed.\n\n\n*)\n\nlet getSample n (dist: Distributions.Distribution\u003Cfloat,float\u003E) =\n    Vector.init n (fun _ -\u003E dist.Sample())\n    \nlet sampleA = getSample 5 distributionA\nlet sampleB = getSample 5 distributionB\n\nlet pValue = (Testing.TTest.twoSample true sampleA sampleB).PValue\n\n(***hide***)\npValue\n(***include-it***)\n\n(**\n10,000 tests are performed, each with new randomly drawn samples. This corresponds to an experiment in which \u003Cb\u003Enone of the features changed\u003C/b\u003E \nNote, that the mean intensities are arbitrary and must not be the same for all features! In the presented case all feature intensities are in average 10.\nThe same simulation can be performed with pairwise comparisons from distributions that differ for each feature, but are the same within the feature.\n\u003Cb\u003EThe resulting p values are uniformly distributed between 0 and 1\u003C/b\u003E\n\n\u003Cbr\u003E\n\n\u003Ccenter\u003E\u003Cimg style=\u0022max-width:50%\u0022 src=\u0022../img/qvalue_01.svg\u0022\u003E\u003C/img\u003E\u003C/center\u003E\n\n_Fig 1: p value distribution of the null hypothesis._\n\u003Chr\u003E\n\u003Cbr\u003E\n\n*)\n(***hide***)\nlet nullDist = \n    Array.init 10000 (fun x -\u003E \n        let sA = getSample 5 distributionA\n        let sB = getSample 5 distributionB\n        (Testing.TTest.twoSample true sA sB).PValue\n        )\n\n\nlet nullDistributionChart = \n    nullDist \n    |\u003E Distributions.Frequency.create 0.025 \n    |\u003E Map.toArray \n    |\u003E Array.map (fun (k,c) -\u003E k,float c) \n    |\u003E Chart.StackedColumn \n    |\u003E Chart.withTraceName \u0022alt\u0022\n    |\u003E Chart.withAxisTitles \u0022pvalue\u0022 \u0022frequency\u0022\n\nlet thresholdLine =\n    Shape.init(ShapeType.Line,0.05,0.05,0.,300.)\n\n(**\n\nSamples are called significantly different, if their p value is below a certain significance threshold ($\\alpha$ level). While \u0022the lower the better\u0022, a common threshold\nis a p value of 0.05 or 0.01. In the presented case in average $10,000 * 0.05 = 500$ tests are \u003Cb\u003Esignificant (red box), even though the populations do not differ\u003C/b\u003E. They are called \u003Cb\u003Efalse \npositives (FP)\u003C/b\u003E. Now lets repeat the same experiment, but this time sample 70% of the time from null features (no difference) and \u003Cb\u003Eadd 30% samples of truly \ndiffering\u003C/b\u003E distributions. Therefore a third populations is generated, that differ in mean, but has an equal standard deviation:\n\n*)\n\nlet distributionC = Distributions.Continuous.normal 11.5 1.0\n\n(***hide***)\nlet distributionChartAC = \n    [\n        Chart.Area([5. .. 0.01 .. 15.] |\u003E List.map (fun x -\u003E x,distributionA.PDF x),\u0022distA\u0022)\n        Chart.Area([5. .. 0.01 .. 15.] |\u003E List.map (fun x -\u003E x,distributionC.PDF x),\u0022distC\u0022)\n    ]\n    |\u003E Chart.combine\n    |\u003E Chart.withAxisTitles  \u0022variable X\u0022 \u0022relative count\u0022\n    |\u003E Chart.withSize (1000.,600.)\n    |\u003E Chart.withTitle \u0022alternative hypothesis\u0022\n\n//distributionChartAC |\u003E GenericChart.toChartHTML\n\n(**\n\n\u003Ccenter\u003E\u003Cimg style=\u0022max-width:50%\u0022 src=\u0022../img/qvalue_02.svg\u0022\u003E\u003C/img\u003E\u003C/center\u003E\n\n_Fig 2: p value distribution of the alternative hypothesis. Blue coloring indicate p values deriving from distribution A and B (null). \nOrange coloring indicate p values deriving from distribution A and C (truly differing)._\n\n\nThe pvalue distribution of the tests resulting from truly differing populations are \u003Cb\u003Eright skewed\u003C/b\u003E, while the null tests again show a homogeneous distribution between 0 and 1. \nMany, but not all of the tests that come from the truly differing populations are below 0.05, and therefore would be reported as significant.\nIn average 350 null features would be reported as significant even though they derive from null features (blue bars, 10,000 x 0.7 x 0.05 = 350).\n\n\n##The multiple testing problem\n\nThe hypothesis testing framework with the p value definition given above was \u003Cb\u003Edeveloped for performing just one test. If many tests are performed, like in modern high throughput studies, the probability to obtain a \nfalse positive result increases.\u003C/b\u003E The probability of at least one false positive is called Familywise error rate (FWER) and can be determined by $FWER=1-(1-\\alpha)^m$ where \n$\\alpha$ corresponds to the significance threshold (here 0.05) and $m$ is the number of performed tests.\n\n*)\n\n(***hide***)\n\nlet bonferroniLine = \n    Shape.init(ShapeType.Line,0.,35.,0.05,0.05,Line=Line.init(Dash=DrawingStyle.Dash))\n\nlet fwer = \n    [1..35]\n    |\u003E List.map (fun x -\u003E \n        x,(1. - (1. - 0.05)**(float x))\n        )\n    |\u003E Chart.Point\n    |\u003E Chart.withYAxisStyle(\u0022\u0022,MinMax=(0.,1.))\n    |\u003E Chart.withAxisTitles \u0022#tests\u0022 \u0022p(at least one FP)\u0022 \n    |\u003E Chart.withShape bonferroniLine\n    |\u003E Chart.withTitle \u0022FWER\u0022\n\n(**\u003Ccenter\u003E*)\n(***hide***)\nfwer |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n\u003C/center\u003E\n\n_Fig 3: Familiy wise error rate depending on number of performed tests. The black dashed line indicates the Bonferroni corrected FWER by $p^* = \\frac{\\alpha}{m}$ ._\n\n\nWhen 10,000 null features are tested with a p value threshold of 0.05, in average 500 tests are reported significant even if there is not a single comparison in which the \npopulations differ. **If some of the features are in fact different, the number of false positives consequently decreases (remember, the p value is defined for tests of null features).**\n\nWhy the interpretation of high throughput data based on p values is difficult: The more features are measured, the more false positives you can expect. If 100 differentially \nexpressed genes are identified by p value thresholding, without further information about the magnitude of expected changes and the total number of measured transcripts, the \ndata is useless. \n\nThe p value threshold has no straight-forward interpretation when many tests are performed. Of course, you could restrict the family wise error rate to 0.05, regardless \nhow many tests are performed. This is realized by dividing the $\\alpha$ significance threshold by the number of tests, which is known as Bonferroni correction: $p^* = \\frac{\\alpha}{m}$.\nThis correction drastically limits the false positive rate, but in an experiment with a huge count of expected changes, it additionally would result in many false negatives. The \nFWER should be chosen if the costs of follow up studies to tests the candidates are dramatic or there is a huge waste of time to potentially study false positives.\n\n##False discovery rate\n\nA more reasonable measure of significance with a simple interpretation is the so-called false discovery rate (FDR). **It describes the rate of expected false positives within the \noverall reported significant features.** The goal is to identify as many sig. features as possible while incurring a relatively low proportion of false positives.\nConsequently, a set of reported significant features together with the \u003Cb\u003EFDR describes the confidence of this set\u003C/b\u003E, without the requirement to \nsomehow incorporate the uncertainty that is introduced by the total number of tests performed. In the simulated case of 7,000 null tests and 3,000 tests resulting from truly \ndiffering distributions above, the FDR can be calculated exactly. Therefore at e.g. a p value of 0.05 the number of false positives (blue in red box) are divided by the number \nof significant reported tests (false positives \u002B true positives). \n\n\n\n\n\u003Cbr\u003E\n\u003Chr\u003E\n\n\u003Ccenter\u003E\u003Cimg style=\u0022max-width:75%\u0022 src=\u0022../img/qvalue_03.svg\u0022\u003E\u003C/img\u003E\u003C/center\u003E\n\n_Fig 4: p value distribution of the alternative hypothesis._\n\u003Chr\u003E\n\u003Cbr\u003E\n\nGiven the conditions described in the first chapter, the FDR of this experiment with a p value threshold of 0.05 is 0.173. Out of the 2019 reported significant comparisons, in average 350 \nare expected to be false positives, which gives an straight forward interpretation of the data confidence. In real-world experiments the proportion of null tests and tests \nderiving from an actual difference is of course unknown. **The proportion of null tests however tends to be distributed equally in the p value histogram.** By identification of \nthe average null frequency, a proportion of FP and TP can be determined, and the FDR can be defined. This frequency estimate is called $\\pi_0$, which leads to an FDR definition of:\n\n\n\n\u003Cbr\u003E\n\n\n\u003Ccenter\u003E\u003Cimg style=\u0022max-width:75%\u0022 src=\u0022../img/qvalue_04.svg\u0022\u003E\u003C/img\u003E\u003C/center\u003E\n\n_Fig 5: FDR calculation on simulated data._\n\n\u003Cbr\u003E\n\n*)\n\n\n\n(**\n\n\n\n### q values\n\nConsequently, for each presented p value a corresponding FDR can be calculated. The minimum local FDR at each p value is called q value. \n\n$$\\hat q(p_i) = min_{t \\geq p_i} \\hat{FDR}(p_i)$$\n\n\nSince the q value is not monotonically increasing, it is smoothed by assigning the lowest FDR of all p values, that are equal or higher the current one.\n\n**By defining $\\pi_0$, all other parameters can be calculated from the given p value distribution to determine the all q values.** The most prominent \nFDR-controlling method is known as Benjamini-Hochberg correction. It sets $\\pi_0$ as 1, assuming that all features are null. In studies with an expected high proportion of true \npositives, a $\\pi_0$ of 1 is too conservative, since there definitely are true positives in the data. \n\nA better estimation of $\\pi_0$ is given in the following:\n\n\u003Cb\u003ETrue positives are assumed to be right skewed while null tests are distributed equally between 0 and 1\u003C/b\u003E. Consequently, the right flat region of the p value histogram tends to correspond \nto the true frequency of null comparisons (Fig 5). As \u003Cb\u003Ereal world example\u003C/b\u003E 9856 genes were measured in triplicates under two conditions (control and treatment). The p value distribution of two \nsample t tests looks as follows:\n\n\n*)\n(***hide***)\nlet examplePVals =\n    System.IO.File.ReadAllLines(@\u0022../files/pvalExample.txt\u0022)\n    |\u003E Array.tail\n    |\u003E Array.map float\n\n//number of tests\nlet m =  \n    examplePVals\n    |\u003E Array.length\n    |\u003E float\n\nlet nullLine =\n    Shape.init(ShapeType.Line,0.,1.,1.,1.,Line=Line.init(Dash=DrawingStyle.Dash))\n\nlet empLine =\n    Shape.init(ShapeType.Line,0.,1.,0.4,0.4,Line=Line.init(Dash=DrawingStyle.DashDot,Color=Color.fromHex \u0022#FC3E36\u0022))\n\nlet exampleDistribution = \n    [\n        [\n        examplePVals\n        |\u003E Distributions.Frequency.create 0.025\n        |\u003E Map.toArray \n        |\u003E Array.map (fun (k,c) -\u003E k,float c / (m * 0.025))\n        |\u003E Chart.Column\n        |\u003E Chart.withTraceName \u0022density\u0022\n        |\u003E Chart.withAxisTitles \u0022p value\u0022 \u0022density\u0022\n        |\u003E Chart.withShapes [nullLine;empLine]\n\n        examplePVals\n        |\u003E Distributions.Frequency.create 0.025\n        |\u003E Map.toArray \n        |\u003E Array.map (fun (k,c) -\u003E k,float c)\n        |\u003E Chart.Column\n        |\u003E Chart.withTraceName \u0022gene count\u0022\n        |\u003E Chart.withAxisTitles \u0022p value\u0022 \u0022gene count\u0022\n        ]\n    ]\n    |\u003E Chart.Grid()\n    |\u003E Chart.withSize(1100.,550.)\n\n(**\u003Ccenter\u003E*)\n(***hide***)\nexampleDistribution |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n\u003C/center\u003E\n\n_Fig 6: p value distributions of real world example. The frequency is given on the right, its density on the left. The black dashed line indicates the distribution, if all features\nwere null. The red dash-dotted line indicates the visual estimated pi0._\n\n\u003Cbr\u003E\n\u003Chr\u003E\n\n\n\nBy performing t tests for all comparisons 3743 (38 %) of the genes lead to a pvalue lower than 0.05.\nBy eye, you would estimate $\\pi_0$ as 0.4, indicating, only a small fraction of the genes is unaltered (null). After q value calculations, you would filter for a specific FDR (e.g. 0.05) and \nend up with an p value threshold of 0.04613, indicating a FDR of max. 0.05 in the final reported 3642 genes. \n\n\u0060\u0060\u0060no-highlight\npi0     = 0.4\nm       = 9856\nD(p)    = number of sig. tests at given p\nFP(p)   = p*0.4*9856\nFDR(p)  = FP(p) / D(p)\n\u0060\u0060\u0060\n\nFDR(0.04613) = 0.4995 \n\n\n\n\u003Cbr\u003E\n\u003Chr\u003E\n\n*)\n(***hide***)\nlet pi0 = 0.4\n\nlet getD p = \n    examplePVals \n    |\u003E Array.sumBy (fun x -\u003E if x \u003C= p then 1. else 0.) \n\nlet getFP p = p * pi0 * m\n\nlet getFDR p = (getFP p) / (getD p)\n\nlet qvaluesNotSmoothed = \n    examplePVals\n    |\u003E Array.sort\n    |\u003E Array.map (fun x -\u003E \n        x, getFDR x)\n    |\u003E Chart.Line \n    |\u003E Chart.withTraceName \u0022not smoothed\u0022\nlet qvaluesSmoothed = \n    let pValsSorted =\n        examplePVals\n        |\u003E Array.sortDescending\n    let rec loop i lowest acc  = \n        if i = pValsSorted.Length then \n            acc |\u003E List.rev\n        else \n            let p = pValsSorted.[i]\n            let q = getFDR p\n            if q \u003E lowest then  \n                loop (i\u002B1) lowest ((p,lowest)::acc)\n            else loop (i\u002B1) q ((p,q)::acc)\n    loop 0 1. []\n    |\u003E Chart.Line\n    |\u003E Chart.withTraceName \u0022smoothed\u0022\nlet eXpos = examplePVals |\u003E Array.filter (fun x -\u003E x \u003C= 0.046135) |\u003E Array.length\nlet p2qValeChart =\n    [qvaluesNotSmoothed;qvaluesSmoothed]\n    |\u003E Chart.combine\n    |\u003E Chart.withYAxisStyle(\u0022\u0022,MinMax=(0.,1.))\n    |\u003E Chart.withAxisTitles \u0022p value\u0022 \u0022q value\u0022\n    |\u003E Chart.withShape empLine\n    |\u003E Chart.withTitle (sprintf \u0022#[genes with q value \u003C 0.05] = %i\u0022 eXpos)\n\n(**\u003Ccenter\u003E*)\n(***hide***)\np2qValeChart |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n\u003C/center\u003E\n\n_Fig 7: FDR calculation on experiment data. Please zoom into the very first part of the curve to inspect the monotonicity._\n\u003Chr\u003E\n\n\n\n###The automatic detection of $\\pi_0$ is facilitated as follows\n\n\nFor a range of $\\lambda$ in e.g. $\\{0.0  ..  0.05  ..  0.95\\}$, calculate $\\hat \\pi_0 (\\lambda) = \\frac {\\#[p_j \u003E \\lambda]}{m(1 - \\lambda)}$\n\n*)\n\n\nlet pi0Est = \n    [|0. .. 0.05 .. 0.95|]\n    |\u003E Array.map (fun lambda -\u003E \n        let num = \n            examplePVals \n            |\u003E Array.sumBy (fun x -\u003E if x \u003E lambda then 1. else 0.) \n        let den = float examplePVals.Length * (1. - lambda)\n        lambda, num/den\n        )\n\n(***hide***)\nlet pi0EstChart = \n    pi0Est \n    |\u003E Chart.Point\n    |\u003E Chart.withYAxisStyle(\u0022\u0022,MinMax=(0.,1.))\n    |\u003E Chart.withXAxisStyle(\u0022\u0022,MinMax=(0.,1.))\n    |\u003E Chart.withAxisTitles \u0022$\\lambda$\u0022 \u0022$\\hat \\pi_0(\\lambda)$\u0022\n    |\u003E Chart.withMathTex(true)\n    |\u003E Chart.withConfig(\n        Config.init(\n            Responsive=true, \n            ModeBarButtonsToAdd=[\n                ModeBarButton.DrawLine\n                ModeBarButton.DrawOpenPath\n                ModeBarButton.EraseShape\n                ]\n            )\n        )\n\n(**\u003Ccenter\u003E*)\n(***hide***)\npi0EstChart|\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n\u003C/center\u003E\n\n_Fig 8: pi0 estimation._\n\u003Chr\u003E\n\nThe resulting diagram shows, that with increasing $\\lambda$ its function value $\\hat \\pi_0(\\lambda)$ tends to $\\pi_0$. The calculation \u003Cb\u003Erelates the actual proportion of tests greater than $\\lambda$ to the proportion of $\\lambda$ range the corresponding p values are in\u003C/b\u003E.\nIn Storey \u0026 Tibshirani 2003 this curve is fitted with a \u003Cb\u003Ecubic spline\u003C/b\u003E. A weighting of the knots by $(1 - \\lambda)$ is recommended \nbut not specified in the final publication. Afterwards the function value at $\\hat \\pi_0(1)$ is defined as final estimator of $\\pi_0$. This is often referred to as the _smoother method_.\n\nAnother method (_bootstrap method_) (Storey et al., 2004), that does not depend on fitting is based on \u003Cb\u003Ebootstrapping\u003C/b\u003E and was introduced in Storey et al. (2004). It is implemented in FSharp.Stats:\n\n  1. Determine the minimal $\\hat \\pi_0 (\\lambda)$ and call it $min \\hat \\pi_0$ . \n\n  2. For each $\\lambda$, bootstrap the p values (e.g. 100 times) and calculate the mean squared error (MSE) from the difference of resulting $\\hat \\pi_0^b$ to $min  \\hat \\pi_0$. The minimal MSE indicates the best $\\lambda$. With $\\lambda$ \ndefined, $\\pi_0$ can be determined. \u003Cb\u003ENote: When bootstrapping an data set of size n, n elements are drawn with replacement.\u003C/b\u003E\n\n\n\n*)\n\n\n(***hide***)\nlet getpi0Bootstrap (lambda:float[]) (pValues:float[]) =\n    let rnd = System.Random()\n    let m = pValues.Length |\u003E float\n    let getpi0hat lambda pVals=\n        let hits = \n            pVals \n            |\u003E Array.sumBy (fun x -\u003E if x \u003E lambda then 1. else 0.) \n        hits / (m * (1. - lambda))\n    \n    //calculate MSE for each lambda\n    let getMSE lambda =\n        let mse = \n            //generate 100 bootstrap samples of p values and calculate the MSE at given lambda\n            Array.init 100 (fun b -\u003E \n                Array.sampleWithReplacement rnd pValues pValues.Length  \n                |\u003E getpi0hat lambda\n                )\n        mse\n    lambda\n    |\u003E Array.map (fun l -\u003E l,getMSE l)\n    \n\nlet minimalpihat = \n    //FSharp.Stats.Testing.MultipleTesting.Qvalues.pi0hats  [|0. .. 0.05 .. 0.96|] examplePVals |\u003E Array.minBy snd |\u003E snd\n    0.3686417749\n\nlet minpiHatShape = \n    Shape.init(ShapeType.Line,0.,1.,minimalpihat,minimalpihat,Line=Line.init(Dash=DrawingStyle.Dash))\n\nlet bootstrappedPi0 =\n    getpi0Bootstrap [|0. .. 0.05 .. 0.95|] examplePVals\n    |\u003E Array.map (fun (l,x) -\u003E \n        Chart.BoxPlot(x=Array.init x.Length (fun _ -\u003E l),y=x,Fillcolor=Color.fromHex\u0022#1F77B4\u0022,MarkerColor=Color.fromHex\u0022#1F77B4\u0022,Name=sprintf \u0022%.2f\u0022 l))\n    |\u003E Chart.combine\n    |\u003E Chart.withYAxisStyle(\u0022\u0022,MinMax=(0.,1.))\n    |\u003E Chart.withAxisTitles \u0022$\\lambda$\u0022 \u0022$\\hat \\pi_0$\u0022\n    |\u003E Chart.withMathTex(true)\n    |\u003E Chart.withShape minpiHatShape\n    |\u003E Chart.withConfig(\n        Config.init(\n            Responsive=true, \n            ModeBarButtonsToAdd=[\n                ModeBarButton.DrawLine\n                ModeBarButton.DrawOpenPath\n                ModeBarButton.EraseShape\n                ]\n            )\n        )\n\nbootstrappedPi0 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n\n(**\n\n\n_Fig 9: Bootstrapping for pi0 estimation. The dashed line indicates the minimal pi0 from Fig. 8.\nThe bootstrapped pi0 distribution that shows the least variation to the dashed line is the optimal. In the presented example it is either 0.8 or 0.85._\n\u003Chr\u003E\n\nFor an $\\lambda$, range of $\\{0.0  ..  0.05  ..  0.95\\}$ the bootstrapping method determines either 0.8 or 0.85 as optimal $\\lambda$ and therefore $optimal  \\hat \\pi_0$ is either $0.3703$ or $0.3686$.\n\nThe \u003Cb\u003Eautomated estimation\u003C/b\u003E of $\\pi_0$ based on bootstrapping is implemented in \u0060FSharp.Stats.Testing.MultipleTesting.Qvalues\u0060.\n\n*)\nopen Testing.MultipleTesting\n\nlet pi0Stats = Qvalues.pi0BootstrapWithLambda [|0.0 .. 0.05 .. 0.95|] examplePVals\n\n(***hide***)\npi0Stats\n(***include-it***)\n\n\n\n\n(**\nSubsequent to $\\pi_0$ estimation the \u003Cb\u003Eq values can be determined\u003C/b\u003E from a list of p values.\n*)\n\nlet qValues = Qvalues.ofPValues pi0Stats examplePVals\n\n(***hide***)\nqValues\n(***include-it***)\n\n(**\n###Variants\n\nA robust variant of q value determination exists, that is more conservative for small p values when\nthe total number of p values is low. Here the number of false positives is divided by the number of \ntotal discoveries multiplied by the FWER at the current p value. The correction takes into account \nthe probability of a false positive being reported in the first place.\n\nEspecially when the population distributions do not follow a perfect normal distribution or the p value distribution looks strange, \nthe usage of the robust version is recommended.\n\n\u003Ccenter\u003E\n\n$qval = {\\#FP \\over \\#Discoveries}$ \n\n$qval_{robust} = {\\#FP \\over \\#Discoveries \\times (1-(1-p)^m)}$ \n\n\u003C/center\u003E\n\n*)\n\nlet qvaluesRobust = \n    Testing.MultipleTesting.Qvalues.ofPValuesRobust pi0Stats examplePVals\n\n(***hide***)\n\n\nlet qChart =    \n    [\n        Chart.Line(Array.sortBy fst (Array.zip examplePVals qValues),Name=\u0022qValue\u0022)\n        Chart.Line(Array.sortBy fst (Array.zip examplePVals qvaluesRobust),Name=\u0022qValueRobust\u0022)\n    ]\n    |\u003E Chart.combine\n    |\u003E Chart.withAxisTitles \u0022p value\u0022 \u0022q value\u0022\n\nqChart |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n_Fig 10: Comparison of q values and robust q values, that is more conservative at low p values._\n\n\n##Quality plots\n\n*)\n\nlet pi0Line = \n    Shape.init(ShapeType.Line,0.,1.,pi0Stats,pi0Stats,Line=Line.init(Dash=DrawingStyle.Dash))\n\n// relates the q value to each p value\nlet p2q = \n    Array.zip examplePVals qValues\n    |\u003E Array.sortBy fst\n    |\u003E Chart.Line\n    |\u003E Chart.withShape pi0Line\n    |\u003E Chart.withAxisTitles \u0022p value\u0022 \u0022q value\u0022\n\n// shows the p values distribution for an visual inspection of pi0 estimation\nlet pValueDistribution =\n    let frequencyBins = 0.025 \n    let m = examplePVals.Length |\u003E float\n    examplePVals \n    |\u003E Distributions.Frequency.create frequencyBins \n    |\u003E Map.toArray \n    |\u003E Array.map (fun (k,c) -\u003E k,float c / frequencyBins / m) \n    |\u003E Chart.StackedColumn \n    |\u003E Chart.withTraceName \u0022p values\u0022\n    |\u003E Chart.withAxisTitles \u0022p value\u0022 \u0022frequency density\u0022\n    |\u003E Chart.withShape pi0Line\n\n// shows pi0 estimation in relation to lambda\nlet pi0Estimation = \n    //Testing.MultipleTesting.Qvalues.pi0hats [|0. .. 0.05 .. 0.96|] examplePVals\n    [|0. .. 0.05 .. 0.95|]\n    |\u003E Array.map (fun lambda -\u003E \n        let num =   \n            examplePVals \n            |\u003E Array.sumBy (fun x -\u003E if x \u003E lambda then 1. else 0.)\n        let den = float examplePVals.Length * (1. - lambda)\n        lambda, num/den\n        )\n    |\u003E Chart.Point\n    |\u003E Chart.withAxisTitles \u0022$\\lambda$\u0022 \u0022$\\hat \\pi_0(\\lambda)$\u0022\n    |\u003E Chart.withMathTex(true)\n\n\n(***hide***)\n//System.IO.File.ReadAllText \u0022../img/qvalue_fig10.html\u0022\np2q |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n_Fig 11: p value relation to q values. At a p value of 1 the q value is equal to pi0 (black dashed line)._\n*)\n\n(***hide***)\npValueDistribution |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n_Fig 12: p value density distribution. The dashed line indicates pi0 estimated by Storeys bootstrapping method._\n*)\n\n(***hide***)\npi0Estimation|\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n_Fig 13: Visual pi0 estimation._\n*)\n\n(**\n##Definitions and Notes\n  - Benjamini-Hochberg (BH) correction is equal to q values with $\\pi_0 = 1$\n  - Storey \u0026 Tibshirani (2003):\n    - _\u0022The 0.05 q-value cut-off is arbitrary, and we do not recommend that this value necessarily be used.\u0022_\n    - _\u0022The q-value for a particular feature is the expected proportion of false positives occurring up through that feature on the list.\u0022_\n    - _\u0022The precise definition of the q-value for a particular feature is the following. The q-value for a particular feature is the minimum false discovery rate that can be attained when calling all features up through that one on the list significant.\u0022_\n    - _\u0022The Benjamini \u0026 Hochberg (1995) methodology also forces one to choose an acceptable FDR level before any data are seen, which is often going to be impractical.\u0022_\n  - To improve the q value estimation if the effects are asymmetric, meaning that negative effects are stronger than positives, or vice versa a method was published in 2014 by Orr et al.. They estimate a global $m_0$ and then split the p values \n  in two groups before calculating q values for each p value set. The applicability of this strategy however is questionable, as the number of up- and downregulated features must be equal, which is not the case in most biological experimental setups.\n  - The distinction of FDR and pFDR (positive FDR) is not crucial in the presented context, because in high throughput experiments with m\u003E\u003E100: Pr(R \u003E 0) ~ 1 (Storey \u0026 Tibshirani, 2003, Appendix Remark A).\n  - The local FDR (lFDR) is sometimes referred to as the probability that for the current p value the null hypothesis is true (Storey 2011).\n  - If you have found typos, errors, or misleading statements, please feel free to file a pull request or contact me.\n\n\n##FAQ\n  - Why are q values lower than their associated p values?\n    - q values are not necessarily greater than their associated p values. q values can maximal be pi0. The definition of p values is not the same as for q values! A q\n    value defines what proportion of the reported discoveries may be false.\n\n  - Which cut off should I use?\n    - _\u0022The 0.05 q-value cut-off is arbitrary, and we do not recommend that this value necessarily be used.\u0022_ (Storey 2003). It depends on your experimental design and the number of false positives you are willing to accept.\n    If there are _20 discoveries_, you may argue to accept if _2_ of them are false positives (FDR=0.1). On the other hand, if there are _10,000 discoveries_ with _1,000 false positives_ (FDR=0.1) you may should reduce the FDR. Thereby the \n    proportion of false positives decreases. Of course, in this case the number of positives will decrease as well. It all breaks down to the matter of willingness to accept a certain number of false positives within your study. \n    Studies, that aim to identify the presence of an specific protein of interest, the FDR should be kept low, because it inflates the risk, that this particular candidate is a false positive.\n    If confirmatory follow up studies are cheap, you can increase the FDR, if they are **expensive**, you should restrict the number of false positives to **avoid unpleasant discussions with your supervisor**. \n    \n  - In my study gene RBCM has an q value of 0.03. Does that indicate, there is a 3% chance, that it is an false positive?\n    - No, actually the chance that this particular gene is an false positive may actually be higher, because there may be genes that are much more significant than RBCM. The q value indicates, \n    that 3% of the genes that are as or more extreme than RBCM are false positives (Storey 2003).\n\n  - Should I use the default or robust version for my study?\n\n  - When should I use q values over BH correction, or other multiple testing variants?\n    - There is no straight forward answer to this question. If you are able to define a confident pi0 estimate by eye when inspecting the p value distribution, then the q value approach may be feasible.\n    If you struggle in defining pi0, because the p value distribution has an odd shape or there are too few p values on which you base your estimate, it is better to choose the more conservative BH correction, or even\n    consider other methodologies.\n\n##References\n  - Storey JD, Tibshirani R, Statistical significance for genomewide studies, 2003 [DOI: 10.1073/pnas.1530509100](https://www.pnas.org/content/100/16/9440)\n  - Storey JD, Taylor JE, Siegmund D, Strong Control, Conservative Point Estimation and Simultaneous Conservative Consistency of False Discovery Rates: A Unified Approach, 2004, [http://www.jstor.org/stable/3647634](https://www.jstor.org/stable/3647634?seq=1#metadata_info_tab_contents).\n  - Storey JD, Princeton University, 2011, [preprint](http://genomics.princeton.edu/storeylab/papers/Storey_FDR_2011.pdf)\n  - Orr M, Liu P, Nettleton D, An improved method for computing q-values when the distribution of effect sizes is asymmetric, 2014, [doi: 10.1093/bioinformatics/btu432](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4609005/)\n  - NettletonD et al., Estimating the Number of True Null Hypotheses from a Histogram of p Values., 2006, http://www.jstor.org/stable/27595607.\n  - Benjamini Y, Hochberg Y, On the Adaptive Control of the False Discovery Rate in Multiple Testing With Independent Statistics, 2000, [doi:10.3102/10769986025001060](https://journals.sagepub.com/doi/10.3102/10769986025001060)\n\n*)"},{"uri":"/CSBlog/posts/4_set_relationships.html","title":"Visualizing relationships between sets with Plotly.NET","content":"(**\n\n---\ntitle: Visualizing relationships between sets with Plotly.NET\ncategory: Visualization\ncategoryindex: 2\nindex: 2\n---\n*)\n\n(***hide***)\n#r \u0022nuget: Deedle, 2.3.0\u0022\n#r \u0022nuget: Plotly.NET, 2.0.0\u0022\n#r \u0022nuget: FSharp.Stats, 0.4.1\u0022\n#r \u0022nuget: FSharpAux\u0022\n#r \u0022nuget: BioFSharp.Vis, 3.0.1\u0022\n\nopen Deedle\nopen Plotly.NET\nopen Plotly.NET.LayoutObjects\nopen FSharp.Stats\nopen BioFSharp.Vis\nopen BioFSharp.Vis.UpSet\nopen BioFSharp.Vis.Venn\nopen System\nopen System.IO\n\ndo fsi.AddPrinter(fun (printer:Deedle.Internal.IFsiFormattable) -\u003E \u0022\\n\u0022 \u002B (printer.Format()))\n\nlet movieFrame =\n    Frame.ReadCsv(Path.Combine(__SOURCE_DIRECTORY__,\u0022movies.csv\u0022),separators=\u0022;\u0022)\n    |\u003E Frame.sliceCols [\u0022Name\u0022;\u0022Action\u0022;\u0022Comedy\u0022;\u0022Drama\u0022;\u0022AvgRating\u0022]\n    |\u003E Frame.filterRows (fun k s -\u003E\n        s.GetAs\u003Cbool\u003E(\u0022Action\u0022)   ||\n        s.GetAs\u003Cbool\u003E(\u0022Comedy\u0022)   ||\n        s.GetAs\u003Cbool\u003E(\u0022Drama\u0022)\n    )\n\nlet getSetByGenre (category: string) (frame: Frame\u003Cint,string\u003E) =\n    frame\n    |\u003E Frame.indexRowsUsing(fun s -\u003E\n        {|\n            Name = s.GetAs\u003Cstring\u003E(\u0022Name\u0022);\n            Genre = s.GetAs\u003Cbool\u003E(category)\n        |}\n    )\n    |\u003E fun f -\u003E f.RowKeys\n    |\u003E Seq.toArray\n    |\u003E Array.filter (fun x -\u003E x.Genre = true)\n    |\u003E Array.map (fun x -\u003E x.Name)\n    |\u003E Set.ofArray\n\nlet getScoreMap (frame: Frame\u003Cint,string\u003E) =\n    frame\n    |\u003E Frame.indexRowsUsing(fun s -\u003E\n        s.GetAs\u003Cstring\u003E(\u0022Name\u0022),\n        s.GetAs\u003Cfloat\u003E(\u0022AvgRating\u0022)\n    )\n    |\u003E fun f -\u003E f.RowKeys\n    |\u003E Map.ofSeq\n\n(**\n# Visualizing relationships between sets with Plotly.NET\n\n### Table of contents\n\n- [Visualizing set relationships with Venn diagrams](#Visualizing-set-relationships-with-Venn-diagrams)\n    - [Construction Venn](#Construction-Venn)\n    - [Usage Venn](#Usage-Venn)\n- [Visualizing set relationships with UpSet plots](#Visualizing-set-relationships-with-UpSet-plots)\n    - [Construction UpSet](#Construction-UpSet)\n    - [Usage UpSet](#Usage-UpSet)\n\nVisualizing and understanding relationships between sets plays an important role in analyzing data at hand. A widely used visualization method is the \n[Venn diagram](https://en.wikipedia.org/wiki/Venn_diagram). But Venn diagrams are limited in their capability. While two, three, or even four sets may be easily visualizable, they struggle \nwith higher set counts. To address this issue, the concept of [UpSet](https://upset.app/) plots was developed by Lex et al. in 2014. In this blogpost I will demonstrate how to visualize \nsets with Venn diagrams and UpSet plots. I use a dataframe containing information about movies as source for our sets. The comparisons will be based on the genre of the movies.\n*)\n\n(***hide***)\nmovieFrame\n(*** include-it ***)\n\n(**\n## Visualizing set relationships with Venn diagrams\n### Construction Venn\nA Venn diagram uses simple closed shapes to represent sets. Those shapes are often circles or ellipses.\nLet\u0060s start with a simple comparison of two sets using circles as our shape. For that we take genres action and comedy and determine their intersections:\n*)\n\nlet actionSet =\n    movieFrame\n    |\u003E getSetByGenre \u0022Action\u0022\n\nlet comedySet =\n    movieFrame\n    |\u003E getSetByGenre \u0022Comedy\u0022\n\nlet intersectionCount =\n    Venn.ofSetList [|\u0022Action\u0022;\u0022Comedy\u0022|] [|actionSet;comedySet|]\n    |\u003E Venn.toVennCount\n(***hide***)\nintersectionCount\n(*** include-it ***)\n(**\nNow we can start building our Venn diagram with Plotly. First of all we need to create two shapes for the circles at the correct position and put them in a layout.\n*)\n\nlet axis =\n    LinearAxis.init(\n        ShowTickLabels = false,\n        ShowGrid = false,\n        ZeroLine = false\n    )\n\nlet circleAction =\n    Shape.init(\n        Opacity = 0.3,\n        Xref = \u0022x\u0022,\n        Yref = \u0022y\u0022,\n        Fillcolor = Color.fromKeyword Red,\n        X0 = 0,\n        Y0 = 0,\n        X1 = 2,\n        Y1 = 2,\n        ShapeType = StyleParam.ShapeType.Circle,\n        Line = Line.init(Color = Color.fromKeyword Red)\n    )\n\nlet circleComedy =\n    Shape.init(\n        Opacity = 0.3,\n        Xref = \u0022x\u0022,\n        Yref = \u0022y\u0022,\n        Fillcolor = Color.fromKeyword Blue,\n        X0 = 1.5,\n        Y0 = 0,\n        X1 = 3.5,\n        Y1 = 2,\n        ShapeType = StyleParam.ShapeType.Circle,\n        Line = Line.init(Color = Color.fromKeyword Blue)\n    )\n\nlet layout =\n    Layout.init(\n        Shapes = [circleAction;circleComedy],\n        Margin = \n            Margin.init(\n                Left = 20,\n                Right = 20,\n                Bottom = 100\n            )\n    )\n    |\u003E Layout.updateLinearAxisById(StyleParam.SubPlotId.XAxis 1, axis)\n    |\u003E Layout.updateLinearAxisById(StyleParam.SubPlotId.YAxis 1, axis)\n\n(**\nNext, we need some text to describe our sets and intersection counts. This can be achieved via \u0060Chart.Scatter\u0060.\n*)\n\nlet vennChart =\n    Trace2D.initScatter(\n        Trace2DStyle.Scatter(\n            X = [|1.; 2.5; 1.75|],\n            Y = [|1.; 1.; 1.|],\n            Mode = StyleParam.Mode.Text,\n            MultiText = [\u0022Action\u003Cbr\u003E438\u0022;\u0022Comedy\u003Cbr\u003E1135\u0022;\u002265\u0022],\n            TextFont =\n                Font.init (\n                    Family = StyleParam.FontFamily.Arial,\n                    Size = 18.,\n                    Color = Color.fromString \u0022black\u0022\n                )\n        )\n    )\n    |\u003E GenericChart.ofTraceObject true\n    |\u003E Chart.withSize (400.,400.)\n\n(**\nWe can now complete our Venn diagram by adding our previously created layout to the \u0060Chart.Scatter\u0060 \n*)\n\nvennChart\n|\u003E Chart.withLayout layout\n\n(***hide***)\n\u0022\u0022\u0022\u003Cdiv id=\u002201237ef1-7c52-4d9e-bcbe-4cda31ddd24f\u0022\u003E\u003C!-- Plotly chart will be drawn inside this DIV --\u003E\u003C/div\u003E\n\u003Cscript type=\u0022text/javascript\u0022\u003E\n\n          var renderPlotly_01237ef17c524d9ebcbe4cda31ddd24f = function() {\n          var fsharpPlotlyRequire = requirejs.config({context:\u0027fsharp-plotly\u0027,paths:{plotly:\u0027https://cdn.plot.ly/plotly-2.6.3.min\u0027}}) || require;\n          fsharpPlotlyRequire([\u0027plotly\u0027], function(Plotly) {\n\n          var data = [{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022text\u0022,\u0022x\u0022:[1.0,2.5,1.75],\u0022y\u0022:[1.0,1.0,1.0],\u0022text\u0022:[\u0022Action\u003Cbr\u003E438\u0022,\u0022Comedy\u003Cbr\u003E1135\u0022,\u002265\u0022],\u0022textfont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:18.0,\u0022color\u0022:\u0022black\u0022}}];\n          var layout = {\u0022width\u0022:400,\u0022height\u0022:400,\u0022template\u0022:{\u0022layout\u0022:{\u0022paper_bgcolor\u0022:\u0022white\u0022,\u0022plot_bgcolor\u0022:\u0022white\u0022,\u0022xaxis\u0022:{\u0022showline\u0022:true,\u0022zeroline\u0022:true},\u0022yaxis\u0022:{\u0022showline\u0022:true,\u0022zeroline\u0022:true}},\u0022data\u0022:{}},\u0022margin\u0022:{\u0022l\u0022:20,\u0022r\u0022:20,\u0022b\u0022:100},\u0022shapes\u0022:[{\u0022type\u0022:\u0022circle\u0022,\u0022xref\u0022:\u0022x\u0022,\u0022x0\u0022:0,\u0022x1\u0022:2,\u0022yref\u0022:\u0022y\u0022,\u0022y0\u0022:0,\u0022y1\u0022:2,\u0022opacity\u0022:0.3,\u0022line\u0022:{\u0022color\u0022:\u0022rgba(255, 0, 0, 1.0)\u0022},\u0022fillcolor\u0022:\u0022rgba(255, 0, 0, 1.0)\u0022},{\u0022type\u0022:\u0022circle\u0022,\u0022xref\u0022:\u0022x\u0022,\u0022x0\u0022:1.5,\u0022x1\u0022:3.5,\u0022yref\u0022:\u0022y\u0022,\u0022y0\u0022:0,\u0022y1\u0022:2,\u0022opacity\u0022:0.3,\u0022line\u0022:{\u0022color\u0022:\u0022rgba(0, 0, 255, 1.0)\u0022},\u0022fillcolor\u0022:\u0022rgba(0, 0, 255, 1.0)\u0022}],\u0022xaxis\u0022:{\u0022showticklabels\u0022:false,\u0022showgrid\u0022:false,\u0022zeroline\u0022:false},\u0022yaxis\u0022:{\u0022showticklabels\u0022:false,\u0022showgrid\u0022:false,\u0022zeroline\u0022:false}};\n          var config = {\u0022responsive\u0022:true};\n          Plotly.newPlot(\u002701237ef1-7c52-4d9e-bcbe-4cda31ddd24f\u0027, data, layout, config);\n});\n          };\n          if ((typeof(requirejs) !==  typeof(Function)) || (typeof(requirejs.config) !== typeof(Function))) {\n              var script = document.createElement(\u0022script\u0022);\n              script.setAttribute(\u0022src\u0022, \u0022https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\u0022);\n              script.onload = function(){\n                  renderPlotly_01237ef17c524d9ebcbe4cda31ddd24f();\n              };\n              document.getElementsByTagName(\u0022head\u0022)[0].appendChild(script);\n          }\n          else {\n              renderPlotly_01237ef17c524d9ebcbe4cda31ddd24f();\n          }\n\u003C/script\u003E\n\u0022\u0022\u0022\n(***include-it-raw***)\n(**\n### Usage Venn\n\nThis required a lot of manual formatting. Luckily, [BioFSharp.Vis](https://github.com/CSBiology/BioFSharp.Vis) contains chart extensions \nfor Venn diagrams with two and three sets.\n*)\n\nlet dramaSet =\n    movieFrame\n    |\u003E getSetByGenre \u0022Drama\u0022\n\nChart.Venn (\n    [|\u0022Action\u0022;\u0022Comedy\u0022;\u0022Drama\u0022|],\n    [|actionSet;comedySet;dramaSet|]\n)\n\n(***hide***)\n\u0022\u0022\u0022\u003Cdiv id=\u00229c33a2a9-282c-43ce-b2a7-d204c9312c02\u0022\u003E\u003C!-- Plotly chart will be drawn inside this DIV --\u003E\u003C/div\u003E\n\u003Cscript type=\u0022text/javascript\u0022\u003E\n\n          var renderPlotly_9c33a2a9282c43ceb2a7d204c9312c02 = function() {\n          var fsharpPlotlyRequire = requirejs.config({context:\u0027fsharp-plotly\u0027,paths:{plotly:\u0027https://cdn.plot.ly/plotly-2.6.3.min\u0027}}) || require;\n          fsharpPlotlyRequire([\u0027plotly\u0027], function(Plotly) {\n\n          var data = [{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022text\u0022,\u0022x\u0022:[1.0,2.5,1.75,1.75,1.325,2.125,1.75],\u0022y\u0022:[1.0,1.0,2.25,1.0,1.6625,1.6625,1.45],\u0022text\u0022:[\u0022Action\u003Cbr\u003E348\u0022,\u0022Comedy\u003Cbr\u003E919\u0022,\u0022Drama\u003Cbr\u003E1287\u0022,\u002255\u0022,\u002290\u0022,\u0022216\u0022,\u002210\u0022],\u0022textfont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:18.0,\u0022color\u0022:\u0022black\u0022}}];\n          var layout = {\u0022width\u0022:600,\u0022height\u0022:600,\u0022template\u0022:{\u0022layout\u0022:{\u0022title\u0022:{\u0022x\u0022:0.05},\u0022font\u0022:{\u0022color\u0022:\u0022rgba(42, 63, 95, 1.0)\u0022},\u0022paper_bgcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022plot_bgcolor\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022,\u0022autotypenumbers\u0022:\u0022strict\u0022,\u0022colorscale\u0022:{\u0022diverging\u0022:[[0.0,\u0022#8e0152\u0022],[0.1,\u0022#c51b7d\u0022],[0.2,\u0022#de77ae\u0022],[0.3,\u0022#f1b6da\u0022],[0.4,\u0022#fde0ef\u0022],[0.5,\u0022#f7f7f7\u0022],[0.6,\u0022#e6f5d0\u0022],[0.7,\u0022#b8e186\u0022],[0.8,\u0022#7fbc41\u0022],[0.9,\u0022#4d9221\u0022],[1.0,\u0022#276419\u0022]],\u0022sequential\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]],\u0022sequentialminus\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]]},\u0022hovermode\u0022:\u0022closest\u0022,\u0022hoverlabel\u0022:{\u0022align\u0022:\u0022left\u0022},\u0022coloraxis\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}},\u0022geo\u0022:{\u0022showland\u0022:true,\u0022landcolor\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022,\u0022showlakes\u0022:true,\u0022lakecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022subunitcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022bgcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022},\u0022mapbox\u0022:{\u0022style\u0022:\u0022light\u0022},\u0022polar\u0022:{\u0022bgcolor\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022,\u0022radialaxis\u0022:{\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022ticks\u0022:\u0022\u0022},\u0022angularaxis\u0022:{\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022ticks\u0022:\u0022\u0022}},\u0022scene\u0022:{\u0022xaxis\u0022:{\u0022ticks\u0022:\u0022\u0022,\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridwidth\u0022:2.0,\u0022zerolinecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022backgroundcolor\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022,\u0022showbackground\u0022:true},\u0022yaxis\u0022:{\u0022ticks\u0022:\u0022\u0022,\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridwidth\u0022:2.0,\u0022zerolinecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022backgroundcolor\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022,\u0022showbackground\u0022:true},\u0022zaxis\u0022:{\u0022ticks\u0022:\u0022\u0022,\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridwidth\u0022:2.0,\u0022zerolinecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022backgroundcolor\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022,\u0022showbackground\u0022:true}},\u0022ternary\u0022:{\u0022aaxis\u0022:{\u0022ticks\u0022:\u0022\u0022,\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022},\u0022baxis\u0022:{\u0022ticks\u0022:\u0022\u0022,\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022},\u0022caxis\u0022:{\u0022ticks\u0022:\u0022\u0022,\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022},\u0022bgcolor\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022},\u0022xaxis\u0022:{\u0022title\u0022:{\u0022standoff\u0022:15},\u0022ticks\u0022:\u0022\u0022,\u0022automargin\u0022:true,\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022zerolinecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022zerolinewidth\u0022:2.0},\u0022yaxis\u0022:{\u0022title\u0022:{\u0022standoff\u0022:15},\u0022ticks\u0022:\u0022\u0022,\u0022automargin\u0022:true,\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022zerolinecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022zerolinewidth\u0022:2.0},\u0022annotationdefaults\u0022:{\u0022arrowcolor\u0022:\u0022#2a3f5f\u0022,\u0022arrowhead\u0022:0,\u0022arrowwidth\u0022:1},\u0022shapedefaults\u0022:{\u0022line\u0022:{\u0022color\u0022:\u0022rgba(42, 63, 95, 1.0)\u0022}},\u0022colorway\u0022:[\u0022rgba(99, 110, 250, 1.0)\u0022,\u0022rgba(239, 85, 59, 1.0)\u0022,\u0022rgba(0, 204, 150, 1.0)\u0022,\u0022rgba(171, 99, 250, 1.0)\u0022,\u0022rgba(255, 161, 90, 1.0)\u0022,\u0022rgba(25, 211, 243, 1.0)\u0022,\u0022rgba(255, 102, 146, 1.0)\u0022,\u0022rgba(182, 232, 128, 1.0)\u0022,\u0022rgba(255, 151, 255, 1.0)\u0022,\u0022rgba(254, 203, 82, 1.0)\u0022]},\u0022data\u0022:{\u0022bar\u0022:[{\u0022marker\u0022:{\u0022line\u0022:{\u0022color\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022,\u0022width\u0022:0.5},\u0022pattern\u0022:{\u0022fillmode\u0022:\u0022overlay\u0022,\u0022size\u0022:10,\u0022solidity\u0022:0.2}},\u0022error_x\u0022:{\u0022color\u0022:\u0022rgba(42, 63, 95, 1.0)\u0022},\u0022error_y\u0022:{\u0022color\u0022:\u0022rgba(42, 63, 95, 1.0)\u0022}}],\u0022barpolar\u0022:[{\u0022marker\u0022:{\u0022line\u0022:{\u0022color\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022,\u0022width\u0022:0.5},\u0022pattern\u0022:{\u0022fillmode\u0022:\u0022overlay\u0022,\u0022size\u0022:10,\u0022solidity\u0022:0.2}}}],\u0022carpet\u0022:[{\u0022aaxis\u0022:{\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022endlinecolor\u0022:\u0022rgba(42, 63, 95, 1.0)\u0022,\u0022minorgridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022startlinecolor\u0022:\u0022rgba(42, 63, 95, 1.0)\u0022},\u0022baxis\u0022:{\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022endlinecolor\u0022:\u0022rgba(42, 63, 95, 1.0)\u0022,\u0022minorgridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022startlinecolor\u0022:\u0022rgba(42, 63, 95, 1.0)\u0022}}],\u0022choropleth\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022},\u0022colorscale\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]]}],\u0022contour\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022},\u0022colorscale\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]]}],\u0022contourcarpet\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}],\u0022heatmap\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022},\u0022colorscale\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]]}],\u0022heatmapgl\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022},\u0022colorscale\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]]}],\u0022histogram\u0022:[{\u0022marker\u0022:{\u0022pattern\u0022:{\u0022fillmode\u0022:\u0022overlay\u0022,\u0022size\u0022:10,\u0022solidity\u0022:0.2}}}],\u0022histogram2d\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022},\u0022colorscale\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]]}],\u0022histogram2dcontour\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022},\u0022colorscale\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]]}],\u0022mesh3d\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}],\u0022parcoords\u0022:[{\u0022line\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022pie\u0022:[{\u0022automargin\u0022:true}],\u0022scatter\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022scatter3d\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}},\u0022line\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022scattercarpet\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022scattergeo\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022scattergl\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022scattermapbox\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022scatterpolar\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022scatterpolargl\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022scatterternary\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022surface\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022},\u0022colorscale\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]]}],\u0022table\u0022:[{\u0022cells\u0022:{\u0022fill\u0022:{\u0022color\u0022:\u0022rgba(235, 240, 248, 1.0)\u0022},\u0022line\u0022:{\u0022color\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022}},\u0022header\u0022:{\u0022fill\u0022:{\u0022color\u0022:\u0022rgba(200, 212, 227, 1.0)\u0022},\u0022line\u0022:{\u0022color\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022}}}]}},\u0022shapes\u0022:[{\u0022type\u0022:\u0022circle\u0022,\u0022xref\u0022:\u0022x\u0022,\u0022x0\u0022:0.0,\u0022x1\u0022:2.0,\u0022yref\u0022:\u0022y\u0022,\u0022y0\u0022:0.0,\u0022y1\u0022:2.0,\u0022opacity\u0022:0.3,\u0022line\u0022:{\u0022color\u0022:\u0022rgba(0, 0, 255, 1.0)\u0022},\u0022fillcolor\u0022:\u0022rgba(0, 0, 255, 1.0)\u0022},{\u0022type\u0022:\u0022circle\u0022,\u0022xref\u0022:\u0022x\u0022,\u0022x0\u0022:1.5,\u0022x1\u0022:3.5,\u0022yref\u0022:\u0022y\u0022,\u0022y0\u0022:0.0,\u0022y1\u0022:2.0,\u0022opacity\u0022:0.3,\u0022line\u0022:{\u0022color\u0022:\u0022rgba(255, 0, 0, 1.0)\u0022},\u0022fillcolor\u0022:\u0022rgba(255, 0, 0, 1.0)\u0022},{\u0022type\u0022:\u0022circle\u0022,\u0022xref\u0022:\u0022x\u0022,\u0022x0\u0022:0.75,\u0022x1\u0022:2.75,\u0022yref\u0022:\u0022y\u0022,\u0022y0\u0022:1.3,\u0022y1\u0022:3.3,\u0022opacity\u0022:0.3,\u0022line\u0022:{\u0022color\u0022:\u0022rgba(0, 128, 0, 1.0)\u0022},\u0022fillcolor\u0022:\u0022rgba(0, 128, 0, 1.0)\u0022}],\u0022xaxis\u0022:{\u0022showticklabels\u0022:false,\u0022showgrid\u0022:false,\u0022zeroline\u0022:false},\u0022yaxis\u0022:{\u0022showticklabels\u0022:false,\u0022showgrid\u0022:false,\u0022zeroline\u0022:false}};\n          var config = {\u0022responsive\u0022:true};\n          Plotly.newPlot(\u00279c33a2a9-282c-43ce-b2a7-d204c9312c02\u0027, data, layout, config);\n});\n          };\n          if ((typeof(requirejs) !==  typeof(Function)) || (typeof(requirejs.config) !== typeof(Function))) {\n              var script = document.createElement(\u0022script\u0022);\n              script.setAttribute(\u0022src\u0022, \u0022https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\u0022);\n              script.onload = function(){\n                  renderPlotly_9c33a2a9282c43ceb2a7d204c9312c02();\n              };\n              document.getElementsByTagName(\u0022head\u0022)[0].appendChild(script);\n          }\n          else {\n              renderPlotly_9c33a2a9282c43ceb2a7d204c9312c02();\n          }\n\u003C/script\u003E\n\u0022\u0022\u0022\n(***include-it-raw***)\n\n(**\n## Visualizing set relationships with UpSet plots\n### Construction UpSet\n\nSince Venn diagrams with more than three sets are increasingly difficult to model and read, BioFSharp.Vis also includes UpSet plots. \nUpSet plots consist of three basic parts. The first is a matrix representing the intersection between sets. Each row corresponds to a set and each column to \nan intersection. Sets taht are part of that particular intersection are marked with a filled in dot and connected by a line. We can try to create the \nintersection matrix for the three sets used in the previous Venn diagramm. We start again by computing the intersections.\n*)\n\nlet intersections = Venn.ofSetList [|\u0022Action\u0022;\u0022Comedy\u0022;\u0022Drama\u0022|] [|actionSet;comedySet;dramaSet|]\n\n(**\nNow we need the sets that are part of each intersection. We also need a row position for each set in the matrix.\n*)\n\nlet intersectingSets =\n    intersections\n    |\u003E Map.toArray\n    |\u003E Array.map (snd \u003E\u003E (fun v -\u003E v.Label))\n    |\u003E Array.filter (List.isEmpty \u003E\u003E not)\n\n(***hide***)\nintersectingSets\n(*** include-it ***)\n\nlet setPositions =\n    [|\n        \u0022Action\u0022, 0\n        \u0022Comedy\u0022, 1\n        \u0022Drama\u0022 , 2\n    |]\n\n(**\nWith this information we can create the first column of the intersection matrix:\n*)\n\nlet createIntersectionMatrixPart (setPos: (string*int)[]) (iSet: string list) (position: int) =\n    // Creates the part of the intersection matrix representing the current intersection. \n    // The position on the y-Axis is based on the order the labels and sets are given in. \n    // The position on the x-Axis is based on the given position (determined by intersection size).\n    UpSetParts.createIntersectionPlotPart\n        position\n        iSet\n        setPos\n        25\n        (Color.fromKeyword DarkBlue)\n        (Color.fromKeyword LightBlue)\n\nlet intersectionMatrixPart =\n    createIntersectionMatrixPart\n        setPositions\n        intersectingSets.[0]\n        0\nintersectionMatrixPart\n|\u003E Chart.show\n(***hide***)\n\u0022\u0022\u0022\u003Cdiv id=\u0022e2ab3c14-e879-493a-b96a-c2d96ad35a47\u0022\u003E\u003C!-- Plotly chart will be drawn inside this DIV --\u003E\u003C/div\u003E\n\u003Cscript type=\u0022text/javascript\u0022\u003E\n\n          var renderPlotly_e2ab3c14e879493ab96ac2d96ad35a47 = function() {\n          var fsharpPlotlyRequire = requirejs.config({context:\u0027fsharp-plotly\u0027,paths:{plotly:\u0027https://cdn.plot.ly/plotly-2.6.3.min\u0027}}) || require;\n          fsharpPlotlyRequire([\u0027plotly\u0027], function(Plotly) {\n\n          var data = [{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022markers\u0022,\u0022x\u0022:[0,0],\u0022y\u0022:[1,2],\u0022marker\u0022:{\u0022color\u0022:\u0022rgba(173, 216, 230, 1.0)\u0022,\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{}},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022lines\u002Bmarkers\u0022,\u0022x\u0022:[0],\u0022y\u0022:[0],\u0022marker\u0022:{\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{\u0022color\u0022:\u0022rgba(0, 0, 139, 1.0)\u0022,\u0022width\u0022:5.0,\u0022dash\u0022:\u0022solid\u0022}}];\n          var layout = {\u0022width\u0022:600,\u0022height\u0022:600,\u0022template\u0022:{\u0022layout\u0022:{\u0022paper_bgcolor\u0022:\u0022white\u0022,\u0022plot_bgcolor\u0022:\u0022white\u0022,\u0022xaxis\u0022:{\u0022showline\u0022:true,\u0022zeroline\u0022:true},\u0022yaxis\u0022:{\u0022showline\u0022:true,\u0022zeroline\u0022:true}},\u0022data\u0022:{}}};\n          var config = {\u0022responsive\u0022:true};\n          Plotly.newPlot(\u0027e2ab3c14-e879-493a-b96a-c2d96ad35a47\u0027, data, layout, config);\n});\n          };\n          if ((typeof(requirejs) !==  typeof(Function)) || (typeof(requirejs.config) !== typeof(Function))) {\n              var script = document.createElement(\u0022script\u0022);\n              script.setAttribute(\u0022src\u0022, \u0022https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\u0022);\n              script.onload = function(){\n                  renderPlotly_e2ab3c14e879493ab96ac2d96ad35a47();\n              };\n              document.getElementsByTagName(\u0022head\u0022)[0].appendChild(script);\n          }\n          else {\n              renderPlotly_e2ab3c14e879493ab96ac2d96ad35a47();\n          }\n\u003C/script\u003E\n\u0022\u0022\u0022\n(***include-it-raw***)\n\n(**\nWe can apply this function now to all intersections and add the correct labels to the rows:\n*)\n\nlet intersectionMatrix =\n    intersectingSets\n    |\u003E Array.mapi (fun i iS -\u003E\n        createIntersectionMatrixPart\n            setPositions\n            iS\n            i\n    )\n    |\u003E Chart.combine\n    // Axis styling\n    |\u003E Chart.withYAxis (\n        LinearAxis.init(\n            ShowGrid=false,\n            ShowLine=false,\n            ShowTickLabels=true,\n            ZeroLine=false,\n            TickMode=StyleParam.TickMode.Array,\n            TickVals=[0 .. setPositions.Length - 1],\n            TickText=(setPositions |\u003E Array.map fst)\n        )\n    )\n    |\u003E Chart.withXAxis (\n        LinearAxis.init(\n            ShowGrid=false,\n            ShowLine=false,\n            ShowTickLabels=false,\n            ZeroLine=false,\n            Domain=StyleParam.Range.MinMax (0.4,1.)\n        )\n    )\n    |\u003E Chart.withLegend false\n\n(***hide***)\n\u0022\u0022\u0022\u003Cdiv id=\u002249cfa00c-cbb6-4fc6-aa5b-f7460fc43ab7\u0022\u003E\u003C!-- Plotly chart will be drawn inside this DIV --\u003E\u003C/div\u003E\n\u003Cscript type=\u0022text/javascript\u0022\u003E\n\n          var renderPlotly_49cfa00ccbb64fc6aa5bf7460fc43ab7 = function() {\n          var fsharpPlotlyRequire = requirejs.config({context:\u0027fsharp-plotly\u0027,paths:{plotly:\u0027https://cdn.plot.ly/plotly-2.6.3.min\u0027}}) || require;\n          fsharpPlotlyRequire([\u0027plotly\u0027], function(Plotly) {\n\n          var data = [{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022markers\u0022,\u0022x\u0022:[0,0],\u0022y\u0022:[1,2],\u0022marker\u0022:{\u0022color\u0022:\u0022rgba(173, 216, 230, 1.0)\u0022,\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{},\u0022xaxis\u0022:\u0022x4\u0022,\u0022yaxis\u0022:\u0022y4\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022lines\u002Bmarkers\u0022,\u0022x\u0022:[0],\u0022y\u0022:[0],\u0022marker\u0022:{\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{\u0022color\u0022:\u0022rgba(0, 0, 139, 1.0)\u0022,\u0022width\u0022:5.0,\u0022dash\u0022:\u0022solid\u0022},\u0022xaxis\u0022:\u0022x4\u0022,\u0022yaxis\u0022:\u0022y4\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022markers\u0022,\u0022x\u0022:[1],\u0022y\u0022:[2],\u0022marker\u0022:{\u0022color\u0022:\u0022rgba(173, 216, 230, 1.0)\u0022,\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{},\u0022xaxis\u0022:\u0022x4\u0022,\u0022yaxis\u0022:\u0022y4\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022lines\u002Bmarkers\u0022,\u0022x\u0022:[1,1],\u0022y\u0022:[0,1],\u0022marker\u0022:{\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{\u0022color\u0022:\u0022rgba(0, 0, 139, 1.0)\u0022,\u0022width\u0022:5.0,\u0022dash\u0022:\u0022solid\u0022},\u0022xaxis\u0022:\u0022x4\u0022,\u0022yaxis\u0022:\u0022y4\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022markers\u0022,\u0022x\u0022:[],\u0022y\u0022:[],\u0022marker\u0022:{\u0022color\u0022:\u0022rgba(173, 216, 230, 1.0)\u0022,\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{},\u0022xaxis\u0022:\u0022x4\u0022,\u0022yaxis\u0022:\u0022y4\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022lines\u002Bmarkers\u0022,\u0022x\u0022:[2,2,2],\u0022y\u0022:[0,1,2],\u0022marker\u0022:{\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{\u0022color\u0022:\u0022rgba(0, 0, 139, 1.0)\u0022,\u0022width\u0022:5.0,\u0022dash\u0022:\u0022solid\u0022},\u0022xaxis\u0022:\u0022x4\u0022,\u0022yaxis\u0022:\u0022y4\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022markers\u0022,\u0022x\u0022:[3],\u0022y\u0022:[1],\u0022marker\u0022:{\u0022color\u0022:\u0022rgba(173, 216, 230, 1.0)\u0022,\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{},\u0022xaxis\u0022:\u0022x4\u0022,\u0022yaxis\u0022:\u0022y4\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022lines\u002Bmarkers\u0022,\u0022x\u0022:[3,3],\u0022y\u0022:[0,2],\u0022marker\u0022:{\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{\u0022color\u0022:\u0022rgba(0, 0, 139, 1.0)\u0022,\u0022width\u0022:5.0,\u0022dash\u0022:\u0022solid\u0022},\u0022xaxis\u0022:\u0022x4\u0022,\u0022yaxis\u0022:\u0022y4\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022markers\u0022,\u0022x\u0022:[4,4],\u0022y\u0022:[0,2],\u0022marker\u0022:{\u0022color\u0022:\u0022rgba(173, 216, 230, 1.0)\u0022,\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{},\u0022xaxis\u0022:\u0022x4\u0022,\u0022yaxis\u0022:\u0022y4\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022lines\u002Bmarkers\u0022,\u0022x\u0022:[4],\u0022y\u0022:[1],\u0022marker\u0022:{\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{\u0022color\u0022:\u0022rgba(0, 0, 139, 1.0)\u0022,\u0022width\u0022:5.0,\u0022dash\u0022:\u0022solid\u0022},\u0022xaxis\u0022:\u0022x4\u0022,\u0022yaxis\u0022:\u0022y4\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022markers\u0022,\u0022x\u0022:[5],\u0022y\u0022:[0],\u0022marker\u0022:{\u0022color\u0022:\u0022rgba(173, 216, 230, 1.0)\u0022,\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{},\u0022xaxis\u0022:\u0022x4\u0022,\u0022yaxis\u0022:\u0022y4\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022lines\u002Bmarkers\u0022,\u0022x\u0022:[5,5],\u0022y\u0022:[1,2],\u0022marker\u0022:{\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{\u0022color\u0022:\u0022rgba(0, 0, 139, 1.0)\u0022,\u0022width\u0022:5.0,\u0022dash\u0022:\u0022solid\u0022},\u0022xaxis\u0022:\u0022x4\u0022,\u0022yaxis\u0022:\u0022y4\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022markers\u0022,\u0022x\u0022:[6,6],\u0022y\u0022:[0,1],\u0022marker\u0022:{\u0022color\u0022:\u0022rgba(173, 216, 230, 1.0)\u0022,\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{},\u0022xaxis\u0022:\u0022x4\u0022,\u0022yaxis\u0022:\u0022y4\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022lines\u002Bmarkers\u0022,\u0022x\u0022:[6],\u0022y\u0022:[2],\u0022marker\u0022:{\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{\u0022color\u0022:\u0022rgba(0, 0, 139, 1.0)\u0022,\u0022width\u0022:5.0,\u0022dash\u0022:\u0022solid\u0022},\u0022xaxis\u0022:\u0022x4\u0022,\u0022yaxis\u0022:\u0022y4\u0022}];\n          var layout = {\u0022width\u0022:600,\u0022height\u0022:600,\u0022template\u0022:{\u0022layout\u0022:{\u0022title\u0022:{\u0022x\u0022:0.05},\u0022font\u0022:{\u0022color\u0022:\u0022rgba(42, 63, 95, 1.0)\u0022},\u0022paper_bgcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022plot_bgcolor\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022,\u0022autotypenumbers\u0022:\u0022strict\u0022,\u0022colorscale\u0022:{\u0022diverging\u0022:[[0.0,\u0022#8e0152\u0022],[0.1,\u0022#c51b7d\u0022],[0.2,\u0022#de77ae\u0022],[0.3,\u0022#f1b6da\u0022],[0.4,\u0022#fde0ef\u0022],[0.5,\u0022#f7f7f7\u0022],[0.6,\u0022#e6f5d0\u0022],[0.7,\u0022#b8e186\u0022],[0.8,\u0022#7fbc41\u0022],[0.9,\u0022#4d9221\u0022],[1.0,\u0022#276419\u0022]],\u0022sequential\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]],\u0022sequentialminus\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]]},\u0022hovermode\u0022:\u0022closest\u0022,\u0022hoverlabel\u0022:{\u0022align\u0022:\u0022left\u0022},\u0022coloraxis\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}},\u0022geo\u0022:{\u0022showland\u0022:true,\u0022landcolor\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022,\u0022showlakes\u0022:true,\u0022lakecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022subunitcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022bgcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022},\u0022mapbox\u0022:{\u0022style\u0022:\u0022light\u0022},\u0022polar\u0022:{\u0022bgcolor\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022,\u0022radialaxis\u0022:{\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022ticks\u0022:\u0022\u0022},\u0022angularaxis\u0022:{\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022ticks\u0022:\u0022\u0022}},\u0022scene\u0022:{\u0022xaxis\u0022:{\u0022ticks\u0022:\u0022\u0022,\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridwidth\u0022:2.0,\u0022zerolinecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022backgroundcolor\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022,\u0022showbackground\u0022:true},\u0022yaxis\u0022:{\u0022ticks\u0022:\u0022\u0022,\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridwidth\u0022:2.0,\u0022zerolinecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022backgroundcolor\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022,\u0022showbackground\u0022:true},\u0022zaxis\u0022:{\u0022ticks\u0022:\u0022\u0022,\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridwidth\u0022:2.0,\u0022zerolinecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022backgroundcolor\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022,\u0022showbackground\u0022:true}},\u0022ternary\u0022:{\u0022aaxis\u0022:{\u0022ticks\u0022:\u0022\u0022,\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022},\u0022baxis\u0022:{\u0022ticks\u0022:\u0022\u0022,\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022},\u0022caxis\u0022:{\u0022ticks\u0022:\u0022\u0022,\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022},\u0022bgcolor\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022},\u0022xaxis\u0022:{\u0022title\u0022:{\u0022standoff\u0022:15},\u0022ticks\u0022:\u0022\u0022,\u0022automargin\u0022:true,\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022zerolinecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022zerolinewidth\u0022:2.0},\u0022yaxis\u0022:{\u0022title\u0022:{\u0022standoff\u0022:15},\u0022ticks\u0022:\u0022\u0022,\u0022automargin\u0022:true,\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022zerolinecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022zerolinewidth\u0022:2.0},\u0022annotationdefaults\u0022:{\u0022arrowcolor\u0022:\u0022#2a3f5f\u0022,\u0022arrowhead\u0022:0,\u0022arrowwidth\u0022:1},\u0022shapedefaults\u0022:{\u0022line\u0022:{\u0022color\u0022:\u0022rgba(42, 63, 95, 1.0)\u0022}},\u0022colorway\u0022:[\u0022rgba(99, 110, 250, 1.0)\u0022,\u0022rgba(239, 85, 59, 1.0)\u0022,\u0022rgba(0, 204, 150, 1.0)\u0022,\u0022rgba(171, 99, 250, 1.0)\u0022,\u0022rgba(255, 161, 90, 1.0)\u0022,\u0022rgba(25, 211, 243, 1.0)\u0022,\u0022rgba(255, 102, 146, 1.0)\u0022,\u0022rgba(182, 232, 128, 1.0)\u0022,\u0022rgba(255, 151, 255, 1.0)\u0022,\u0022rgba(254, 203, 82, 1.0)\u0022]},\u0022data\u0022:{\u0022bar\u0022:[{\u0022marker\u0022:{\u0022line\u0022:{\u0022color\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022,\u0022width\u0022:0.5},\u0022pattern\u0022:{\u0022fillmode\u0022:\u0022overlay\u0022,\u0022size\u0022:10,\u0022solidity\u0022:0.2}},\u0022error_x\u0022:{\u0022color\u0022:\u0022rgba(42, 63, 95, 1.0)\u0022},\u0022error_y\u0022:{\u0022color\u0022:\u0022rgba(42, 63, 95, 1.0)\u0022}}],\u0022barpolar\u0022:[{\u0022marker\u0022:{\u0022line\u0022:{\u0022color\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022,\u0022width\u0022:0.5},\u0022pattern\u0022:{\u0022fillmode\u0022:\u0022overlay\u0022,\u0022size\u0022:10,\u0022solidity\u0022:0.2}}}],\u0022carpet\u0022:[{\u0022aaxis\u0022:{\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022endlinecolor\u0022:\u0022rgba(42, 63, 95, 1.0)\u0022,\u0022minorgridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022startlinecolor\u0022:\u0022rgba(42, 63, 95, 1.0)\u0022},\u0022baxis\u0022:{\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022endlinecolor\u0022:\u0022rgba(42, 63, 95, 1.0)\u0022,\u0022minorgridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022startlinecolor\u0022:\u0022rgba(42, 63, 95, 1.0)\u0022}}],\u0022choropleth\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022},\u0022colorscale\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]]}],\u0022contour\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022},\u0022colorscale\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]]}],\u0022contourcarpet\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}],\u0022heatmap\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022},\u0022colorscale\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]]}],\u0022heatmapgl\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022},\u0022colorscale\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]]}],\u0022histogram\u0022:[{\u0022marker\u0022:{\u0022pattern\u0022:{\u0022fillmode\u0022:\u0022overlay\u0022,\u0022size\u0022:10,\u0022solidity\u0022:0.2}}}],\u0022histogram2d\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022},\u0022colorscale\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]]}],\u0022histogram2dcontour\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022},\u0022colorscale\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]]}],\u0022mesh3d\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}],\u0022parcoords\u0022:[{\u0022line\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022pie\u0022:[{\u0022automargin\u0022:true}],\u0022scatter\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022scatter3d\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}},\u0022line\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022scattercarpet\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022scattergeo\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022scattergl\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022scattermapbox\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022scatterpolar\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022scatterpolargl\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022scatterternary\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022surface\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022},\u0022colorscale\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]]}],\u0022table\u0022:[{\u0022cells\u0022:{\u0022fill\u0022:{\u0022color\u0022:\u0022rgba(235, 240, 248, 1.0)\u0022},\u0022line\u0022:{\u0022color\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022}},\u0022header\u0022:{\u0022fill\u0022:{\u0022color\u0022:\u0022rgba(200, 212, 227, 1.0)\u0022},\u0022line\u0022:{\u0022color\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022}}}]}},\u0022xaxis4\u0022:{\u0022showticklabels\u0022:false,\u0022showline\u0022:false,\u0022showgrid\u0022:false,\u0022zeroline\u0022:false,\u0022domain\u0022:[0.4,1.0]},\u0022yaxis4\u0022:{\u0022tickmode\u0022:\u0022array\u0022,\u0022tickvals\u0022:[0,1,2],\u0022ticktext\u0022:[\u0022Action\u0022,\u0022Comedy\u0022,\u0022Drama\u0022],\u0022showticklabels\u0022:true,\u0022showline\u0022:false,\u0022showgrid\u0022:false,\u0022zeroline\u0022:false},\u0022showlegend\u0022:false,\u0022xaxis2\u0022:{\u0022showticklabels\u0022:false,\u0022showline\u0022:false,\u0022showgrid\u0022:false,\u0022zeroline\u0022:false,\u0022domain\u0022:[0.4,1.0]},\u0022yaxis2\u0022:{\u0022tickmode\u0022:\u0022array\u0022,\u0022tickvals\u0022:[0,1,2],\u0022ticktext\u0022:[\u0022Action\u0022,\u0022Comedy\u0022,\u0022Drama\u0022],\u0022showticklabels\u0022:true,\u0022showline\u0022:false,\u0022showgrid\u0022:false,\u0022zeroline\u0022:false}};\n          var config = {\u0022responsive\u0022:true};\n          Plotly.newPlot(\u002749cfa00c-cbb6-4fc6-aa5b-f7460fc43ab7\u0027, data, layout, config);\n});\n          };\n          if ((typeof(requirejs) !==  typeof(Function)) || (typeof(requirejs.config) !== typeof(Function))) {\n              var script = document.createElement(\u0022script\u0022);\n              script.setAttribute(\u0022src\u0022, \u0022https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\u0022);\n              script.onload = function(){\n                  renderPlotly_49cfa00ccbb64fc6aa5bf7460fc43ab7();\n              };\n              document.getElementsByTagName(\u0022head\u0022)[0].appendChild(script);\n          }\n          else {\n              renderPlotly_49cfa00ccbb64fc6aa5bf7460fc43ab7();\n          }\n\u003C/script\u003E\n\u0022\u0022\u0022\n(***include-it-raw***)\n\n(**\nThe next part is a bar chart representing the size of each set. The bar for each set gets placed next to the row representing the set in the matrix.\n*)\n\nlet setSizeBar =\n    // Creates a bar chart with the set sizes\n    UpSetParts.createSetSizePlot\n        (setPositions |\u003E Array.map fst)\n        [|actionSet;comedySet;dramaSet|]\n        2.5\n        (Color.fromKeyword DarkBlue)\n        (0.,0.3)\n        (Font.init(StyleParam.FontFamily.Arial, Size=20.))\n\n[\n    setSizeBar\n    intersectionMatrix\n]\n|\u003E Chart.Grid (1,2)\n|\u003E Chart.withSize (900.,600.)\n\n(***hide***)\n\u0022\u0022\u0022\u003Cdiv id=\u002223ed001b-7de9-4b47-ad94-d48dd7847aa7\u0022\u003E\u003C!-- Plotly chart will be drawn inside this DIV --\u003E\u003C/div\u003E\n\u003Cscript type=\u0022text/javascript\u0022\u003E\n\n          var renderPlotly_23ed001b7de94b47ad94d48dd7847aa7 = function() {\n          var fsharpPlotlyRequire = requirejs.config({context:\u0027fsharp-plotly\u0027,paths:{plotly:\u0027https://cdn.plot.ly/plotly-2.6.3.min\u0027}}) || require;\n          fsharpPlotlyRequire([\u0027plotly\u0027], function(Plotly) {\n\n          var data = [{\u0022type\u0022:\u0022bar\u0022,\u0022x\u0022:[503,1200,1603],\u0022y\u0022:[\u0022Action\u0022,\u0022Comedy\u0022,\u0022Drama\u0022],\u0022orientation\u0022:\u0022h\u0022,\u0022marker\u0022:{\u0022color\u0022:\u0022rgba(0, 0, 139, 1.0)\u0022,\u0022pattern\u0022:{}},\u0022showlegend\u0022:false,\u0022xaxis\u0022:\u0022x\u0022,\u0022yaxis\u0022:\u0022y\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022markers\u0022,\u0022x\u0022:[0,0],\u0022y\u0022:[1,2],\u0022marker\u0022:{\u0022color\u0022:\u0022rgba(173, 216, 230, 1.0)\u0022,\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{},\u0022xaxis\u0022:\u0022x2\u0022,\u0022yaxis\u0022:\u0022y2\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022lines\u002Bmarkers\u0022,\u0022x\u0022:[0],\u0022y\u0022:[0],\u0022marker\u0022:{\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{\u0022color\u0022:\u0022rgba(0, 0, 139, 1.0)\u0022,\u0022width\u0022:5.0,\u0022dash\u0022:\u0022solid\u0022},\u0022xaxis\u0022:\u0022x2\u0022,\u0022yaxis\u0022:\u0022y2\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022markers\u0022,\u0022x\u0022:[1],\u0022y\u0022:[2],\u0022marker\u0022:{\u0022color\u0022:\u0022rgba(173, 216, 230, 1.0)\u0022,\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{},\u0022xaxis\u0022:\u0022x2\u0022,\u0022yaxis\u0022:\u0022y2\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022lines\u002Bmarkers\u0022,\u0022x\u0022:[1,1],\u0022y\u0022:[0,1],\u0022marker\u0022:{\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{\u0022color\u0022:\u0022rgba(0, 0, 139, 1.0)\u0022,\u0022width\u0022:5.0,\u0022dash\u0022:\u0022solid\u0022},\u0022xaxis\u0022:\u0022x2\u0022,\u0022yaxis\u0022:\u0022y2\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022markers\u0022,\u0022x\u0022:[],\u0022y\u0022:[],\u0022marker\u0022:{\u0022color\u0022:\u0022rgba(173, 216, 230, 1.0)\u0022,\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{},\u0022xaxis\u0022:\u0022x2\u0022,\u0022yaxis\u0022:\u0022y2\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022lines\u002Bmarkers\u0022,\u0022x\u0022:[2,2,2],\u0022y\u0022:[0,1,2],\u0022marker\u0022:{\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{\u0022color\u0022:\u0022rgba(0, 0, 139, 1.0)\u0022,\u0022width\u0022:5.0,\u0022dash\u0022:\u0022solid\u0022},\u0022xaxis\u0022:\u0022x2\u0022,\u0022yaxis\u0022:\u0022y2\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022markers\u0022,\u0022x\u0022:[3],\u0022y\u0022:[1],\u0022marker\u0022:{\u0022color\u0022:\u0022rgba(173, 216, 230, 1.0)\u0022,\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{},\u0022xaxis\u0022:\u0022x2\u0022,\u0022yaxis\u0022:\u0022y2\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022lines\u002Bmarkers\u0022,\u0022x\u0022:[3,3],\u0022y\u0022:[0,2],\u0022marker\u0022:{\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{\u0022color\u0022:\u0022rgba(0, 0, 139, 1.0)\u0022,\u0022width\u0022:5.0,\u0022dash\u0022:\u0022solid\u0022},\u0022xaxis\u0022:\u0022x2\u0022,\u0022yaxis\u0022:\u0022y2\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022markers\u0022,\u0022x\u0022:[4,4],\u0022y\u0022:[0,2],\u0022marker\u0022:{\u0022color\u0022:\u0022rgba(173, 216, 230, 1.0)\u0022,\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{},\u0022xaxis\u0022:\u0022x2\u0022,\u0022yaxis\u0022:\u0022y2\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022lines\u002Bmarkers\u0022,\u0022x\u0022:[4],\u0022y\u0022:[1],\u0022marker\u0022:{\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{\u0022color\u0022:\u0022rgba(0, 0, 139, 1.0)\u0022,\u0022width\u0022:5.0,\u0022dash\u0022:\u0022solid\u0022},\u0022xaxis\u0022:\u0022x2\u0022,\u0022yaxis\u0022:\u0022y2\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022markers\u0022,\u0022x\u0022:[5],\u0022y\u0022:[0],\u0022marker\u0022:{\u0022color\u0022:\u0022rgba(173, 216, 230, 1.0)\u0022,\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{},\u0022xaxis\u0022:\u0022x2\u0022,\u0022yaxis\u0022:\u0022y2\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022lines\u002Bmarkers\u0022,\u0022x\u0022:[5,5],\u0022y\u0022:[1,2],\u0022marker\u0022:{\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{\u0022color\u0022:\u0022rgba(0, 0, 139, 1.0)\u0022,\u0022width\u0022:5.0,\u0022dash\u0022:\u0022solid\u0022},\u0022xaxis\u0022:\u0022x2\u0022,\u0022yaxis\u0022:\u0022y2\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022markers\u0022,\u0022x\u0022:[6,6],\u0022y\u0022:[0,1],\u0022marker\u0022:{\u0022color\u0022:\u0022rgba(173, 216, 230, 1.0)\u0022,\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{},\u0022xaxis\u0022:\u0022x2\u0022,\u0022yaxis\u0022:\u0022y2\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022lines\u002Bmarkers\u0022,\u0022x\u0022:[6],\u0022y\u0022:[2],\u0022marker\u0022:{\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{\u0022color\u0022:\u0022rgba(0, 0, 139, 1.0)\u0022,\u0022width\u0022:5.0,\u0022dash\u0022:\u0022solid\u0022},\u0022xaxis\u0022:\u0022x2\u0022,\u0022yaxis\u0022:\u0022y2\u0022}];\n          var layout = {\u0022width\u0022:900,\u0022height\u0022:600,\u0022template\u0022:{\u0022layout\u0022:{\u0022title\u0022:{\u0022x\u0022:0.05},\u0022font\u0022:{\u0022color\u0022:\u0022rgba(42, 63, 95, 1.0)\u0022},\u0022paper_bgcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022plot_bgcolor\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022,\u0022autotypenumbers\u0022:\u0022strict\u0022,\u0022colorscale\u0022:{\u0022diverging\u0022:[[0.0,\u0022#8e0152\u0022],[0.1,\u0022#c51b7d\u0022],[0.2,\u0022#de77ae\u0022],[0.3,\u0022#f1b6da\u0022],[0.4,\u0022#fde0ef\u0022],[0.5,\u0022#f7f7f7\u0022],[0.6,\u0022#e6f5d0\u0022],[0.7,\u0022#b8e186\u0022],[0.8,\u0022#7fbc41\u0022],[0.9,\u0022#4d9221\u0022],[1.0,\u0022#276419\u0022]],\u0022sequential\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]],\u0022sequentialminus\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]]},\u0022hovermode\u0022:\u0022closest\u0022,\u0022hoverlabel\u0022:{\u0022align\u0022:\u0022left\u0022},\u0022coloraxis\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}},\u0022geo\u0022:{\u0022showland\u0022:true,\u0022landcolor\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022,\u0022showlakes\u0022:true,\u0022lakecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022subunitcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022bgcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022},\u0022mapbox\u0022:{\u0022style\u0022:\u0022light\u0022},\u0022polar\u0022:{\u0022bgcolor\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022,\u0022radialaxis\u0022:{\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022ticks\u0022:\u0022\u0022},\u0022angularaxis\u0022:{\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022ticks\u0022:\u0022\u0022}},\u0022scene\u0022:{\u0022xaxis\u0022:{\u0022ticks\u0022:\u0022\u0022,\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridwidth\u0022:2.0,\u0022zerolinecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022backgroundcolor\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022,\u0022showbackground\u0022:true},\u0022yaxis\u0022:{\u0022ticks\u0022:\u0022\u0022,\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridwidth\u0022:2.0,\u0022zerolinecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022backgroundcolor\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022,\u0022showbackground\u0022:true},\u0022zaxis\u0022:{\u0022ticks\u0022:\u0022\u0022,\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridwidth\u0022:2.0,\u0022zerolinecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022backgroundcolor\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022,\u0022showbackground\u0022:true}},\u0022ternary\u0022:{\u0022aaxis\u0022:{\u0022ticks\u0022:\u0022\u0022,\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022},\u0022baxis\u0022:{\u0022ticks\u0022:\u0022\u0022,\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022},\u0022caxis\u0022:{\u0022ticks\u0022:\u0022\u0022,\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022},\u0022bgcolor\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022},\u0022xaxis\u0022:{\u0022title\u0022:{\u0022standoff\u0022:15},\u0022ticks\u0022:\u0022\u0022,\u0022automargin\u0022:true,\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022zerolinecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022zerolinewidth\u0022:2.0},\u0022yaxis\u0022:{\u0022title\u0022:{\u0022standoff\u0022:15},\u0022ticks\u0022:\u0022\u0022,\u0022automargin\u0022:true,\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022zerolinecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022zerolinewidth\u0022:2.0},\u0022annotationdefaults\u0022:{\u0022arrowcolor\u0022:\u0022#2a3f5f\u0022,\u0022arrowhead\u0022:0,\u0022arrowwidth\u0022:1},\u0022shapedefaults\u0022:{\u0022line\u0022:{\u0022color\u0022:\u0022rgba(42, 63, 95, 1.0)\u0022}},\u0022colorway\u0022:[\u0022rgba(99, 110, 250, 1.0)\u0022,\u0022rgba(239, 85, 59, 1.0)\u0022,\u0022rgba(0, 204, 150, 1.0)\u0022,\u0022rgba(171, 99, 250, 1.0)\u0022,\u0022rgba(255, 161, 90, 1.0)\u0022,\u0022rgba(25, 211, 243, 1.0)\u0022,\u0022rgba(255, 102, 146, 1.0)\u0022,\u0022rgba(182, 232, 128, 1.0)\u0022,\u0022rgba(255, 151, 255, 1.0)\u0022,\u0022rgba(254, 203, 82, 1.0)\u0022]},\u0022data\u0022:{\u0022bar\u0022:[{\u0022marker\u0022:{\u0022line\u0022:{\u0022color\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022,\u0022width\u0022:0.5},\u0022pattern\u0022:{\u0022fillmode\u0022:\u0022overlay\u0022,\u0022size\u0022:10,\u0022solidity\u0022:0.2}},\u0022error_x\u0022:{\u0022color\u0022:\u0022rgba(42, 63, 95, 1.0)\u0022},\u0022error_y\u0022:{\u0022color\u0022:\u0022rgba(42, 63, 95, 1.0)\u0022}}],\u0022barpolar\u0022:[{\u0022marker\u0022:{\u0022line\u0022:{\u0022color\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022,\u0022width\u0022:0.5},\u0022pattern\u0022:{\u0022fillmode\u0022:\u0022overlay\u0022,\u0022size\u0022:10,\u0022solidity\u0022:0.2}}}],\u0022carpet\u0022:[{\u0022aaxis\u0022:{\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022endlinecolor\u0022:\u0022rgba(42, 63, 95, 1.0)\u0022,\u0022minorgridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022startlinecolor\u0022:\u0022rgba(42, 63, 95, 1.0)\u0022},\u0022baxis\u0022:{\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022endlinecolor\u0022:\u0022rgba(42, 63, 95, 1.0)\u0022,\u0022minorgridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022startlinecolor\u0022:\u0022rgba(42, 63, 95, 1.0)\u0022}}],\u0022choropleth\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022},\u0022colorscale\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]]}],\u0022contour\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022},\u0022colorscale\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]]}],\u0022contourcarpet\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}],\u0022heatmap\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022},\u0022colorscale\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]]}],\u0022heatmapgl\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022},\u0022colorscale\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]]}],\u0022histogram\u0022:[{\u0022marker\u0022:{\u0022pattern\u0022:{\u0022fillmode\u0022:\u0022overlay\u0022,\u0022size\u0022:10,\u0022solidity\u0022:0.2}}}],\u0022histogram2d\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022},\u0022colorscale\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]]}],\u0022histogram2dcontour\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022},\u0022colorscale\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]]}],\u0022mesh3d\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}],\u0022parcoords\u0022:[{\u0022line\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022pie\u0022:[{\u0022automargin\u0022:true}],\u0022scatter\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022scatter3d\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}},\u0022line\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022scattercarpet\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022scattergeo\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022scattergl\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022scattermapbox\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022scatterpolar\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022scatterpolargl\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022scatterternary\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022surface\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022},\u0022colorscale\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]]}],\u0022table\u0022:[{\u0022cells\u0022:{\u0022fill\u0022:{\u0022color\u0022:\u0022rgba(235, 240, 248, 1.0)\u0022},\u0022line\u0022:{\u0022color\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022}},\u0022header\u0022:{\u0022fill\u0022:{\u0022color\u0022:\u0022rgba(200, 212, 227, 1.0)\u0022},\u0022line\u0022:{\u0022color\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022}}}]}},\u0022yaxis\u0022:{},\u0022xaxis\u0022:{},\u0022showlegend\u0022:false,\u0022xaxis2\u0022:{\u0022showticklabels\u0022:false,\u0022showline\u0022:false,\u0022showgrid\u0022:false,\u0022zeroline\u0022:false,\u0022domain\u0022:[0.4,1.0]},\u0022yaxis2\u0022:{\u0022tickmode\u0022:\u0022array\u0022,\u0022tickvals\u0022:[0,1,2],\u0022ticktext\u0022:[\u0022Action\u0022,\u0022Comedy\u0022,\u0022Drama\u0022],\u0022showticklabels\u0022:true,\u0022showline\u0022:false,\u0022showgrid\u0022:false,\u0022zeroline\u0022:false},\u0022grid\u0022:{\u0022rows\u0022:1,\u0022columns\u0022:2,\u0022pattern\u0022:\u0022independent\u0022},\u0022xaxis3\u0022:{\u0022title\u0022:{\u0022text\u0022:\u0022Set Size\u0022,\u0022font\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:20.0}},\u0022range\u0022:[1603.0,0.0],\u0022domain\u0022:[0.0,0.3]},\u0022yaxis3\u0022:{\u0022range\u0022:[-0.5,2.5],\u0022showticklabels\u0022:false,\u0022showline\u0022:false,\u0022showgrid\u0022:false,\u0022zeroline\u0022:false},\u0022xaxis4\u0022:{\u0022showticklabels\u0022:false,\u0022showline\u0022:false,\u0022showgrid\u0022:false,\u0022zeroline\u0022:false,\u0022domain\u0022:[0.4,1.0]},\u0022yaxis4\u0022:{\u0022tickmode\u0022:\u0022array\u0022,\u0022tickvals\u0022:[0,1,2],\u0022ticktext\u0022:[\u0022Action\u0022,\u0022Comedy\u0022,\u0022Drama\u0022],\u0022showticklabels\u0022:true,\u0022showline\u0022:false,\u0022showgrid\u0022:false,\u0022zeroline\u0022:false}};\n          var config = {\u0022responsive\u0022:true};\n          Plotly.newPlot(\u002723ed001b-7de9-4b47-ad94-d48dd7847aa7\u0027, data, layout, config);\n});\n          };\n          if ((typeof(requirejs) !==  typeof(Function)) || (typeof(requirejs.config) !== typeof(Function))) {\n              var script = document.createElement(\u0022script\u0022);\n              script.setAttribute(\u0022src\u0022, \u0022https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\u0022);\n              script.onload = function(){\n                  renderPlotly_23ed001b7de94b47ad94d48dd7847aa7();\n              };\n              document.getElementsByTagName(\u0022head\u0022)[0].appendChild(script);\n          }\n          else {\n              renderPlotly_23ed001b7de94b47ad94d48dd7847aa7();\n          }\n\u003C/script\u003E\n\u0022\u0022\u0022\n(***include-it-raw***)\n\n(**\nLastly we come to our third basic part. It is a bar chart representing the size of each intersection, which it placed atop of the column representing each intersection.\n*)\n\nlet intersectionCounts =\n    intersections\n    |\u003E Map.toArray\n    |\u003E Array.map (fun (_,labelSet) -\u003E \n        labelSet.Label, labelSet.Set.Count\n    )\n    |\u003E Array.filter (fun (id,_) -\u003E not id.IsEmpty)\n\nlet intersectionSizeBar =\n    // Creates a bar chart with the intersection sizes\n    UpSetParts.createIntersectionSizePlots\n        intersectionCounts\n        (float intersectionCounts.Length - 0.5)\n        (Color.fromKeyword DarkBlue)\n        (0.4, 1.)\n        (Font.init(StyleParam.FontFamily.Arial, Size=20.))\n\n[|\n    Chart.Invisible()\n    intersectionSizeBar\n    setSizeBar\n    intersectionMatrix\n|]\n|\u003E Chart.Grid(2,2)\n|\u003E Chart.withSize (900.,600.)\n\n(***hide***)\n\u0022\u0022\u0022\u003Cdiv id=\u0022c988a9ba-ea3b-4e4b-8906-50df25881023\u0022\u003E\u003C!-- Plotly chart will be drawn inside this DIV --\u003E\u003C/div\u003E\n\u003Cscript type=\u0022text/javascript\u0022\u003E\n\n          var renderPlotly_c988a9baea3b4e4b890650df25881023 = function() {\n          var fsharpPlotlyRequire = requirejs.config({context:\u0027fsharp-plotly\u0027,paths:{plotly:\u0027https://cdn.plot.ly/plotly-2.6.3.min\u0027}}) || require;\n          fsharpPlotlyRequire([\u0027plotly\u0027], function(Plotly) {\n\n          var data = [{\u0022type\u0022:null,\u0022xaxis\u0022:\u0022x\u0022,\u0022yaxis\u0022:\u0022y\u0022},{\u0022type\u0022:\u0022bar\u0022,\u0022y\u0022:[348,55,10,90,919,216,1287],\u0022orientation\u0022:\u0022v\u0022,\u0022marker\u0022:{\u0022color\u0022:\u0022rgba(0, 0, 139, 1.0)\u0022,\u0022pattern\u0022:{}},\u0022showlegend\u0022:false,\u0022xaxis\u0022:\u0022x2\u0022,\u0022yaxis\u0022:\u0022y2\u0022},{\u0022type\u0022:\u0022bar\u0022,\u0022x\u0022:[503,1200,1603],\u0022y\u0022:[\u0022Action\u0022,\u0022Comedy\u0022,\u0022Drama\u0022],\u0022orientation\u0022:\u0022h\u0022,\u0022marker\u0022:{\u0022color\u0022:\u0022rgba(0, 0, 139, 1.0)\u0022,\u0022pattern\u0022:{}},\u0022showlegend\u0022:false,\u0022xaxis\u0022:\u0022x3\u0022,\u0022yaxis\u0022:\u0022y3\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022markers\u0022,\u0022x\u0022:[0,0],\u0022y\u0022:[1,2],\u0022marker\u0022:{\u0022color\u0022:\u0022rgba(173, 216, 230, 1.0)\u0022,\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{},\u0022xaxis\u0022:\u0022x4\u0022,\u0022yaxis\u0022:\u0022y4\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022lines\u002Bmarkers\u0022,\u0022x\u0022:[0],\u0022y\u0022:[0],\u0022marker\u0022:{\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{\u0022color\u0022:\u0022rgba(0, 0, 139, 1.0)\u0022,\u0022width\u0022:5.0,\u0022dash\u0022:\u0022solid\u0022},\u0022xaxis\u0022:\u0022x4\u0022,\u0022yaxis\u0022:\u0022y4\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022markers\u0022,\u0022x\u0022:[1],\u0022y\u0022:[2],\u0022marker\u0022:{\u0022color\u0022:\u0022rgba(173, 216, 230, 1.0)\u0022,\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{},\u0022xaxis\u0022:\u0022x4\u0022,\u0022yaxis\u0022:\u0022y4\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022lines\u002Bmarkers\u0022,\u0022x\u0022:[1,1],\u0022y\u0022:[0,1],\u0022marker\u0022:{\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{\u0022color\u0022:\u0022rgba(0, 0, 139, 1.0)\u0022,\u0022width\u0022:5.0,\u0022dash\u0022:\u0022solid\u0022},\u0022xaxis\u0022:\u0022x4\u0022,\u0022yaxis\u0022:\u0022y4\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022markers\u0022,\u0022x\u0022:[],\u0022y\u0022:[],\u0022marker\u0022:{\u0022color\u0022:\u0022rgba(173, 216, 230, 1.0)\u0022,\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{},\u0022xaxis\u0022:\u0022x4\u0022,\u0022yaxis\u0022:\u0022y4\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022lines\u002Bmarkers\u0022,\u0022x\u0022:[2,2,2],\u0022y\u0022:[0,1,2],\u0022marker\u0022:{\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{\u0022color\u0022:\u0022rgba(0, 0, 139, 1.0)\u0022,\u0022width\u0022:5.0,\u0022dash\u0022:\u0022solid\u0022},\u0022xaxis\u0022:\u0022x4\u0022,\u0022yaxis\u0022:\u0022y4\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022markers\u0022,\u0022x\u0022:[3],\u0022y\u0022:[1],\u0022marker\u0022:{\u0022color\u0022:\u0022rgba(173, 216, 230, 1.0)\u0022,\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{},\u0022xaxis\u0022:\u0022x4\u0022,\u0022yaxis\u0022:\u0022y4\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022lines\u002Bmarkers\u0022,\u0022x\u0022:[3,3],\u0022y\u0022:[0,2],\u0022marker\u0022:{\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{\u0022color\u0022:\u0022rgba(0, 0, 139, 1.0)\u0022,\u0022width\u0022:5.0,\u0022dash\u0022:\u0022solid\u0022},\u0022xaxis\u0022:\u0022x4\u0022,\u0022yaxis\u0022:\u0022y4\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022markers\u0022,\u0022x\u0022:[4,4],\u0022y\u0022:[0,2],\u0022marker\u0022:{\u0022color\u0022:\u0022rgba(173, 216, 230, 1.0)\u0022,\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{},\u0022xaxis\u0022:\u0022x4\u0022,\u0022yaxis\u0022:\u0022y4\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022lines\u002Bmarkers\u0022,\u0022x\u0022:[4],\u0022y\u0022:[1],\u0022marker\u0022:{\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{\u0022color\u0022:\u0022rgba(0, 0, 139, 1.0)\u0022,\u0022width\u0022:5.0,\u0022dash\u0022:\u0022solid\u0022},\u0022xaxis\u0022:\u0022x4\u0022,\u0022yaxis\u0022:\u0022y4\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022markers\u0022,\u0022x\u0022:[5],\u0022y\u0022:[0],\u0022marker\u0022:{\u0022color\u0022:\u0022rgba(173, 216, 230, 1.0)\u0022,\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{},\u0022xaxis\u0022:\u0022x4\u0022,\u0022yaxis\u0022:\u0022y4\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022lines\u002Bmarkers\u0022,\u0022x\u0022:[5,5],\u0022y\u0022:[1,2],\u0022marker\u0022:{\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{\u0022color\u0022:\u0022rgba(0, 0, 139, 1.0)\u0022,\u0022width\u0022:5.0,\u0022dash\u0022:\u0022solid\u0022},\u0022xaxis\u0022:\u0022x4\u0022,\u0022yaxis\u0022:\u0022y4\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022markers\u0022,\u0022x\u0022:[6,6],\u0022y\u0022:[0,1],\u0022marker\u0022:{\u0022color\u0022:\u0022rgba(173, 216, 230, 1.0)\u0022,\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{},\u0022xaxis\u0022:\u0022x4\u0022,\u0022yaxis\u0022:\u0022y4\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022lines\u002Bmarkers\u0022,\u0022x\u0022:[6],\u0022y\u0022:[2],\u0022marker\u0022:{\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{\u0022color\u0022:\u0022rgba(0, 0, 139, 1.0)\u0022,\u0022width\u0022:5.0,\u0022dash\u0022:\u0022solid\u0022},\u0022xaxis\u0022:\u0022x4\u0022,\u0022yaxis\u0022:\u0022y4\u0022}];\n          var layout = {\u0022xaxis\u0022:{\u0022showticklabels\u0022:false,\u0022showline\u0022:false,\u0022showgrid\u0022:false,\u0022zeroline\u0022:false},\u0022yaxis\u0022:{\u0022showticklabels\u0022:false,\u0022showline\u0022:false,\u0022showgrid\u0022:false,\u0022zeroline\u0022:false},\u0022width\u0022:900,\u0022height\u0022:600,\u0022template\u0022:{\u0022layout\u0022:{\u0022title\u0022:{\u0022x\u0022:0.05},\u0022font\u0022:{\u0022color\u0022:\u0022rgba(42, 63, 95, 1.0)\u0022},\u0022paper_bgcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022plot_bgcolor\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022,\u0022autotypenumbers\u0022:\u0022strict\u0022,\u0022colorscale\u0022:{\u0022diverging\u0022:[[0.0,\u0022#8e0152\u0022],[0.1,\u0022#c51b7d\u0022],[0.2,\u0022#de77ae\u0022],[0.3,\u0022#f1b6da\u0022],[0.4,\u0022#fde0ef\u0022],[0.5,\u0022#f7f7f7\u0022],[0.6,\u0022#e6f5d0\u0022],[0.7,\u0022#b8e186\u0022],[0.8,\u0022#7fbc41\u0022],[0.9,\u0022#4d9221\u0022],[1.0,\u0022#276419\u0022]],\u0022sequential\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]],\u0022sequentialminus\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]]},\u0022hovermode\u0022:\u0022closest\u0022,\u0022hoverlabel\u0022:{\u0022align\u0022:\u0022left\u0022},\u0022coloraxis\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}},\u0022geo\u0022:{\u0022showland\u0022:true,\u0022landcolor\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022,\u0022showlakes\u0022:true,\u0022lakecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022subunitcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022bgcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022},\u0022mapbox\u0022:{\u0022style\u0022:\u0022light\u0022},\u0022polar\u0022:{\u0022bgcolor\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022,\u0022radialaxis\u0022:{\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022ticks\u0022:\u0022\u0022},\u0022angularaxis\u0022:{\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022ticks\u0022:\u0022\u0022}},\u0022scene\u0022:{\u0022xaxis\u0022:{\u0022ticks\u0022:\u0022\u0022,\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridwidth\u0022:2.0,\u0022zerolinecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022backgroundcolor\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022,\u0022showbackground\u0022:true},\u0022yaxis\u0022:{\u0022ticks\u0022:\u0022\u0022,\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridwidth\u0022:2.0,\u0022zerolinecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022backgroundcolor\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022,\u0022showbackground\u0022:true},\u0022zaxis\u0022:{\u0022ticks\u0022:\u0022\u0022,\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridwidth\u0022:2.0,\u0022zerolinecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022backgroundcolor\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022,\u0022showbackground\u0022:true}},\u0022ternary\u0022:{\u0022aaxis\u0022:{\u0022ticks\u0022:\u0022\u0022,\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022},\u0022baxis\u0022:{\u0022ticks\u0022:\u0022\u0022,\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022},\u0022caxis\u0022:{\u0022ticks\u0022:\u0022\u0022,\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022},\u0022bgcolor\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022},\u0022xaxis\u0022:{\u0022title\u0022:{\u0022standoff\u0022:15},\u0022ticks\u0022:\u0022\u0022,\u0022automargin\u0022:true,\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022zerolinecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022zerolinewidth\u0022:2.0},\u0022yaxis\u0022:{\u0022title\u0022:{\u0022standoff\u0022:15},\u0022ticks\u0022:\u0022\u0022,\u0022automargin\u0022:true,\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022zerolinecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022zerolinewidth\u0022:2.0},\u0022annotationdefaults\u0022:{\u0022arrowcolor\u0022:\u0022#2a3f5f\u0022,\u0022arrowhead\u0022:0,\u0022arrowwidth\u0022:1},\u0022shapedefaults\u0022:{\u0022line\u0022:{\u0022color\u0022:\u0022rgba(42, 63, 95, 1.0)\u0022}},\u0022colorway\u0022:[\u0022rgba(99, 110, 250, 1.0)\u0022,\u0022rgba(239, 85, 59, 1.0)\u0022,\u0022rgba(0, 204, 150, 1.0)\u0022,\u0022rgba(171, 99, 250, 1.0)\u0022,\u0022rgba(255, 161, 90, 1.0)\u0022,\u0022rgba(25, 211, 243, 1.0)\u0022,\u0022rgba(255, 102, 146, 1.0)\u0022,\u0022rgba(182, 232, 128, 1.0)\u0022,\u0022rgba(255, 151, 255, 1.0)\u0022,\u0022rgba(254, 203, 82, 1.0)\u0022]},\u0022data\u0022:{\u0022bar\u0022:[{\u0022marker\u0022:{\u0022line\u0022:{\u0022color\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022,\u0022width\u0022:0.5},\u0022pattern\u0022:{\u0022fillmode\u0022:\u0022overlay\u0022,\u0022size\u0022:10,\u0022solidity\u0022:0.2}},\u0022error_x\u0022:{\u0022color\u0022:\u0022rgba(42, 63, 95, 1.0)\u0022},\u0022error_y\u0022:{\u0022color\u0022:\u0022rgba(42, 63, 95, 1.0)\u0022}}],\u0022barpolar\u0022:[{\u0022marker\u0022:{\u0022line\u0022:{\u0022color\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022,\u0022width\u0022:0.5},\u0022pattern\u0022:{\u0022fillmode\u0022:\u0022overlay\u0022,\u0022size\u0022:10,\u0022solidity\u0022:0.2}}}],\u0022carpet\u0022:[{\u0022aaxis\u0022:{\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022endlinecolor\u0022:\u0022rgba(42, 63, 95, 1.0)\u0022,\u0022minorgridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022startlinecolor\u0022:\u0022rgba(42, 63, 95, 1.0)\u0022},\u0022baxis\u0022:{\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022endlinecolor\u0022:\u0022rgba(42, 63, 95, 1.0)\u0022,\u0022minorgridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022startlinecolor\u0022:\u0022rgba(42, 63, 95, 1.0)\u0022}}],\u0022choropleth\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022},\u0022colorscale\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]]}],\u0022contour\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022},\u0022colorscale\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]]}],\u0022contourcarpet\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}],\u0022heatmap\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022},\u0022colorscale\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]]}],\u0022heatmapgl\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022},\u0022colorscale\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]]}],\u0022histogram\u0022:[{\u0022marker\u0022:{\u0022pattern\u0022:{\u0022fillmode\u0022:\u0022overlay\u0022,\u0022size\u0022:10,\u0022solidity\u0022:0.2}}}],\u0022histogram2d\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022},\u0022colorscale\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]]}],\u0022histogram2dcontour\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022},\u0022colorscale\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]]}],\u0022mesh3d\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}],\u0022parcoords\u0022:[{\u0022line\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022pie\u0022:[{\u0022automargin\u0022:true}],\u0022scatter\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022scatter3d\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}},\u0022line\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022scattercarpet\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022scattergeo\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022scattergl\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022scattermapbox\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022scatterpolar\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022scatterpolargl\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022scatterternary\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022surface\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022},\u0022colorscale\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]]}],\u0022table\u0022:[{\u0022cells\u0022:{\u0022fill\u0022:{\u0022color\u0022:\u0022rgba(235, 240, 248, 1.0)\u0022},\u0022line\u0022:{\u0022color\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022}},\u0022header\u0022:{\u0022fill\u0022:{\u0022color\u0022:\u0022rgba(200, 212, 227, 1.0)\u0022},\u0022line\u0022:{\u0022color\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022}}}]}},\u0022xaxis2\u0022:{\u0022range\u0022:[-0.5,6.5],\u0022showticklabels\u0022:false,\u0022showline\u0022:false,\u0022showgrid\u0022:false,\u0022zeroline\u0022:false,\u0022domain\u0022:[0.4,1.0]},\u0022yaxis2\u0022:{\u0022title\u0022:{\u0022text\u0022:\u0022Intersection Size\u0022,\u0022font\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:20.0}},\u0022tickmode\u0022:\u0022array\u0022,\u0022tickvals\u0022:[0,1,2],\u0022ticktext\u0022:[\u0022Action\u0022,\u0022Comedy\u0022,\u0022Drama\u0022],\u0022showticklabels\u0022:true,\u0022showline\u0022:false,\u0022showgrid\u0022:false,\u0022zeroline\u0022:false},\u0022showlegend\u0022:false,\u0022grid\u0022:{\u0022rows\u0022:2,\u0022columns\u0022:2,\u0022pattern\u0022:\u0022independent\u0022},\u0022xaxis3\u0022:{\u0022title\u0022:{\u0022text\u0022:\u0022Set Size\u0022,\u0022font\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:20.0}},\u0022range\u0022:[1603.0,0.0],\u0022domain\u0022:[0.0,0.3]},\u0022yaxis3\u0022:{\u0022range\u0022:[-0.5,2.5],\u0022showticklabels\u0022:false,\u0022showline\u0022:false,\u0022showgrid\u0022:false,\u0022zeroline\u0022:false},\u0022xaxis4\u0022:{\u0022showticklabels\u0022:false,\u0022showline\u0022:false,\u0022showgrid\u0022:false,\u0022zeroline\u0022:false,\u0022domain\u0022:[0.4,1.0]},\u0022yaxis4\u0022:{\u0022tickmode\u0022:\u0022array\u0022,\u0022tickvals\u0022:[0,1,2],\u0022ticktext\u0022:[\u0022Action\u0022,\u0022Comedy\u0022,\u0022Drama\u0022],\u0022showticklabels\u0022:true,\u0022showline\u0022:false,\u0022showgrid\u0022:false,\u0022zeroline\u0022:false}};\n          var config = {\u0022responsive\u0022:true};\n          Plotly.newPlot(\u0027c988a9ba-ea3b-4e4b-8906-50df25881023\u0027, data, layout, config);\n});\n          };\n          if ((typeof(requirejs) !==  typeof(Function)) || (typeof(requirejs.config) !== typeof(Function))) {\n              var script = document.createElement(\u0022script\u0022);\n              script.setAttribute(\u0022src\u0022, \u0022https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\u0022);\n              script.onload = function(){\n                  renderPlotly_c988a9baea3b4e4b890650df25881023();\n              };\n              document.getElementsByTagName(\u0022head\u0022)[0].appendChild(script);\n          }\n          else {\n              renderPlotly_c988a9baea3b4e4b890650df25881023();\n          }\n\u003C/script\u003E\n\u0022\u0022\u0022\n(***include-it-raw***)\n\n(**\n### Usage UpSet\n\nWe now have a basic UpSet plot. There is also a chart extension for UpSet plot in \u0060BioFSharp.Vis\u0060.\n*)\n\nChart.UpSet(\n    [|\u0022Action\u0022;\u0022Comedy\u0022;\u0022Drama\u0022|],\n    [|actionSet;comedySet;dramaSet|]\n)\n|\u003E Chart.withSize (1400, 800)\n|\u003E Chart.withTemplate ChartTemplates.light\n\n(***hide***)\n\u0022\u0022\u0022\u003Cdiv id=\u0022e6ff1f79-2632-4113-a3b9-9e629a38eaad\u0022\u003E\u003C!-- Plotly chart will be drawn inside this DIV --\u003E\u003C/div\u003E\n\u003Cscript type=\u0022text/javascript\u0022\u003E\n\n          var renderPlotly_e6ff1f7926324113a3b99e629a38eaad = function() {\n          var fsharpPlotlyRequire = requirejs.config({context:\u0027fsharp-plotly\u0027,paths:{plotly:\u0027https://cdn.plot.ly/plotly-2.6.3.min\u0027}}) || require;\n          fsharpPlotlyRequire([\u0027plotly\u0027], function(Plotly) {\n\n          var data = [{\u0022type\u0022:null,\u0022xaxis\u0022:\u0022x\u0022,\u0022yaxis\u0022:\u0022y\u0022},{\u0022type\u0022:\u0022bar\u0022,\u0022y\u0022:[1287,919,348,216,90,55,10],\u0022orientation\u0022:\u0022v\u0022,\u0022marker\u0022:{\u0022color\u0022:\u0022rgba(0, 0, 139, 1.0)\u0022,\u0022pattern\u0022:{}},\u0022showlegend\u0022:false,\u0022xaxis\u0022:\u0022x2\u0022,\u0022yaxis\u0022:\u0022y2\u0022},{\u0022type\u0022:\u0022bar\u0022,\u0022x\u0022:[503,1200,1603],\u0022y\u0022:[\u0022Action\u0022,\u0022Comedy\u0022,\u0022Drama\u0022],\u0022orientation\u0022:\u0022h\u0022,\u0022marker\u0022:{\u0022color\u0022:\u0022rgba(0, 0, 139, 1.0)\u0022,\u0022pattern\u0022:{}},\u0022showlegend\u0022:false,\u0022xaxis\u0022:\u0022x3\u0022,\u0022yaxis\u0022:\u0022y3\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022markers\u0022,\u0022x\u0022:[0,0],\u0022y\u0022:[0,1],\u0022marker\u0022:{\u0022color\u0022:\u0022rgba(173, 216, 230, 1.0)\u0022,\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{},\u0022showlegend\u0022:false,\u0022xaxis\u0022:\u0022x4\u0022,\u0022yaxis\u0022:\u0022y4\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022lines\u002Bmarkers\u0022,\u0022x\u0022:[0],\u0022y\u0022:[2],\u0022marker\u0022:{\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{\u0022color\u0022:\u0022rgba(0, 0, 139, 1.0)\u0022,\u0022width\u0022:5.0,\u0022dash\u0022:\u0022solid\u0022},\u0022showlegend\u0022:false,\u0022xaxis\u0022:\u0022x4\u0022,\u0022yaxis\u0022:\u0022y4\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022markers\u0022,\u0022x\u0022:[1,1],\u0022y\u0022:[0,2],\u0022marker\u0022:{\u0022color\u0022:\u0022rgba(173, 216, 230, 1.0)\u0022,\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{},\u0022showlegend\u0022:false,\u0022xaxis\u0022:\u0022x4\u0022,\u0022yaxis\u0022:\u0022y4\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022lines\u002Bmarkers\u0022,\u0022x\u0022:[1],\u0022y\u0022:[1],\u0022marker\u0022:{\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{\u0022color\u0022:\u0022rgba(0, 0, 139, 1.0)\u0022,\u0022width\u0022:5.0,\u0022dash\u0022:\u0022solid\u0022},\u0022showlegend\u0022:false,\u0022xaxis\u0022:\u0022x4\u0022,\u0022yaxis\u0022:\u0022y4\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022markers\u0022,\u0022x\u0022:[2,2],\u0022y\u0022:[1,2],\u0022marker\u0022:{\u0022color\u0022:\u0022rgba(173, 216, 230, 1.0)\u0022,\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{},\u0022showlegend\u0022:false,\u0022xaxis\u0022:\u0022x4\u0022,\u0022yaxis\u0022:\u0022y4\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022lines\u002Bmarkers\u0022,\u0022x\u0022:[2],\u0022y\u0022:[0],\u0022marker\u0022:{\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{\u0022color\u0022:\u0022rgba(0, 0, 139, 1.0)\u0022,\u0022width\u0022:5.0,\u0022dash\u0022:\u0022solid\u0022},\u0022showlegend\u0022:false,\u0022xaxis\u0022:\u0022x4\u0022,\u0022yaxis\u0022:\u0022y4\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022markers\u0022,\u0022x\u0022:[3],\u0022y\u0022:[0],\u0022marker\u0022:{\u0022color\u0022:\u0022rgba(173, 216, 230, 1.0)\u0022,\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{},\u0022showlegend\u0022:false,\u0022xaxis\u0022:\u0022x4\u0022,\u0022yaxis\u0022:\u0022y4\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022lines\u002Bmarkers\u0022,\u0022x\u0022:[3,3],\u0022y\u0022:[1,2],\u0022marker\u0022:{\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{\u0022color\u0022:\u0022rgba(0, 0, 139, 1.0)\u0022,\u0022width\u0022:5.0,\u0022dash\u0022:\u0022solid\u0022},\u0022showlegend\u0022:false,\u0022xaxis\u0022:\u0022x4\u0022,\u0022yaxis\u0022:\u0022y4\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022markers\u0022,\u0022x\u0022:[4],\u0022y\u0022:[1],\u0022marker\u0022:{\u0022color\u0022:\u0022rgba(173, 216, 230, 1.0)\u0022,\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{},\u0022showlegend\u0022:false,\u0022xaxis\u0022:\u0022x4\u0022,\u0022yaxis\u0022:\u0022y4\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022lines\u002Bmarkers\u0022,\u0022x\u0022:[4,4],\u0022y\u0022:[0,2],\u0022marker\u0022:{\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{\u0022color\u0022:\u0022rgba(0, 0, 139, 1.0)\u0022,\u0022width\u0022:5.0,\u0022dash\u0022:\u0022solid\u0022},\u0022showlegend\u0022:false,\u0022xaxis\u0022:\u0022x4\u0022,\u0022yaxis\u0022:\u0022y4\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022markers\u0022,\u0022x\u0022:[5],\u0022y\u0022:[2],\u0022marker\u0022:{\u0022color\u0022:\u0022rgba(173, 216, 230, 1.0)\u0022,\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{},\u0022showlegend\u0022:false,\u0022xaxis\u0022:\u0022x4\u0022,\u0022yaxis\u0022:\u0022y4\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022lines\u002Bmarkers\u0022,\u0022x\u0022:[5,5],\u0022y\u0022:[0,1],\u0022marker\u0022:{\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{\u0022color\u0022:\u0022rgba(0, 0, 139, 1.0)\u0022,\u0022width\u0022:5.0,\u0022dash\u0022:\u0022solid\u0022},\u0022showlegend\u0022:false,\u0022xaxis\u0022:\u0022x4\u0022,\u0022yaxis\u0022:\u0022y4\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022markers\u0022,\u0022x\u0022:[],\u0022y\u0022:[],\u0022marker\u0022:{\u0022color\u0022:\u0022rgba(173, 216, 230, 1.0)\u0022,\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{},\u0022showlegend\u0022:false,\u0022xaxis\u0022:\u0022x4\u0022,\u0022yaxis\u0022:\u0022y4\u0022},{\u0022type\u0022:\u0022scatter\u0022,\u0022mode\u0022:\u0022lines\u002Bmarkers\u0022,\u0022x\u0022:[6,6,6],\u0022y\u0022:[0,1,2],\u0022marker\u0022:{\u0022size\u0022:25,\u0022symbol\u0022:\u00220\u0022},\u0022line\u0022:{\u0022color\u0022:\u0022rgba(0, 0, 139, 1.0)\u0022,\u0022width\u0022:5.0,\u0022dash\u0022:\u0022solid\u0022},\u0022showlegend\u0022:false,\u0022xaxis\u0022:\u0022x4\u0022,\u0022yaxis\u0022:\u0022y4\u0022}];\n          var layout = {\u0022xaxis\u0022:{\u0022showticklabels\u0022:false,\u0022showline\u0022:false,\u0022showgrid\u0022:false,\u0022zeroline\u0022:false},\u0022yaxis\u0022:{\u0022showticklabels\u0022:false,\u0022showline\u0022:false,\u0022showgrid\u0022:false,\u0022zeroline\u0022:false},\u0022width\u0022:1400,\u0022height\u0022:800,\u0022template\u0022:{\u0022layout\u0022:{\u0022paper_bgcolor\u0022:\u0022white\u0022,\u0022plot_bgcolor\u0022:\u0022white\u0022,\u0022xaxis\u0022:{\u0022showline\u0022:true,\u0022zeroline\u0022:true},\u0022yaxis\u0022:{\u0022showline\u0022:true,\u0022zeroline\u0022:true}},\u0022data\u0022:{}},\u0022xaxis2\u0022:{\u0022range\u0022:[-0.5,6.5],\u0022showticklabels\u0022:false,\u0022showline\u0022:false,\u0022showgrid\u0022:false,\u0022zeroline\u0022:false,\u0022domain\u0022:[0.3,1.0]},\u0022yaxis2\u0022:{\u0022title\u0022:{\u0022text\u0022:\u0022Intersection Size\u0022,\u0022font\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:20.0}}},\u0022xaxis3\u0022:{\u0022title\u0022:{\u0022text\u0022:\u0022Set Size\u0022,\u0022font\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:20.0}},\u0022range\u0022:[1603.0,0.0],\u0022domain\u0022:[0.0,0.2]},\u0022yaxis3\u0022:{\u0022range\u0022:[-0.5,2.5],\u0022showticklabels\u0022:false,\u0022showline\u0022:false,\u0022showgrid\u0022:false,\u0022zeroline\u0022:false},\u0022xaxis4\u0022:{\u0022range\u0022:[-0.5,6.5],\u0022showticklabels\u0022:false,\u0022showline\u0022:false,\u0022showgrid\u0022:false,\u0022zeroline\u0022:false,\u0022domain\u0022:[0.3,1.0]},\u0022yaxis4\u0022:{\u0022range\u0022:[-0.5,2.5],\u0022tickmode\u0022:\u0022array\u0022,\u0022tickvals\u0022:[0,1,2],\u0022ticktext\u0022:[\u0022Action\u0022,\u0022Comedy\u0022,\u0022Drama\u0022],\u0022showticklabels\u0022:true,\u0022tickfont\u0022:{\u0022family\u0022:\u0022Arial\u0022,\u0022size\u0022:20.0},\u0022showline\u0022:false,\u0022showgrid\u0022:false,\u0022zeroline\u0022:false},\u0022grid\u0022:{\u0022rows\u0022:2,\u0022columns\u0022:2,\u0022pattern\u0022:\u0022independent\u0022}};\n          var config = {\u0022responsive\u0022:true};\n          Plotly.newPlot(\u0027e6ff1f79-2632-4113-a3b9-9e629a38eaad\u0027, data, layout, config);\n});\n          };\n          if ((typeof(requirejs) !==  typeof(Function)) || (typeof(requirejs.config) !== typeof(Function))) {\n              var script = document.createElement(\u0022script\u0022);\n              script.setAttribute(\u0022src\u0022, \u0022https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\u0022);\n              script.onload = function(){\n                  renderPlotly_e6ff1f7926324113a3b99e629a38eaad();\n              };\n              document.getElementsByTagName(\u0022head\u0022)[0].appendChild(script);\n          }\n          else {\n              renderPlotly_e6ff1f7926324113a3b99e629a38eaad();\n          }\n\u003C/script\u003E\n\u0022\u0022\u0022\n(***include-it-raw***)\n\n(**\nThe UpSet plot can be augmented by different charts representing features of the intersections. We just need a map connecting set elements to the \nfeature and a charting function with a title\n*)\n\nChart.UpSet(\n    [|\u0022Action\u0022;\u0022Comedy\u0022;\u0022Drama\u0022|],\n    [|actionSet;comedySet;dramaSet|],\n    [|(getScoreMap movieFrame)|],\n    [|(fun y -\u003E Chart.BoxPlot(Y = y)),\u0022Score\u0022|]\n)\n|\u003E Chart.withSize (1400., 800.)\n|\u003E Chart.withTemplate ChartTemplates.light\n\n(**\n![heatmap](../img/UpsetScore.png)\n*)\n\n(**\nWe can theoretically plot multiple different features with individual charts for our intersections. We also are not as limited in the number of sets as we are with \nVenn diagrams.Even though the UpSet plot gets also more complex with increasing number of sets, it less extreme than with a Venn diagram. Here is a small example:\n*)\n\n(**\n![heatmap](../img/UpsetComplex.png)\n*)"},{"uri":"/CSBlog/posts/5_devcontainer_arc.html","title":"VS Code Remote-Container and the ARC","content":"---\r\ntitle: VS Code Remote-Container and the ARC\r\ncategory: Learning resources\r\ncategoryindex: 4\r\nindex: 1\r\n---\r\n\r\n# VS Code Remote-Container and the ARC\r\n_[Jonathan Ott](https://github.com/Joott)_, _[Kevin Frey](https://github.com/Freymaurer)_ ~ _last updated: 2022-04-25_\r\n\r\nIn this blogpost I will deal with the question how computational data analysis could look like in a reproducible environment. You can read more about FAIR data and the important concepts on the [DataPLANT website](https://www.nfdi4plants.de). DataPLANT\u0027s research data management is built around the **ARC** ([Annotated Research Context](https://www.nfdi4plants.de/content/learn-more/annotated-research-context.html)), a folder and file structure to not only annotate research data but also to store and share it. Workflows and Runs also refer to computational data analysis done on the produced data. It is important that not only laboratory experiments are reproducible, but also the data analysis is repeatable. Therefore, i propose using Visual Studio Code [\u0060Remote-Containers\u0060](https://code.visualstudio.com/docs/remote/containers) for scripting in an ARC environment. This VS Code extensions allows us to connect with our personal VS Code instance to a VS Code Server instance inside a docker container. Inside of the docker container runs defined development environment, which allows any user to recreate the environment under which the data analysis was originally performed.\r\n\r\n\r\n## Requirements\r\n\r\n- Installed [Docker](https://docs.docker.com/get-docker/).\r\n- VS Code with [\u0060Remote-Containers\u0060](https://code.visualstudio.com/docs/remote/containers) extension.\r\n\r\n## Set up\r\n\r\nThis blogpost assumes that an ARC was already created (with the [ArcCommander](https://nfdi4plants.org/content/service.html)) and the data annotated (with [Swate](https://github.com/nfdi4plants/Swate#swate)). The example ARC I will link for this blogpost was reduced to a minimal version for ease of use.\r\n\r\nTo use remote containers we need 3 things:\r\n\r\n- a \u0060.devcontainer\u0060 folder with the following files:\r\n    - \u0060.devcontainer/devcontainer.json\u0060\r\n    - \u0060.devcontainer/settings.vscode.json\u0060\r\n- \u0060\u0060Dockerfile\u0060\u0060\r\n\r\nFor this example I will use a devcontainer \u0022designed\u0022 for an F# development environment. Let\u0027s start with a look at the devcontainer.json\r\n\r\n\u0060\u0060\u0060json\r\n// devcontainer.json\r\n{\r\n    \u0022name\u0022: \u0022FSharpCodeContainer\u0022,\r\n    \u0022dockerFile\u0022: \u0022../Dockerfile\u0022, // Path to Dockerfile with environment\r\n    \u0022appPort\u0022: [8080],\r\n    \u0022extensions\u0022: [ \r\n        \u0022ionide.ionide-fsharp\u0022, // F# extension\r\n        \u0022ms-vscode.csharp\u0022,\r\n        \u0022editorconfig.editorconfig\u0022,\r\n        \u0022ms-dotnettools.dotnet-interactive-vscode\u0022, // allows to create juypter notebooks with .NET kernel\r\n        \u0022cweijan.vscode-office\u0022 // can display .xlsx files in VS Code\r\n    ],\r\n} \r\n\u0060\u0060\u0060\r\n\r\nHere we can specify, which extensions the VS Code Server instance in our docker container should be running. We also reference the dockerfile which should be used to build the container. There we specify that we for example want to use the .NET sdk 6.0.\r\n\r\n\u0060\u0060\u0060Dockerfile\r\nFROM mcr.microsoft.com/dotnet/sdk:6.0\r\n# Dockerfile\r\n\r\n# Copy endpoint specific user settings into container to specify\r\n# .NET Core should be used as the runtime.\r\nCOPY .devcontainer/settings.vscode.json /root/.vscode-remote/data/Machine/settings.json\r\n\r\n# Install git, process tools\r\nRUN apt-get update \u0026\u0026 apt-get -y install git procps\r\n\r\nWORKDIR /workspaces/FSharpCodespace/dependencies\r\n\u0060\u0060\u0060\r\n\r\n\u003E \uD83D\uDC40 If you want to go along the example, you can download the minimal arc (\u0060\u0060arc-bio-bte-06-l-7-small.zip\u0060\u0060) from the [CSBlog repository](https://github.com/CSBiology/CSBlog).\r\n\r\n## Folderstructure\r\n\r\n\u003Cpre\u003Eassays\r\n    - VP21_WC\r\n        - dataset\r\n            - WCAnnotated_Ratio.txt\r\n        isa.assay.xlsx\r\nruns\r\n    - VP21_WC\r\n        data-analysis.ipynb\r\n        analyze.yml\r\n        data-analysis.fsx\r\nworkflows\r\n    - FSharpContainer\r\n        Dockerfile\r\n        - .devcontainer\r\n            - devcontainer.json\r\n            - settings.vscode.json\r\n    FSharpContainer.cwl\u003C/pre\u003E\r\n\r\nThere are more folders and files in there, but let\u0027s focus on these for now.\r\n\r\n- \u0060assays\\VP21_WC\\dataset\\WCAnnotated_Ratio.txt\u0060 is the file that contains the data. It is a tab separated file and contains the 14N/15N ratios ([ref](https://training.galaxyproject.org/training-material/topics/proteomics/tutorials/protein-quant-sil/tutorial.html)) for the proteins of interest.\r\n- \u0060assays\\VP21_WC\\isa.assay.xlsx\u0060 contains the metadata information for the experiment. Growthconditions, [QconCat proteins](https://pubmed.ncbi.nlm.nih.gov/26791984/), and biological replicates to name a few.\r\n- \u0060runs\\VP21_WC\\data-analysis.ipynb\u0060 is the notebook that contains the data analysis. It is a [Jupyter Notebook](https://jupyter-notebook.readthedocs.io/en/stable/) with .NET Kernel and F# code.\r\n- \u0060workflows\\FSharpContainer\\\u0060 contains the information for the VS Code remote container.\r\n\r\n## How to start\r\n\r\n1. Open the \u0060workflows\\FSharpContainer\\\u0060 folder on root level as workspace in VS Code.\r\n2. Click on the new bottom left \u0060\u003E\u003C\u0060 button and \u0060Reopen in container\u0060.\r\n3. This will create the container in docker (needs to be running) and binds the workspace and all changes into the docker dev environment.\r\n4. All changes are computed in the docker environment but reflected to the local files.\r\n\r\n## \u26A0\uFE0F .devcontainer MUST be on root level\r\n\r\nIn an *ARC* we don\u0027t want to have the .devcontainer folder in the root of the project. But instead we want to have it under *workflows*.\r\nSo to start the devcontainer with VS Code we need to open the exact parent folder of \u0060.devcontainer\u0060 folder. In this case \u0060arc-bio-bte-06-l-7-small/workflows/FSharpCodeContainer\u0060.\r\n\r\nThis means most files in the mounted volume will not be displayed in the VS Code file explorer.\r\n\r\nThis issue is also mentioned [here](https://github.com/microsoft/vscode-remote-release/issues/2413).\r\n\r\n### How to open/access not displayed files \r\n\r\n- \u003Ckbd\u003ECtrl\u003C/kbd\u003E \u002B \u003Ckbd\u003EO\u003C/kbd\u003E to use VS Code \u0060Open File...\u0060 . \r\n- \u0060File\u0060 -\u003E \u0060Open Folder...\u0060 to rescope workspace to base folder.\r\n\r\n\u003E \uD83D\uDC40 If you downloaded the example arc open \u0060runs\\VP21_WC\\data-analysis.ipynb\u0060 and follow along from there. All content will be the same, but you can run the code in the jupyter notebook.\r\n\r\n## Dependencies\r\n\r\nWe start by importing all required nuget packages.\r\n\r\n\u0060\u0060\u0060Fsharp\r\n#r \u0022nuget: Deedle, 2.3.0\u0022\r\n#r \u0022nuget: Plotly.NET, 2.0.0-preview.16\u0022\r\n#r \u0022nuget: Plotly.NET.Interactive, 2.0.0-preview.16\u0022\r\n#r \u0022nuget: FSharp.Stats, 0.4.1\u0022\r\n#r \u0022nuget: FSharpAux\u0022\r\n#r \u0022nuget: BIO-BTE-06-L-7_Aux, 0.0.9\u0022\r\n#r \u0022nuget: ISADotNet, 0.4.0-preview.4\u0022\r\n#r \u0022nuget: ISADotNet.XLSX, 0.4.0-preview.4\u0022\r\n#r \u0022nuget: ISADotNet.IO, 0.0.2\u0022\r\n\r\nopen Deedle\r\nopen Plotly.NET\r\nopen Plotly.NET.LayoutObjects\r\nopen FSharp.Stats\r\nopen System.IO\r\nopen FSharpAux\r\nopen BIO_BTE_06_L_7_Aux.Deedle_Aux\r\n\u0060\u0060\u0060\r\n\r\n## Review Assay file\r\n\r\nThe devcontainer has the \u0060Office Viewer\u0060 extension installed so we can open \u0060/workspaces/blogpost-playground/arc-bio-bte-06-l-7-small/assays/VP21_WC/isa.assay.xlsx\u0060 without leaving the VS Code environment!\r\n\r\nSome important things to note from the isa.assay.xlsx file.\r\n\r\n- In the \u0060Cultivation\u0060 sheet we can see that the experiment used 3 biological replicates.\r\n- In \u0060Protein Extraction\u0060 we can see, that the replicates were split into 4 samples each with different quantities of Q-Protein:\r\n    - \u0060Parameter [15N Calvin-Benson cycle QconCAT mass#3]\u0060\r\n    - \u0060Parameter [15N Photosynthesis QconCAT mass#4]\u0060\r\n- Any further processing was done equally on all those samples.\r\n- All data processing ends in one file \u0060../../assays/VP21_WC/dataset/WCAnnotated_Ratio.txt\u0060. \r\n    - \u26A0\uFE0F Normally the computational part should be better annotated, but for this minimal example we just have to know that the result file contains 14N/15N ratios for all peptides of the two used Q-Proteins. \u26A0\uFE0F\r\n\r\n## Data analysis\r\n\r\n### Data access\r\n\r\nWe start by accessing our data and reading it into an [Deedle frame](https://fslab.org/packages.html).\r\n\r\n\u0060\u0060\u0060fsharp\r\n[\u003CLiteral\u003E]\r\nlet dataPath = @\u0022../../assays/VP21_WC/dataset/WCAnnotated_Ratio.txt\u0022\r\n\r\n// quality control, check dilution series. In this example mean should always increase by times 5.\r\ntype Qprot =\r\n    | CBB\r\n    | PS\r\n\r\ntype PeptideIon = \r\n    {\r\n        ProteinGroup    : string  \r\n        Synonym         : string\r\n        StringSequence  : string\r\n        PepSequenceID   : int\r\n        Charge          : int\r\n        QProt           : Qprot\r\n    }\r\n\r\nlet rowKeyColNames = [|\u0022ProteinGroup\u0022; \u0022StringSequence\u0022; \u0022PepSequenceID\u0022; \u0022Charge\u0022; \u0022Synonym\u0022|]\r\n\r\n/// Open .xlsx file and index rows with column information. Then drop those columns\r\nlet readQuantAndProtFrame (path: string) =\r\n    let frame =\r\n        Frame.ReadCsv (path,true,separators=\u0022\\t\u0022)\r\n        |\u003E Frame.indexRowsUsing (fun s -\u003E\r\n            let pGroup = \r\n                s.GetAs\u003Cstring\u003E(\u0022ProteinGroup\u0022)\r\n                |\u003E String.split \u0027;\u0027\r\n                |\u003E Array.sort\r\n                |\u003E String.concat \u0022;\u0022\r\n            {\r\n                ProteinGroup = pGroup\r\n                StringSequence = s.GetAs\u003Cstring\u003E(\u0022StringSequence\u0022)\r\n                PepSequenceID = s.GetAs\u003Cint\u003E(\u0022PepSequenceID\u0022)\r\n                Charge = s.GetAs\u003Cint\u003E(\u0022Charge\u0022)\r\n                Synonym = s.GetAs\u003Cstring\u003E(\u0022Synonym\u0022)\r\n                QProt = \r\n                    match pGroup |\u003E String.contains \u0022QProt_newCBB\u0022, pGroup |\u003E String.contains \u0022QProt_newPS\u0022 with\r\n                    | true, false  -\u003E CBB\r\n                    | false, true  -\u003E PS  \r\n                    | anythingElse -\u003E failwith $\u0022Error! unexpected input in cbb ps matching: {anythingElse}\u0022 \r\n            }\r\n        )\r\n    /// The following works on a mutable frame, so we can drop all columns we don\u0027t need without forwarding the frame to the next column to drop.\r\n    rowKeyColNames \r\n    |\u003E Array.map (fun name -\u003E\r\n        frame.DropColumn(name)\r\n    )\r\n    |\u003E ignore\r\n    frame\r\n\r\nlet data = readQuantAndProtFrame dataPath\r\n\u0060\u0060\u0060\r\n\r\n#### Visualisation 1\r\n\r\nCheck the current state with:\r\n\r\n\u0060\u0060\u0060fsharp\r\ndata \r\n|\u003E Frame.take 10\r\n|\u003E formatAsTable 500\r\n\u0060\u0060\u0060\r\n\r\n\u003Cdetails\u003E\r\n\u003Csummary\u003EImage of table data\u003C/summary\u003E\r\n\r\n![Image of table data](../img/5_devcontainer_arc/data_table.png)\r\n\r\n\u003C/details\u003E\r\n\r\n#### Visualisation 2\r\n\r\nDisplay the same data as boxplot:\r\n\r\n\u0060\u0060\u0060fsharp\r\nlet createBoxPlot f =\r\n    f\r\n    |\u003E Frame.getNumericCols\r\n    |\u003E Series.map (fun k s -\u003E\r\n        let x,y =\r\n            s\r\n            |\u003E Series.values\r\n            |\u003E Seq.map (fun values -\u003E \r\n                string k, values\r\n            )\r\n            |\u003E Seq.unzip\r\n        Chart.BoxPlot(x, y, Orientation = StyleParam.Orientation.Vertical)\r\n    )\r\n    |\u003E Series.values\r\n    |\u003E Chart.combine\r\n    |\u003E Chart.withYAxisStyle(\u0022Ratio\u0022, MinMax=(0, 100))\r\n    |\u003E Chart.withLegend(false)\r\n\r\ncreateBoxPlot data\r\n\u0060\u0060\u0060\r\n\r\n\u003Cdetails\u003E\r\n\u003Csummary\u003EImage data as boxplot\u003C/summary\u003E\r\n\r\n![Image data as boxplot](../img/5_devcontainer_arc/data_boxplot.png)\r\n\r\n\u003C/details\u003E\r\n\r\n\u003Cbr\u003E\r\n\r\nThis plot shows the 15N/14N ratio of all detected Q-Protein peptides.\r\n\r\n### Metadata access\r\n\r\nNext we want to calculate the mean for all peptides over the biological replicates.\r\n\r\nWe want to access the metadata from \u0060assays\\VP21_WC\\isa.assay.xlsx\u0060. We can traverse the annotation tables of the .xlsx file with the [ISADotNet](https://github.com/nfdi4plants/ISADotNet) library.\r\n\r\n\u0060\u0060\u0060fsharp\r\nlet normalizeFileName (f: string) = if Path.HasExtension f then f else Path.ChangeExtension(f, \u0022wiff\u0022)\r\n\r\nopen ISADotNet\r\nopen arcIO.NET\r\n\r\nlet assayFilePath = @\u0022../../assays/VP21_WC/isa.assay.xlsx\u0022\r\n\r\n/// Put these functions into a separate code block. Run them once and then work in a new block, \r\n/// to avoid getting an error when you have the .xlsx file open somewhere else\r\nlet _,_,_,myAssayFile = XLSX.AssayFile.Assay.fromFile assayFilePath\r\n\r\nlet inOutMap = ISADotNet.createInOutMap myAssayFile\r\n\u0060\u0060\u0060\r\n\r\nBecause we know we have the sample names in the \u0060isa.assay.xlsx\u0060 files as column headers we can use them to access related metadata information.\r\n\r\n\u0060\u0060\u0060fsharp\r\n/// Get one specific value for an output column\r\nlet getColumnParam (sheetName:string) (paramName:string) (fileName: string) =\r\n    let fN = fileName |\u003E normalizeFileName \r\n    ISADotNet.tryGetParameter // can only get Parameter [xxx]\r\n        inOutMap \r\n        sheetName // Excel Sheet\r\n        paramName // Excel column name in []\r\n        fN // last \u0022Sample Name\u0022 in assay file, without file extension\r\n        myAssayFile\r\n    |\u003E Option.defaultValue \u0022\u0022\r\n    |\u003E String.split \u0027 \u0027\r\n    |\u003E Array.head\r\n    |\u003E float\r\n\r\n/// The column parameter names in isa.assay.xlsx\r\nlet cbc_qconcat = \u002215N Calvin-Benson cycle QconCAT mass #3\u0022\r\nlet ps_qconcat = \u002215N Photosynthesis QconCAT mass #4\u0022\r\n\r\nlet getCBC_qconcat sampleName = getColumnParam \u0022Protein extraction\u0022 cbc_qconcat sampleName\r\nlet getPS_qconcat sampleName = getColumnParam \u0022Protein extraction\u0022 ps_qconcat sampleName\r\n\r\n/// example access\r\ngetColumnParam \u0022Protein extraction\u0022 cbc_qconcat \u0022WCGr2_U1\u0022 // 0.9\r\n\u0060\u0060\u0060\r\n\r\n### Data transformation\r\n\r\nMap over all samples to extract Q-Protein quantities and calculate the mean over all samples with the same quantities _(the biological replicates)_.\r\n\r\n\u0060\u0060\u0060fsharp\r\nlet cbc_ps_data =\r\n    data\r\n    /// col keys as row keys\r\n    |\u003E Frame.transpose\r\n    /// Adjust keys to represent dilution series.\r\n    |\u003E Frame.mapRowKeys (fun rk -\u003E sprintf \u0022cbc: %A\u0022 (getCBC_qconcat rk), sprintf \u0022ps: %A\u0022 (getPS_qconcat rk), rk)\r\n    /// Calculate mean for all rows with the same value in cbc and ps q-protein quantity (aka. the biological replicates)\r\n    |\u003E Frame.applyLevel (fun (cbc,ps,_) -\u003E cbc, ps) Stats.mean\r\n    /// Swap rows keys back to column keys\r\n    |\u003E Frame.transpose\r\n\r\ncbc_ps_data\r\n|\u003E formatAsTable 500\r\n\u0060\u0060\u0060\r\n\r\n\u003Cdetails\u003E\r\n\u003Csummary\u003EImage data mean as table\u003C/summary\u003E\r\n\r\n![Image data mean as table](../img/5_devcontainer_arc/data_table_mean.png)\r\n\r\n\u003C/details\u003E\r\n\r\n\u003Cdetails\u003E\r\n\u003Csummary\u003EImage data mean as boxplot\u003C/summary\u003E\r\n\r\n![Image data mean as boxplot](../img/5_devcontainer_arc/data_boxplot_mean.png)\r\n\r\n\u003C/details\u003E\r\n\r\n\r\nLast we want to show only ratios for peptides related to a specific protein.\r\n\r\n\u0060\u0060\u0060fsharp\r\nlet plotPeptidesOf (ratios: Frame\u003CPeptideIon,string*string\u003E) (prot: string) = \r\n    ratios\r\n    /// filter data to only show peptides of the given protein\r\n    |\u003E Frame.filterRows (fun k s -\u003E k.Synonym.Contains prot || k.ProteinGroup.Contains prot)\r\n    |\u003E Frame.transpose\r\n    |\u003E Frame.getNumericCols\r\n    |\u003E Series.map (fun pep (values) -\u003E \r\n        let qprotAmounts,ratios,fileLabel =\r\n            values\r\n            |\u003E Series.map (fun dataColumnName ratio -\u003E \r\n                    let cbc, ps = dataColumnName\r\n                    let name = \r\n                        if pep.QProt = CBB then cbc else ps\r\n                        |\u003E String.split \u0027 \u0027\r\n                        |\u003E Array.last\r\n                    name, ratio, name\r\n            )\r\n            |\u003E Series.values\r\n            |\u003E Seq.unzip3\r\n        Chart.Point(qprotAmounts, ratios, MultiText = fileLabel)\r\n        |\u003E Chart.withTraceName (sprintf \u0022S:%s_C:%i\u0022 pep.StringSequence pep.Charge)\r\n        |\u003E Chart.withXAxisStyle(\u0022qProt Amount\u0022)\r\n        |\u003E Chart.withYAxisStyle(\u0022Ratio\u0022)\r\n        |\u003E Chart.withTitle (prot)\r\n        )\r\n    |\u003E Series.values\r\n    |\u003E Chart.combine\r\n\r\nplotPeptidesOf cbc_ps_data \u0022rbcL\u0022\r\n\u0060\u0060\u0060\r\n\r\n![Image: Measured ratios for all Q-Peptides related to rbcL](../img/5_devcontainer_arc/data_rbcL.png)\r\n\r\nThats it for a minimal example on how we can interopt VS Code remote containers and the ARC.\r\n\r\n## Verdict\r\n\r\n- Remote containers allow scripting in an ARC to be reproducible and often with a lower set of requirements (only VS Code with the extension and docker).\r\n- Scripting is handled intuitively (personal settings from VS Code are used), any files dropped into folderstructure are mounted to the container.\r\n- Still some minor issues:\r\n    - .devcontainer must be at root level for the active VS Code workspace.\r\n    - lacking some computational prowess (at least out of the box).\r\n\r\n## Outlook\r\n\r\nThe especially attentive reader might have noticed, that we listed some files under [folderstructure](#folderstructure), which were not mentioned yet.\r\n\r\n- \u0060workflows\\FSharpContainer.cwl\u0060\r\n- \u0060runs\\VP21_WC\\analyze.yml\u0060\r\n- \u0060runs\\VP21_WC\\data-analysis.fsx\u0060\r\n\r\nA finished **ARC** will feature a  [CWL](https://www.commonwl.org) file which is meant to automatically run the complete computational pipeline. Thus, it has a dual function as an indirect annotation of the computational process. A standard CWL file will create a docker container which will run the computational pipeline.\r\n\r\nIf we manage to create CWL, Dockerfile and VS Code devcontainer in a combined manner to reuse the docker file or even the dockercontainer we would reduce maintenance issues and further generalize the workflow.\r\n\r\nSo in the future it should be possible to run the CWL pipeline with the same settings as the VS Code remote container."},{"uri":"/CSBlog/posts/about.html","title":"About","content":"---\r\ntitle: About\r\ncategory: Overview\r\ncategoryindex: 0\r\nindex: 0\r\n---\r\n\r\n# About this Blog\r\n\r\nThe CSBlog is the official blog of the Computational Systems Biology workgroup at the TU Kaiserslautern. \r\n\r\nWe are a relatively young workgroup, with Jun. Prof. Dr. Timo Muehlhaus being the head of the group. Besides research, creating a functional library including a broad range of computational tools written in F# is one of our major interests. The set of libraries can be viewed and accessed on [GitHub](https://github.com/CSBiology).\r\n\r\n## Maintainers\r\nHeinrich Lukas Weil  \r\nContact: hl.weil@t-online.de  \r\nGitHub: https://github.com/HLWeil\r\n\r\nKevin Schneider  \r\nContact: kevin-schneider@mutagene.de  \r\nGitHub: https://github.com/kMutagene\r\n\r\n## Technical Information about this Blog\r\nThe current version was set up using [FSharp.Formatting](https://github.com/fsprojects/FSharp.Formatting).\r\nThe style of the Website is based on a customized version of [Bulma](https://github.com/CSBiology/CSBlog/blob/main/docs/content/fsdocs-custom.css)."},{"uri":"/CSBlog/posts/blogposts_overview.html","title":"Blog posts","content":"---\r\ntitle: Blog posts\r\ncategory: Overview\r\ncategoryindex: 0\r\nindex: 1\r\n---\r\n# BlogPosts\r\n\r\nThis is a chronological overview over every published Blog post on this page.The Blog posts themselves have categories which they are assigned to. The corresponding category is listed on the sidebar.\r\n\r\n* February 1, 2017: [Creating a Documentation](..\\posts\\documentation.html) (by [Heinrich Lukas Weil](https://github.com/HLWeil))\r\n* February 8, 2019: [Introduction to Data visualization using Plotly.NET](..\\posts\\WorkshopSeries_3_plotly.html) (by [Kevin Schneider](https://github.com/kMutagene))\r\n* September 3, 2021: [How to develop and use a JSON Schema](..\\posts\\0_how2JSONSchema.html) (by [Oliver Maus](https://github.com/omaus))\r\n* October 1, 2021: [How to use Fable](../posts/1_how2Fable.html) (by [Kevin Frey](https://github.com/Freymaurer))\r\n* November 11, 2021: [Modelling and visualizing sequence features with BioFSharp and Plotly.NET](../posts/3_sequence_features.html) (by [Kevin Schneider](https://github.com/kMutagene))\r\n* January 14, 2022: [Community detection or Principal Component Analysis - Different apporaches to analyze big datasets](../posts/Community_detection_or_Principal_Component_Analysis_- Different_apporaches_to_analyze_big_datasets.html) (by [Christopher Lux](https://github.com/LibraChris))\r\n* January 21, 2022: [q values](../posts/4_qvalues.html) (by [Benedikt Venn](https://github.com/bvenn))\r\n* March 18, 2022: [Console apps](../posts/consoleTools.html) (by [Oliver Maus](https://github.com/omaus))\r\n* April 22, 2022 [VS Code Remote-Container and the ARC](../posts/5_devcontainer_arc.html) (by [Kevin Frey](https://github.com/Freymaurer) and [Jonathan Ott](https://github.com/Joott))\r\n* April 29, 2022 [Computation expressions: Usage examples](../posts/Computation_expressions.html) (by [Heinrich Lukas Weil](https://github.com/HLWeil))\r\n"},{"uri":"/CSBlog/posts/Community_detection_or_Principal_Component_Analysis_- Different_apporaches_to_analyze_big_datasets.html","title":"Community detection or Principal Component Analysis - Different apporaches to analyze big datasets","content":"(**\n\n---\ntitle: Community detection or Principal Component Analysis - Different apporaches to analyze big datasets\ncategory: Implementation\ncategoryindex: 3\nindex: 4\n---\n*)\n(***hide***)\n\n#r \u0022nuget: FSharp.Data, 4.2.7\u0022\n#r \u0022nuget: Deedle, 2.5.0\u0022\n#r \u0022nuget: Cyjs.NET, 0.0.4\u0022\n#r \u0022nuget: Plotly.NET, 2.0.0-preview.16\u0022\n#r \u0022nuget: FSharp.FGL, 0.0.2\u0022\n#r \u0022nuget: FSharp.FGL.ArrayAdjacencyGraph, 0.0.2\u0022\n#r \u0022nuget: BioFSharp, 2.0.0-beta7\u0022\n#r \u0022nuget: BioFSharp.Stats, 2.0.0-beta6\u0022\n#r \u0022nuget: FSharp.Stats, 0.4.3\u0022\n\nopen Deedle\nopen Plotly.NET\nopen Plotly.NET.StyleParam\nopen FSharp.Data\nopen FSharp.Stats\nopen FSharp.Stats.Testing\nopen Cyjs.NET\nopen FSharp.FGL.ArrayAdjacencyGraph\nopen ArrayAdjacencyGraph.Algorithms.Louvain.Louvain\nopen BioFSharp\nopen BioFSharp.Stats\n\n(**\n# Community detection or Principal Component Analysis - Different apporaches to analyze big datasets\n_[Christopher Lux](https://github.com/LibraChris)_\n\n\n## Content\n- [Introduction](#Introduction)\n- [Loading the previous graph](#Loading-the-previous-graph)\n- [Modularity](#Modularity)\n- [PCA - Principal component analysis](#PCA-Principal-component-analysis)\n- [Ontology Enrichment](#Ontology-Enrichment)\n- [Further reading](#Further-reading)\n\n## Introduction\n\nThis tutorial picks up where the Fslab advanced tutorials [Correlation network](https://fslab.org/content/tutorials/009_correlation-network.html) ended.\n The goal of this blogpost is to showcase different methods to analyze big datasets:\nThe graph-Analysis apporach featuring community detection and ontology enrichment vs \nthe principal component analysis approach that reduces the dimensions of complex datasets.\n\nWe are using the following libraries:\n\n1. [Deedle](https://github.com/fslaborg/Deedle)\n2. [Plotly.NET](https://github.com/plotly/Plotly.NET/)\n3. [Cyjs.NET](https://github.com/fslaborg/Cyjs.NET)\n4. [BioFSharp](https://github.com/CSBiology/BioFSharp)\n5. [FSharp.Data](https://github.com/fsprojects/FSharp.Data)\n6. [FSharp.Stats](https://github.com/fslaborg/FSharp.Stats)\n7. [FSharp.FGL](https://github.com/CSBiology/FSharp.FGL)\n\n## Loading the previous graph \n\nWe start by recreating the graph depicted in [Correlation network](https://fslab.org/content/tutorials/009_correlation-network.html) .\nThe code for this is hidden since it is just the same as in the blogpost. \nIf you are interested in the creation of the correlation network you can read about it there.\n*)\n(***hide***)\n// Load the data \nlet rawData = Http.RequestString @\u0022https://raw.githubusercontent.com/HLWeil/datasets/main/data/ecoliGeneExpression.tsv\u0022\n\n// Create a deedle frame and index the rows with the values of the \u0022Key\u0022 column.\nlet rawFrame : Frame\u003Cstring,string\u003E = \n    Frame.ReadCsvString(rawData, separators = \u0022\\t\u0022)\n    |\u003E Frame.take 500\n    |\u003E Frame.indexRows \u0022Key\u0022\n\n// Get the rows as a matrix\nlet rows = \n    rawFrame \n    |\u003E Frame.toJaggedArray \n    |\u003E Matrix.ofJaggedArray\n\n// Create a correlation network by computing the pearson correlation between every two rows\nlet correlationNetwork = \n    Correlation.Matrix.rowWisePearson rows\n\nlet thr = 0.8203125\n\n// Set all correlations less strong than the critical threshold to 0\nlet filteredNetwork = \n    correlationNetwork\n    |\u003E Matrix.map (fun v -\u003E if (abs v) \u003E thr then v else 0.)\n\n// The styled vertices. The size is based on the degree of this vertex, so that more heavily connected nodes are emphasized\nlet cytoVertices = \n    rawFrame.RowKeys\n    |\u003E Seq.toList\n    |\u003E List.indexed\n    |\u003E List.choose (fun (i,v) -\u003E \n        let degree = \n            Matrix.getRow filteredNetwork i \n            |\u003E Seq.filter ((\u003C\u003E) 0.)\n            |\u003E Seq.length\n        let styling = [CyParam.label v; CyParam.weight (sqrt (float degree) \u002B 1. |\u003E (*) 10.)]\n\n        if degree \u003E 1 then \n            Some (Elements.node (string i) styling)\n        else \n            None\n    )\n\n// Styled edges\nlet cytoEdgesOG = \n    let len = filteredNetwork.Dimensions |\u003E fst\n    [\n        for i = 0 to len - 1 do\n            for j = i \u002B 1 to len - 1 do\n                let v = filteredNetwork.[i,j]\n                if v \u003C\u003E 0. then yield i,j,v\n    ]\n    |\u003E List.mapi (fun i (v1,v2,weight) -\u003E \n        let styling = [CyParam.weight (0.2 * weight)]\n        Elements.edge (\u0022e\u0022 \u002B string i) (string v1) (string v2) styling\n    )\n   \n// Resulting cytograph\nlet cytoGraph = \n\n    CyGraph.initEmpty ()\n    |\u003E CyGraph.withElements cytoVertices\n    |\u003E CyGraph.withElements cytoEdgesOG\n    |\u003E CyGraph.withStyle \u0022node\u0022 \n        [\n            CyParam.shape \u0022circle\u0022\n            CyParam.content =. CyParam.label\n            CyParam.width =. CyParam.weight\n            CyParam.height =. CyParam.weight\n            CyParam.Text.Align.center\n            CyParam.Border.color \u0022#A00975\u0022\n            CyParam.Border.width 3\n        ]\n    |\u003E CyGraph.withStyle \u0022edge\u0022 \n        [\n            CyParam.Line.color \u0022#3D1244\u0022\n        ]\n    |\u003E CyGraph.withLayout (Layout.initCose (Layout.LayoutOptions.Cose(NodeOverlap = 400,ComponentSpacing = 100)))  \n\n(**\n*)\n(***do-not-eval***)\ncytoGraph\n|\u003E CyGraph.withSize (1300,1000)\n|\u003E CyGraph.show\n(***hide***)\nSystem.IO.File.ReadAllText \u0022../files/ecoliGeneExpressionCyjs.html\u0022\n(*** include-it-raw ***)\n\n(**\nNow to recreate this graph in FSharp.FGl.ArrayAdjacencyGraph we simply have to create a vertex list and an edge list:\nOnce again we are using the data from [Correlation network](https://fslab.org/content/tutorials/009_correlation-network.html) .\n\n*)\n\n// Creates a vertex list based on the cytoVertices\nlet vertexList =\n    rawFrame.RowKeys\n    |\u003E Seq.toList\n    |\u003E List.indexed\n    |\u003E List.choose (fun (i,v) -\u003E \n        let degree = \n            Matrix.getRow filteredNetwork i \n            |\u003E Seq.filter ((\u003C\u003E) 0.)\n            |\u003E Seq.length\n        \n        if degree \u003E 1 then \n            Some (i,v)\n        else\n            None\n    )\n\n// Creates an edge list based on the cytoEdges\nlet edgeList =\n    let len = filteredNetwork.Dimensions |\u003E fst\n    [\n        for i = 0 to len - 1 do\n            for j = i \u002B 1 to len - 1 do\n                let v = filteredNetwork.[i,j]\n                if v \u003C\u003E 0. then yield i,j,v\n    ]\n\n// Creates an ArrayAdjacencyGraph based on vertexList and edgeList\nlet startingGraph = \n    Graph.createOfEdgelist vertexList edgeList\n\n(**\n\n## Modularity\n\nOne crucial factor in network science is the ability to represent large datasets in comprehensible graphs.\nBut when these graphs get to large, it is often very difficult to retrieve useful data from them without using some form of simplification.\nOne such method is the decomposition of networks into communities, sets of highly interconnected vertices.\nBy reducing the information of each of the vertices into these communities the size of the network can be reduced quite effectively.\nThe interdependence of the community-building vertices is often based on a functional module that the vertices belong to.\nAs such, the detection of communities is a really interesting factor in network science.\nThe Louvain-algorithm, published in [Blondel, Vincent D; Guillaume, Jean-Loup; Lambiotte, Renaud; Lefebvre, Etienne (9 October 2008). \u0022Fast unfolding of communities in large networks\u0022. Journal of Statistical Mechanics: Theory and Experiment. 2008 (10): P10008. arXiv:0803.0476. Bibcode:2008JSMTE..10..008B. doi:10.1088/1742-5468/2008/10/P10008. S2CID 334423](https://doi.org/10.1088%2F1742-5468%2F2008%2F10%2FP10008) ,\nis one of the possible algorithms for community detection and has been integrated into [FSharp.FGL](https://github.com/CSBiology/FSharp.FGL).\n\nHere we apply this algorithm on our existing graph:\n*)\n\n// The graph after being grouped into communities\nlet louvainGraph = \n    louvain startingGraph 0.1 \n\n\n(**\n\nThe Louvain algorithm reveals that the graph can be rationed into 34 communities. \nIn the following steps, we color the communities that feature more than 5 members using Cyjs.Net.\nThe code to create the Map which connected the community identifier and the color code has been omitted since it is not important for the rest of the data analysis.\n*)\n(***hide***)\n// Map that connected the community identifier with a color codex\nlet colorMap =\n    \n    // List of all communities that have more than 5 members\n    let communitiesToColorList = \n        Vertices.getLabelList louvainGraph\n        |\u003E Array.map (snd)\n        |\u003E Array.countBy (fun x -\u003E x)\n        |\u003E Array.choose(fun (m,count) -\u003E \n            if count \u003E 5 then\n                Some m\n            else\n                None\n            )\n        |\u003E List.ofArray\n\n    // List of hexadecimal colors. \n    [\n        \u0022#A00976\u0022;\n        \u0022#D68A0C\u0022;\n        \u0022#13478D\u0022;\n        \u0022#9ACB0B\u0022;\n        \u0022#C249A1\u0022;\n        \u0022#FFC360\u0022;\n        \u0022#4B74AD\u0022;\n        \u0022#CCF35C\u0022;\n        \u0022#640048\u0022;\n        \u0022#855300\u0022;\n        \u0022#052858\u0022;\n        \u0022#5E7F00\u0022;\n        \u0022#CC0000\u0022;\n        \u0022#FFC0CB\u0022\n\n    ]\n    |\u003E List.map2(fun community color -\u003E (community,color)) communitiesToColorList\n    |\u003E Map.ofList\n\n// Map that maps the gene name to the color it is associated with because of its community\nlet geneNameToColor =\n    \n    let louvainLabelToColor= \n        Vertices.getLabelList louvainGraph\n        |\u003E Array.countBy (fun (gene,x) -\u003E x)\n        |\u003E Array.choose(fun (m,count) -\u003E \n            if count \u003E 5 then\n                Some m\n            else\n                None\n            )\n        |\u003E Array.map(fun x -\u003E (x,colorMap.Item (x)))\n        |\u003E Map.ofArray\n\n    Vertices.getLabelList louvainGraph\n    |\u003E Array.map(fun (gene,label) -\u003E \n        (gene,\n            (if (Map.containsKey label louvainLabelToColor) then Map.find label louvainLabelToColor \n            else \u0022#808080\u0022))\n    )\n    |\u003E Map.ofArray\n\n// Table that showcases all communities, their member count and their connected color\nlet colorTable =\n    let header = [\u0022\u003Cb\u003ECommunity\u003C/b\u003E\u0022;\u0022Number of members\u0022;\u0022Color\u0022]\n    let rows = \n        Vertices.getLabelList louvainGraph\n        |\u003E Array.map (snd)\n        |\u003E Array.countBy (fun x -\u003E x)\n        |\u003E Array.sortByDescending (fun (community,count) -\u003E count)\n        |\u003E Array.map(fun (community,count) -\u003E [(sprintf \u0022%i\u0022 community);(sprintf \u0022%i\u0022 count);(if (Map.containsKey community colorMap) then (colorMap.Item community) else \u0022#808080\u0022)])\n    let cellColor =\n        Array.map(fun l -\u003E \n            let color = Color.fromString (List.last l)\n            [Color.fromString \u0022transparent\u0022;Color.fromString \u0022transparent\u0022;color]) rows\n        |\u003E Seq.transpose\n        |\u003E Seq.map Color.fromColors\n        |\u003E Color.fromColors\n    Chart.Table(\n        header,\n        rows,\n        HeaderOutlineColor = Color.fromString \u0022black\u0022,\n        CellsOutlineColor = Color.fromString \u0022black\u0022,\n        CellsOutlineWidth = 0.1,        \n        CellsFillColor = cellColor\n    )\n(**\n*)\n\n// The styled vertices. The color of the vertices is based on their community. The size is based on the degree of this vertex, so that more heavily connected nodes are emphasized.\nlet cytoVertices2 =\n    Array.map2 (fun v l -\u003E (v,l)) (louvainGraph.GetVertices()) (Vertices.getLabelList louvainGraph)\n    |\u003E List.ofArray\n    |\u003E List.map(fun (v,(l,c)) -\u003E\n        let styling = [CyParam.label l;if (Map.containsKey c colorMap) then CyParam.color (colorMap.Item (c));CyParam.weight (sqrt (float (Vertices.degree v louvainGraph)) \u002B 1. |\u003E (*) 10.)]\n        (Elements.node (string v) styling)\n\n    )\n\n// Creates an edge list based on the cytoEdges\nlet cytoEdges = \n    edgeList\n    |\u003E List.mapi (fun i (v1,v2,weight) -\u003E \n        let styling = [CyParam.weight (0.2 * weight)]\n        Elements.edge (\u0022e\u0022 \u002B string i) (string v1) (string v2) styling\n    )\n\n\n// Resulting cytograph\nlet cytoGraph2 = \n\n    CyGraph.initEmpty ()\n    |\u003E CyGraph.withElements cytoVertices2\n    |\u003E CyGraph.withElements cytoEdges\n    |\u003E CyGraph.withStyle \u0022node\u0022 \n        [\n            CyParam.shape \u0022circle\u0022\n            CyParam.content =. CyParam.label\n            CyParam.width =. CyParam.weight\n            CyParam.height =. CyParam.weight\n            CyParam.Text.Align.center\n            CyParam.Border.color =. CyParam.color\n            CyParam.Background.color =. CyParam.color\n        ]\n    |\u003E CyGraph.withStyle \u0022edge\u0022 \n        [\n            CyParam.Line.color \u0022#3D1244\u0022\n        ]\n    |\u003E CyGraph.withLayout (Layout.initCose (Layout.LayoutOptions.Cose(NodeOverlap = 400,ComponentSpacing = 100)))  \n\n(***do-not-eval***)\ncytoGraph2\n|\u003E CyGraph.withSize (1300,1000)\n|\u003E CyGraph.show\n\n(***hide***)\nSystem.IO.File.ReadAllText \u0022../files/ecoliGeneExpressionLouvainCyjs.html\u0022\n(*** include-it-raw ***)\n(***hide***)\nSystem.IO.File.ReadAllText \u0022../files/ecoliGeneExpressionColorTable.html\u0022\n(*** include-it-raw ***)\n\n(**\n*)\n(**\n## PCA - Principal component analysis\n\nAn entirely different approach to the graph analysis is given by the principal component analysis (PCA) . \nIt is most commonly used for dimensional reduction and to build predictive models.\nIn our case we reduce the dimensions of experiments from the data we used to create the first graph.\nMore accurately, the PCA reduces the dataset by highlighting its biggest variances.\nThe PCA algorithm can be found in [FSharp.Stats](https://fslab.org/FSharp.Stats/).\n*)\n\n// Calculations to get a PCA\nlet pcaData = \n    rows\n    |\u003E Matrix.transpose\n    |\u003E fun x -\u003E\n        let pcaComponents = ML.Unsupervised.PCA.compute (ML.Unsupervised.PCA.toAdjustCenter x) x\n\n        let pComponent1 = pcaComponents.[0]\n        let pComponent2 = pcaComponents.[1]\n        let x = pComponent1.EigenVector \n        let y = pComponent2.EigenVector \n        \n        let pcaCoordinates = Array.map2 (fun c1 c2 -\u003E (c1,c2)) x y\n        \n        pcaCoordinates\n\n(**\nUsing the calculated data, we color each gene based on its coloring in the Louvain-Graph to showcase the differences between the community detection and the PCA.\n*)\n\n// Creation of a pointchart based on the PCA data\nlet pcaChart = \n    let labelArray = rawFrame.RowKeys |\u003E Array.ofSeq\n\n    pcaData\n    |\u003E Array.mapi(fun i x -\u003E \n        (labelArray.[i]),Chart.Point(\n            [x],\n            Text=labelArray.[i],\n            MarkerColor=(\n                if (Map.containsKey (labelArray.[i]) geneNameToColor) then\n                    Color.fromHex(Map.find(labelArray.[i]) geneNameToColor)\n                else\n                    Color.fromString \u0022gray\u0022\n                    ))|\u003E Chart.withTraceName (labelArray.[i]))\n    |\u003E Array.choose(fun (l,chart) -\u003E if List.contains l (vertexList|\u003EList.map snd) then Some chart else None)\n    |\u003E Chart.combine\n    |\u003E Chart.withYAxisStyle(title=\u0022PC2\u0022)\n    |\u003E Chart.withXAxisStyle(title=\u0022PC1\u0022)\n\n(***do-not-eval***)\npcaChart\n|\u003E Chart.withSize(1300,1000)\n|\u003E Chart.show\n\n(***hide***)\nSystem.IO.File.ReadAllText \u0022../files/ecoliGeneExpressionPCA.html\u0022\n(***include-it-raw***)\n\n(**\nWhile some communities from the Louvain analysis can be spotted in the PCA chart on behalf of their clustering, most of them are widespread, a sign for a high variance in the original dataset.\nUsing a clustering algorithm would lead to a much different communities than the PCA revealed.\nA mathematical demonstration of this was deemed unnecessary, since most of the data points lie on top of another and would therefore be clustered together.\n\n## Ontology Enrichment\n\nOntology enrichment is a method to identify overrepresented transcript/protein groups in data sets. \nThe used annotation is based on the [AnnotationARC](https://github.com/CSBiology/ARCs/tree/main/AnnotationARC) .\nand the calculation is done via [BioFSharp.Stats](https://github.com/CSBiology/BioFSharp) .\nHere we try to find overrepresented protein functions in the Louvain communities to see if there is a functional modularity or\nif the communities are not that relevant, just like the PCA suggested. \n*)\n\n// Maps the gene name to its molecular function based on the AnnotationARC\nlet geneNameToMolecularFunction =\n    let d :Frame\u003Cstring,string\u003E=\n        Frame.ReadCsv(@\u0022../CSBlog/docs/files/ecoliGeneExpression.tsv\u0022,separators=\u0022\\t\u0022)\n        |\u003E Frame.take 500\n        |\u003E Frame.indexRows \u0022Key\u0022\n\n    let col :Series\u003Cstring,string\u003E=\n        Frame.getCol \u0022Gene ontology (molecular function)\u0022 d\n\n    Seq.map2 (fun name f -\u003E (name,f)) (col|\u003E Series.keys) (col|\u003E Series.values)\n    |\u003E Map.ofSeq\n\n// List of all the community identifiers we want to use for ontology enrichment\nlet moduleNumbers = [|0..34|]\n\n// Create the ontology terms on the gene data\nlet ontologyTerms =\n    Vertices.getLabelList louvainGraph\n    |\u003E Array.map(fun (name,community) -\u003E (name,[|1.223;2.123123|],community,(Map.find name geneNameToMolecularFunction)))\n    |\u003E Array.map (fun (name,data,modularityClass,annotation) -\u003E\n        let annotationProcessed = annotation.Replace (\u0022| \u0022,\u0022|\u0022)\n        OntologyEnrichment.createOntologyItem name annotationProcessed modularityClass data\n        |\u003E OntologyEnrichment.splitMultipleAnnotationsBy \u0027|\u0027 \n        )\n    |\u003E Seq.concat\n\n// Run the ontology enrichment on every enty in ontologyTerms\nlet gseaResult =\n    moduleNumbers\n    |\u003E Array.map (fun x -\u003E\n        x,OntologyEnrichment.CalcOverEnrichment x (Some 5) (Some 2) ontologyTerms\n        )\n\n// Return the enriched ontology entries \nlet ontologyResult = \n    gseaResult\n    |\u003E Array.map (fun (moduleNumber,moduleEnrichment) -\u003E\n        let pvalues = moduleEnrichment |\u003E Seq.map (fun x -\u003E x.PValue)\n        let pvaluesAdj = MultipleTesting.benjaminiHochbergFDR pvalues |\u003E Array.ofSeq\n        moduleEnrichment\n        |\u003E Seq.mapi (fun i x -\u003E x,pvaluesAdj.[i])\n        |\u003E Seq.filter (fun (item,pvalAdj) -\u003E item.PValue \u003C 0.05) \n        |\u003E Seq.sortByDescending (fun (item,pvalAdj) -\u003E item.NumberOfDEsInBin) \n        |\u003E Seq.map (fun (x,pvalAdj) -\u003E\n            //TotalUnivers was renamed to TotalUniverse\n            [sprintf \u0022%i\u0022 moduleNumber; x.OntologyTerm; sprintf \u0022%i\u0022 x.TotalUnivers; sprintf \u0022%i\u0022 x.TotalNumberOfDE; sprintf \u0022%i\u0022 x.NumberInBin;sprintf \u0022%i\u0022 x.NumberOfDEsInBin; sprintf \u0022%f\u0022x.PValue ;sprintf \u0022%f\u0022 pvalAdj]\n            \n            )\n        )\n    |\u003E Seq.choose(fun x -\u003E if Seq.isEmpty x then None else Some x)\n    |\u003E Seq.map (fun x -\u003E List.ofSeq x)\n    |\u003E List.ofSeq\n    |\u003E List.concat\n\n// Build a Plotly.Net table of the ontology enrichment     \nlet ontologyTable =\n    let header = [\u0022\u003Cb\u003ECommunity\u003C/b\u003E\u0022;\u0022OntologyTerm\u0022;\u0022TotalUniverse\u0022;\u0022TotalNumberOfDE\u0022;\u0022NumberInBin\u0022;\u0022NumberOfDEsInBin\u0022;\u0022PValue\u0022;\u0022pvalAdj\u0022]\n    let rows = \n        ontologyResult\n    Chart.Table(header, rows)\n\n\n(**\nThe result of the ontology enrichment can be seen in the following table. The headers are explained in the [BioFsharp doku](https://csbiology.github.io/BioFSharp//GSEA.html) .\n*)\n\n(***do-not-eval***)\nontologyTable\n|\u003E Chart.withSize(1300,1000)\n|\u003E Chart.show\n\n(***hide***)\nSystem.IO.File.ReadAllText \u0022../files/ecoliGeneExpressionOntologyTable.html\u0022\n(***include-it-raw***)\n\n\n\n(**\n\nFrom the table above I have chosen to show community 30 as an example of the differences between community detection and PCA.\n\n*)\n(***hide***)\nlet cytoVerticesOntology =\n    Array.map2 (fun v l -\u003E (v,l)) (louvainGraph.GetVertices()) (Vertices.getLabelList louvainGraph)\n    |\u003E List.ofArray\n    |\u003E List.map(fun (v,(l,c)) -\u003E\n        let styling = [CyParam.label l;if c=30 then CyParam.color (colorMap.Item (c));CyParam.weight (sqrt (float (louvainGraph.Degree v)) \u002B 1. |\u003E (*) 10.)]\n        (Elements.node (string v) styling)\n\n    )\nlet cytoGraphOntology = \n\n    CyGraph.initEmpty ()\n    |\u003E CyGraph.withElements cytoVerticesOntology\n    |\u003E CyGraph.withElements cytoEdges\n    |\u003E CyGraph.withStyle \u0022node\u0022 \n        [\n            CyParam.shape \u0022circle\u0022\n            CyParam.content =. CyParam.label\n            CyParam.width =. CyParam.weight\n            CyParam.height =. CyParam.weight\n            CyParam.Text.Align.center\n            CyParam.Border.color =. CyParam.color\n            CyParam.Background.color =. CyParam.color\n        ]\n    |\u003E CyGraph.withStyle \u0022edge\u0022 \n        [\n            CyParam.Line.color \u0022#3D1244\u0022\n        ]\n    |\u003E CyGraph.withLayout (Layout.initCose (Layout.LayoutOptions.Cose(NodeOverlap = 400,ComponentSpacing = 100)))  \n\n\n(***hide***)\ncytoGraphOntology\n|\u003E CyGraph.withSize (1300,1000)\n|\u003E Cyjs.NET.HTML.toCytoHTML\n(**\n\n![Community detection vs PCA](../img/communityVsPCA.jpg)\n\nWhile comparing community 30 with its PCA counterpart it becomes apparent \nthat this functional group would not have been detected based on clustering of the PCA.\nThis does not mean that the PCA is without its merits, but merely show that \nthe application of different approached to datasets can and will deliver different results.\nThe combination and comparison between different methods is an important step in data evaluation \nand should always be considered when thinking about your dataflow.\n\n## Further reading\n\n- [Blondel, Vincent D; Guillaume, Jean-Loup; Lambiotte, Renaud; Lefebvre, Etienne (9 October 2008). \u0022Fast unfolding of communities in large networks\u0022. Journal of Statistical Mechanics: Theory and Experiment. 2008 (10): P10008. arXiv:0803.0476. Bibcode:2008JSMTE..10..008B. doi:10.1088/1742-5468/2008/10/P10008. S2CID 334423](https://doi.org/10.1088%2F1742-5468%2F2008%2F10%2FP10008)\n- [Fslab](https://fslab.org)\n- [FSharp.FGL](https://github.com/CSBiology/FSharp.FGL)\n\n*)"},{"uri":"/CSBlog/posts/Computation_expressions.html","title":"Computation expressions: Usage examples","content":"(**\n\n---\ntitle: Computation expressions: Usage examples\ncategory: Implementation\ncategoryindex: 3\nindex: 5\n---\n\n\n# Computation expressions: Usage examples\n_[Heinrich Lukas Weil](https://github.com/hlweil)_\n\n## Content\n- [What are Computation expressions?](#What-are-Computation-expressions?)\n- [Bind based computation expressions](#Bind-based-computation-expressions)\n    - [Option builder](#Option-builder)\n- [Yield based computation expressions](#Yield-based-computation-expressions)\n    - [List builder](#List-builder)\n    - [Extended list builder](#Extended-List-builder)\n    - [Math builder](#Math-builder)\n- [Custom Operator based computation expressions](#Custom-Operator-based-computation-expressions)\n    - [Cake builder](#Cake-builder)\n- [Further reading](#Further-reading)\n\n## What are Computation expressions?\n\nThis question has been thoroughly answered in technical precision in many places over the internet (Check out [Further reading](#Further-reading)). My aim here is not trying to give a better explanation.\nInstead, in this blogpost, I want to focus on practicle use cases of computation expressions. So, to answer this question in the context of this blogbost:\n\n*Computation expressions are a versatile tool to express complex behaviour in a simple syntax*. \nYou open a computation expression (CE) with the following syntax: \n\n\u0060\u0060\u0060fsharp\ncomputation-expression-name {computation-expression-body}\n\u0060\u0060\u0060\n\nInside these \u0060{ }\u0060 brackets, an encapsulated environment with its own set of predefined rules exist. \nThese rules create a behaviour in the background that can be complex or simple, while exposing an easy to grasp language to the user. \nAn user can also create their own \u0060Computation expression builder\u0060 with it\u0060s own set of behaviours for every function. \nThere are around 20 different Members with predefined names a programmer can implement, exposing around 10 different keywords to the user. The full list can be found [here](https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/computation-expressions#creating-a-new-type-of-computation-expression).\n\nThe possibilities for different computation expressions are basically limitless. As a starting point for programmers new to computation expressions I therefore want to present a few often used ways for creating their own Computation Expression builder.\n\n## *Bind* based computation expressions\n\n### Introduction\n\nBind based computation expressions make especially use of the \u0060let!\u0060 and the \u0060return\u0060 keywords.\n\nHere is an example for an \u0027async\u0027 computation expression, taken from [the official F# reference](https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/computation-expressions):\n\n*)\n\nlet fetchAndDownload url =\n    // Keyword for starting the async computation expression\n    async {\n\n        let client = new System.Net.WebClient()\n\n        // client.AsyncDownloadData returns a value of type Async\u003Cbyte []\u003E.\n        // but by using the let! keyword, bound to \u0022data\u0022 is actually the unwrapped inner value of type byte [].\n        let! data = client.AsyncDownloadData url\n\n        // This unwrapped value can then conveniently fed into a follow up function.\n        let processedData = System.Text.Encoding.ASCII.GetString data\n\n        // The computation expression is finished by returning the result string.\n        // This value is again wrapped in the Async wrapper type, resulting in a return value of type Async\u003Cstring\u003E.\n        return processedData\n    }\n\n\n(**\n\nThe main idea here is, that you can work on the return values directly, rather than on the values wrapped into the Async type. \nAll the waiting for the thread to finish, wrapping and unwrapping is done implicitly for you, simply by using the \u0060let!\u0060 keyword.\n\n![](../img/CE_Bind.png)\n\n### Option builder\n\nSo, let\u0027s get started creating our own Computation expression builder. This option builder again can be\n\n*)\n\ntype OptionBuilder() =\n\n    // Return method wraps the final return value in an option\n    member this.Return(value : \u0027T) : \u0027T Option = \n        printfn $\u0022Return {value}\u0022\n        Some value\n\n    // Bind method contains logic for unwrapping the option value and expects an expression that has an option as an return value\n    member this.Bind(wrappedValue : \u0027T option, f : \u0027T -\u003E \u0027T option) : \u0027T option =\n        printfn $\u0022Bind {wrappedValue}\u0022\n        match wrappedValue with\n        | Some unwrappedValue -\u003E \n            f unwrappedValue\n        | None -\u003E None\n\n// For easier initialization of the computation expression\nlet option = OptionBuilder()\n\n(**\n\nThis is an very easy implementation that can be used to work on optional values in an easy way. \nInside the initialized computation expression, the \u0060Return\u0060 method can be called by using the \u0060return\u0060 keyword. The \u0060Bind\u0060 method can be called by using the \u0060let!\u0060 keyword.\n\n*)\n\nlet addOptions aO bO cO = \n\n    option {\n\n        let! a = aO\n        let! b = bO\n        let! c = cO\n\n        return (a \u002B b \u002B c)\n    }\n\n\naddOptions (Some 5) (Some 4) (Some 10)\n\n//Bind Some(5)\n//Bind Some(4)\n//Bind Some(10)\n//Return 19\n//val it : int option = Some 19\n\naddOptions (Some 5) None (Some 10)\n\n//Bind Some(5)\n//Bind \n//val it : int option = None\n\n\n(**\n\nAs expected, in the first case, the \u0060Bind\u0060 method gets called \u00603 times\u0060, and the resulting value is 19.\n\nIn the second case, the resulting \u0060None\u0060 was also expected. What is interesting to notice here, \nis that the \u0060Bind\u0060 method gets called only two times. \nThis can actually be a great feature, as in cases like these, you don\u0027t want the program to continue executing when something doesn\u0027t work out.\nThis is especially the case, when each computation is time intensive.\n\nA good explanation for why this happens can be found [here](https://en.wikibooks.org/wiki/F_Sharp_Programming/Computation_Expressions#:~:text=an%20imperative%20style.-,The%20Maybe%20Monad,-A%20well%2Dknown)\n\n\n## *Yield* based computation expressions\n\n### Introduction\n\nYield based computation expressions make especially use of the \u0060yield\u0060, \u0060yield!\u0060 and \u0060for\u0060 keywords. \n\nThe main aim here is usually collecting values and returning some kind of collection. \n\nHere is an example for a \u0060seq\u0060 computation expression:\n\n\n*)\n\nseq {\n    // Implicit yielding of single values\n    1\n    2\n    3\n    // Explicit yielding of a collection\n    yield! [4;5;6]\n}\n|\u003E Seq.toList\n\n(**\n\nThe basic structure of operations performed in the seq computation expression can be seen in the following picture.\nEach value get\u0027s yielded seperately and then combined step by step into a single sequence.\n\n![](../img/CE_Yield.png)  \n\n### List builder\n\nSo let\u0027s build our own bare minimum list builder:\n\n*)\n\ntype ListBuilder() = \n\n    /// This will be exposed to the user as \u0060yield\u0060\n    member this.Yield(v : \u0027T) = \n        printfn $\u0022Yield {v}\u0022\n        [v]\n\n    /// This will combine the yielded values in the background\n    member this.Combine(v1 : \u0027T list, v2 : \u0027T list) =\n        printfn $\u0022Combine {v1} with {v2}\u0022\n        v1 @ v2\n\n    /// This method is needed. It can be used to lazily evaluate the operations in the CE. Instead here, we just directly execute the given function.\n    member this.Delay(f : unit -\u003E \u0027T) = \n        printfn $\u0022Delay\u0022\n        let res = f()\n        printfn $\u0022Delay result: {res}\u0022\n        res\n\n// For easier initialization of the computation expression\nlet list = ListBuilder()\n\n(**\n\nSo let\u0027s test it out\n\n*)\n\nlist {\n    1\n    2\n    3\n}\n\n//Delay\n//Yield 1\n//Delay\n//Yield 2\n//Delay\n//Yield 3\n//Delay result: [3]\n//Combine [2] with [3]\n//Delay result: [2; 3]\n//Combine [1] with [2; 3]\n//Delay result: [1; 2; 3]\n//val it : int list = [1; 2; 3]\n\n(**\n\nSomething to note here is that the \u0060yielding\u0060 takes place from \u0060top to bottom\u0060, while the \u0060combining\u0060 is actually done from \u0060bottom to top\u0060.\n\n### Extended list builder\n\nOf course in many cases you don\u0027t only want to yield single values but also expect more complex programming constructs to be usable. \nIn the following is shown an extended version of the previously implemented list builder:\n\n*)\n\n\ntype ExtendedListBuilder() = \n\n    /// This will be exposed to the user as \u0060yield\u0060\n    member this.Yield(v : \u0027T) = \n        printfn $\u0022Yield {v}\u0022\n        [v]\n\n    /// This will combine the yielded values in the background\n    member this.Combine(v1 : \u0027T list, v2 : \u0027T list) =\n        printfn $\u0022Combine {v1} with {v2}\u0022\n        v1 @ v2\n\n    /// This method is needed. It can be used to lazily evaluate the operations in the CE. Instead here, we just directly execute the given function.\n    member this.Delay(f : unit -\u003E \u0027T) = \n        printfn $\u0022Delay\u0022\n        let res = f()\n        printfn $\u0022Delay result: {res}\u0022\n        res\n\n    /// Is called in empty else branches\n    member this.Zero() = \n        printfn \u0022Zero\u0022\n        []\n\n    /// Allows for using for loops in the computation expression\n    member this.For(vs : \u0027U seq, f : \u0027U -\u003E \u0027T list) =\n        printfn $\u0022For\u0022\n        vs\n        |\u003E Seq.collect f\n        |\u003E Seq.toList\n\n    /// This will allow for using the yield! method\n    member this.YieldFrom(vs : \u0027T list) =\n        printfn $\u0022YieldFrom {vs}\u0022\n        vs\n\n\n// For easier initialization of the computation expression\nlet extList = ExtendedListBuilder()\n\n(**\n\nAgain let\u0027s test it out.\n\n*)\n\nextList {\n    1\n    2\n    \n    for i in [3;4] do\n        i\n    \n    yield! [5;6]\n\n    if true then 7\n\n}\n\n//Delay\n//Yield 1\n//Delay\n//Yield 2\n//Delay\n//For\n//Yield 3\n//Yield 4\n//Delay\n//YieldFrom [5; 6]\n//Delay\n//Yield 7\n//Delay result: [7]\n//Combine [5; 6] with [7]\n//Delay result: [5; 6; 7]\n//Combine [3; 4] with [5; 6; 7]\n//Delay result: [3; 4; 5; ... ]\n//Combine [2] with [3; 4; 5; ... ]\n//Delay result: [2; 3; 4; ... ]\n//Combine [1] with [2; 3; 4; ... ]\n//Delay result: [1; 2; 3; ... ]\n//val it : int list = [1; 2; 3; 4; 5; 6; 7]\n\n\n(**\n\nOne important thing to note here: The values returned in the \u0060for\u0060 expression actually get \u0060yielded\u0060 by the \u0060Yield\u0060 method. \nIn the case of \u0060yield!\u0060, only the \u0060YieldFrom\u0060 method gets called. This means, that the input of type \u0060\u0027U\u0060 in the \u0060For\u0060 method is actually already a yielded value.\n\n### Math builder\n\nAnother thing you can do is to add a \u0060Run\u0060 method. This method will be executed at the end of the Computation expression.\nWe can also combine this with the ability of the Computation expression to store a state in itself. By this we can control what exactly Run will do:\n\n\n*)\n\n/// Used to specify which mathematical operation should be applied on the float list to reduce it\ntype MathOperation = \n    | Sum\n    | Multiply\n    | Custom of (float list -\u003E float)\n\n    /// Apply the given operation on the float list, resulting in a single float\n    member this.Apply(vals : float list) =\n\n        match this with\n        | Sum -\u003E vals |\u003E List.sum\n        | Multiply -\u003E vals |\u003E List.reduce (fun a b -\u003E a * b)\n        | Custom operation -\u003E operation vals\n\n\ntype MathBuilder() = \n\n    // Mutable math operation state, default value is Sum\n    let mutable operation = Sum\n\n    /// When the user yields a value of type MathOperation, this will not be added to the list of values but overwrite the state of the operation variable\n    member this.Yield(newOperation : MathOperation) =\n        operation \u003C- newOperation\n        []\n\n    /// User can yield ints\n    member this.Yield(v : int) = \n        printfn $\u0022Yield {v}\u0022\n        [float v]\n\n    /// User can yield floats\n    member this.Yield(v : float) = \n        printfn $\u0022Yield {v}\u0022\n        [v]\n\n    /// This will combine the yielded values in the background\n    member this.Combine(v1 : float list, v2 : float list) =\n        printfn $\u0022Combine {v1} with {v2}\u0022\n        v1 @ v2\n\n    /// This method is needed. It can be used to lazily evaluate the operations in the CE. Instead here, we just directly execute the given function.\n    member this.Delay(f : unit -\u003E \u0027T) = \n        printfn $\u0022Delay\u0022\n        let res = f()\n        printfn $\u0022Delay result: {res}\u0022\n        res\n\n    /// Is called in empty else branches\n    member this.Zero() = \n        printfn \u0022Zero\u0022\n        []\n\n    /// Allows for using for loops in the computation expression\n    member this.For(vs : \u0027U seq, f : \u0027U -\u003E float list) =\n        printfn $\u0022For\u0022\n        vs\n        |\u003E Seq.collect f\n        |\u003E Seq.toList\n\n    /// This will allow for using the yield! method\n    member this.YieldFrom(vs : \u0027T list) =\n        printfn $\u0022YieldFrom {vs}\u0022\n        vs\n\n    /// This will run the operation on the final float list, returning a single float as output of the compuation expression.\n    member this.Run(vs : float list) =\n        printfn $\u0022Run {vs}\u0022\n        operation.Apply vs\n\n// For easier initialization of the computation expression\nlet math = MathBuilder()\n\n(**\n\nSo let\u0027s test this out\n*)\n\nmath {\n    1\n    2\n    3\n}\n\n// Results in 6\n\nlet factorial x =\n    math {\n        Multiply\n        for i = 1 to x do\n            i\n    }\n\nfactorial 4\n\n//Delay\n//Delay\n//For\n//Yield 1\n//Yield 2\n//Yield 3\n//Yield 4\n//Delay result: [1; 2; 3; ... ]\n//Combine [] with [1; 2; 3; ... ]\n//Delay result: [1; 2; 3; ... ]\n//Run [1; 2; 3; ... ]\n//val it : float = 24.0\n\n(**\n\nAs you can see this approach can be used to further tune the Computation expression in a very generic way.\n\n## *Custom Operator* based computation expressions\n\n### Cake builder\n\nBesides the basic keywords shared between all computation expressions, one can also define their own keywords by using the \u0060CustomOperation\u0060 class.\nMethods with this \n\n*)\n\ntype Cake =\n\n    {\n        Size : int\n        Filling : string\n        PackagedAsPresent: bool\n    }\n\n    static member Default = \n        {\n            Size = 30\n            Filling = \u0022Strawberry\u0022\n            PackagedAsPresent = false\n        }\n\ntype CakeBuilder() =\n\n    member x.Yield (()) = Cake.Default\n\n    member x.Zero () = Cake.Default\n\n    [\u003CCustomOperation(\u0022size\u0022)\u003E]\n    member x.Size (cake : Cake, i: int) =\n        {cake with Size = i}\n  \n    [\u003CCustomOperation(\u0022filling\u0022)\u003E]\n    member x.Filling (cake : Cake, s: string) =\n        {cake with Filling = s}\n\n    [\u003CCustomOperation(\u0022package\u0022)\u003E]\n    member x.PackageAsPresent (cake : Cake) =\n        {cake with PackagedAsPresent = true}\n\n\nlet cake = CakeBuilder()\n\n(**\n\nLet\u0027s bake some cakes\n\n*)\n\ncake {\n    ()\n}\n\n//val it : Cake = { Size = 30\n//                  Filling = \u0022Strawberry\u0022\n//                  PackagedAsPresent = false }\n\ncake {\n    size 1800\n    filling \u0022Irish coffee cream\u0022\n    package\n}\n\n//val it : Cake = { Size = 1800\n//                  Filling = \u0022Irish coffee cream\u0022\n//                  PackagedAsPresent = true }\n\n\n(**\n\nFor a good example of this kind of computation expression check out [Saturn](https://saturnframework.org/explanations/routing.html)\n\n## Further reading\n\n- [Basic introduction](https://en.wikibooks.org/wiki/F_Sharp_Programming/Computation_Expressions)\n- [In depth introduction](https://fsharpforfunandprofit.com/series/computation-expressions/)\n- [Official reference](https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/computation-expressions)\n\n- [Good video for practical introduction](https://www.youtube.com/watch?v=pC4ZIeOmgB0)\n\n*)"},{"uri":"/CSBlog/posts/consoleTools.html","title":"Console apps: Above and beyond","content":"(**\n\n---\ntitle: Console apps: Above and beyond\ncategory: Implementation\ncategoryindex: 3\nindex: 0\n---\n\n# Console apps: Above and beyond\n_[Oliver Maus](https://github.com/omaus)_\n\n## Content\n- What are console apps?\n- How do .NET console apps work?\n  - .*proj files\n  - Framework-dependent vs. self-contained\n  - Single file vs. folder\n- How to create an F# console app in .NET\n  - Via .NET CLI\n  - Via Visual Studio\n  - Building vs. publishing\n    - Via .NET CLI\n    - Via FAKE\n    - Via Visual Studio\n- How to extend console apps\n  - Argu\n  - Spectre.Console\n  - ConsoleToolMenu\n  - NLog\n- App conventions\n  - Data folders\n\n## What are console apps?\n\nConsole apps are, as the name suggests, applications that run in a console. That is any command-line interface (CLI) that can serve as an output for such an application.  \nIn Windows, these are the Command Prompt (CMD), PowerShell (PS), and \uFFFD optionally \uFFFD Windows Terminal (WT).  \nConsole apps, in contrast to applications with graphical user interfaces (GUIs), in general, do not support the use of a mouse but instead focus solely on keyboard usage.\n\n![](../img/wt.png)  \n__Your best friend.__\n\n\u003Cbr\u003E\n\nConsole apps are the easiest way to create an application with very little overhead, since most modern programming language frameworks offer support for creating them. Besides, the complexity of a simple console app is often a lot lower than a GUI-based application of the same functionality, and makes it much easier to create an easily accessible API by calling the console app through a CLI from another application.\n\n## How do .NET console apps work?\n\nThe .NET ecosystem allows for its core languages C#, F#, and Visual Basic.NET to create console app barebones that work (roughly) the same. You can choose between requiring a .NET SDK installed on your system to execute them, or to have everything packed in a file or folder.  \nThrough various ways, .NET allows for modifying your console app beyond the code that it works on (which we will cover later).\n\n### .*proj file\n\nC#, F#, and Visual Basic.NET applications and libraries are realized as projects. The information about a project is stored in its [project file](https://docs.microsoft.com/en-us/dotnet/core/project-sdk/overview#project-files). Depending on the language you use, those project file are either ending with \u0060.csproj\u0060, \u0060.fsproj\u0060, or \u0060.vbproj\u0060 as file extension. These files are based on the [XML standard](https://www.tutorialspoint.com/xml/xml_overview.htm) and thus can be easily read and edited by developers themselves without the need of other tools to alter them.\n\n__The minimum project file for an F# console app:__\n\u0060\u0060\u0060xml\n\u003CProject Sdk=\u0022Microsoft.NET.Sdk\u0022\u003E\n\n  \u003CPropertyGroup\u003E                               \u003C!--Contains all properties of the project--\u003E\n    \u003COutputType\u003EExe\u003C/OutputType\u003E                \u003C!--If this is not \u0060Exe\u0060, it won\u0027t be built into an executable file--\u003E\n    \u003CTargetFramework\u003Enet6.0\u003C/TargetFramework\u003E   \u003C!--The framework version the project shall be based upon--\u003E\n  \u003C/PropertyGroup\u003E\n\n  \u003CItemGroup\u003E                                   \u003C!--Contains all files to be compiled when building the project, in chronological order--\u003E\n    \u003CCompile Include=\u0022Program.fs\u0022 /\u003E\n  \u003C/ItemGroup\u003E\n\n\u003C/Project\u003E\n\u0060\u0060\u0060\n\n### Program.fs file\n\nEvery new console app starts with a \u0022Program.fs\u0022 source file which only consists of a \u0022Hello From F#\u0022 print command.  \nOf course you don\u0027t need to stick with this. You can rename this file and change the code as you like but you have to make sure that there\u0027s at least 1 source file present to be compiled.\n\nIt\u0027s important to know that when executing your app, the function called last will be the starting point of your program. In earlier versions of .NET, the compiler needed a starting point specified and it had to be a function itself (most often titled \u0022main\u0022) but since .NET 6 this is not true anymore. Though, you can still use the \u0022main function\u0022 approach.\n\n__The starting Program.fs in .NET 6:__\n\u0060\u0060\u0060fsharp\n// For more information see https://aka.ms/fsharp-console-apps\nprintfn \u0022Hello from F#\u0022\n\u0060\u0060\u0060\n\n__The starting Program.fs in .NET 5 and earlier:__\n\u0060\u0060\u0060fsharp\n// Learn more about F# at http://docs.microsoft.com/dotnet/fsharp\n\nopen System\n\n// Define a function to construct a message to print\nlet from whom =\n    sprintf \u0022from %s\u0022 whom\n\n[\u003CEntryPoint\u003E]\nlet main argv =\n    let message = from \u0022F#\u0022 // Call the function\n    printfn \u0022Hello world %s\u0022 message\n    0 // return an integer exit code\n\u0060\u0060\u0060\n\nAs you can see, in .NET 5 and earlier the starting point is specified via the \u0060[\u003CEntryPoint\u003E]\u0060 attribute. The \u0060argv\u0060 parameter will be the arguments put behind the call of the executable in the CLI. Since this is not done per se in .NET 6, you need to capture it via a \u0060System.Console\u0060 method:\n\n__The starting Program.fs in .NET 6 with inclusion and usage of the input arguments:__\n\u0060\u0060\u0060fsharp\nlet userInput = \n    let args = System.Environment.GetCommandLineArgs()      // first argument will always be the filepath to the executable\n    Array.skip 1 args\n\nprintfn \u0022Hello from F# with userInput: %A\u0022 userInput\n\u0060\u0060\u0060\n\n__The starting Program.fs in .NET 5 and earlier with usage of the input arguments:__\n\u0060\u0060\u0060fsharp\nopen System\n\nlet from whom =\n    sprintf \u0022from %s\u0022 whom\n\n[\u003CEntryPoint\u003E]\nlet main argv =     // \u0060argv\u0060 will always exclude the filepath to the executable\n    let message = from \u0022F#\u0022\n    printfn \u0022Hello %s with userInput: %A\u0022 message argv\n    0\n\u0060\u0060\u0060\n\nBoth apps will result in the following output when calling them:\n\n\u0060\u0060\u0060powershell\nPS C:\\testFolder\\minimumConsoleAppNet6\\bin\\Debug\\net6.0\\win-x64\\publish\u003E .\\minimumConsoleAppNet6.exe Hello, too!\n\nPS C:\\testFolder\\minimumConsoleAppNet5\\bin\\Debug\\net5.0\\win-x64\\publish\u003E .\\minimumConsoleAppNet5.exe Hello, too!\n\n# output:\nHello from F# with userInput: [|\u0022Hello\u0022; \u0022too!\u0022|]\n\u0060\u0060\u0060\n\n### Framework-dependent vs. self-contained\n\nAs written before, it is your choice of what is to be required when executing your console app. When deploying framework-dependent, the runtime (i.e. the .NET SDK) *must* be installed for your app to be executable. When deploying self-contained, the runtime is already packed into your app. Both options have their (dis)advantages: In a framework-dependent scenario, the user might need to install the .NET SDK on his device before being able to use your program. This can be annoying for the users of your app, depending on if they work with the .NET framework regularly or having nothing to do with it.  \nSelf-contained executables need more space since they pack the runtime into them (hence the name). This also leads to the problem that the runtime is device-dependent: The .NET SDK for Linux differs from that for Windows which differs from that for MacOS, meaning that you must choose for which operating system (OS) you want to deploy your tool.\n\nIn the project file, the deployment type is written into the property group. If you choose self-contained, you need to specify the target runtime:\n\n\u0060\u0060\u0060xml\n\u003CProject Sdk=\u0022Microsoft.NET.Sdk\u0022\u003E\n\n  \u003CPropertyGroup\u003E\n    \u003COutputType\u003EExe\u003C/OutputType\u003E\n    \u003CTargetFramework\u003Enet6.0\u003C/TargetFramework\u003E\n    \u003CSelfContained\u003Etrue\u003C/SelfContained\u003E                 \u003C!--If this is set to false or is absent, deployment type will be framework-dependent--\u003E\n    \u003CRuntimeIdentifier\u003Ewin-x64\u003C/RuntimeIdentifier\u003E      \u003C!--The OS your app shall run on--\u003E\n  \u003C/PropertyGroup\u003E\n\n  \u003CItemGroup\u003E\n    \u003CCompile Include=\u0022Program.fs\u0022 /\u003E\n  \u003C/ItemGroup\u003E\n\n\u003C/Project\u003E\n\u0060\u0060\u0060\n\nFor a list of runtimes you can deploy to, look [here](https://docs.microsoft.com/en-us/dotnet/core/rid-catalog#using-rids).\n\n### Single file vs. folder\n\nDefault is that your console app will be deployed as an executable file inside a folder with all libraries and other files needed for the execution. Sometimes, especially when you don\u0027t have an installer for your application (which will mostly be the case) or you don\u0027t want your app users to handle [ZIP archives](https://experience.dropbox.com/resources/what-is-a-zip-file), it might be a good choice to use single file-deployment. In that case, the whole folder content will be packed into a single file which itself will serve as an archive that gets extracted\n\n- into the user\u0027s temp folder at runtime and then executed (.NET 5).  \n- directly into the memory and then executed (.NET 6).  \n\nUsing the single file deployment comes at the cost of a slightly slower startup time due to the extraction process.\n\n\n![](../img/SelfExtractNet5.png)  \n__Our minimum console app in its extracted state (.NET 5).__\n\n\u003Cbr\u003E\n\nThis is what our project file for single file deployment would look like:\n\n\u0060\u0060\u0060xml\n\u003CProject Sdk=\u0022Microsoft.NET.Sdk\u0022\u003E\n\n  \u003CPropertyGroup\u003E\n    \u003COutputType\u003EExe\u003C/OutputType\u003E\n    \u003CTargetFramework\u003Enet6.0\u003C/TargetFramework\u003E\n    \u003CPublishSingleFile\u003Etrue\u003C/PublishSingleFile\u003E                             \u003C!--If this is set to false or is absent, deployment type will be folder--\u003E\n    \u003CIncludeAllContentForSelfExtract\u003Etrue\u003C/IncludeAllContentForSelfExtract\u003E \u003C!--Only needed in .NET versions below 6 to generate \u0022real\u0022 single files--\u003E\n    \u003CRuntimeIdentifier\u003Ewin-x64\u003C/RuntimeIdentifier\u003E                          \u003C!--\u0060\u003CSelfContained\u003E\u0060 is missing, since \u0060\u003CPublishSingleFile\u003E\u0060 sets this to true, but the runtime identifier is still needed--\u003E\n  \u003C/PropertyGroup\u003E\n\n  \u003CItemGroup\u003E\n    \u003CCompile Include=\u0022Program.fs\u0022 /\u003E\n  \u003C/ItemGroup\u003E\n\n\u003C/Project\u003E\n\u0060\u0060\u0060\n\nUnfortunately, even for our small example app (which does nothing else than printing a single string), the required space is quite large (~ 65 MB). This is due to the large .NET SDK runtime shipped. Luckily, there are some features we can use to decrease the file size:\n\n\u0060\u0060\u0060xml\n\u003CProject Sdk=\u0022Microsoft.NET.Sdk\u0022\u003E\n\n  \u003CPropertyGroup\u003E\n    \u003COutputType\u003EExe\u003C/OutputType\u003E\n    \u003CTargetFramework\u003Enet6.0\u003C/TargetFramework\u003E\n    \u003CPublishSingleFile\u003Etrue\u003C/PublishSingleFile\u003E\n    \u003CRuntimeIdentifier\u003Ewin-x64\u003C/RuntimeIdentifier\u003E\n    \u003CEnableCompressionInSingleFile\u003Etrue\u003C/EnableCompressionInSingleFile\u003E     \u003C!--Applies compression like in ZIP archives--\u003E\n    \u003CPublishTrimmed\u003Etrue\u003C/PublishTrimmed\u003E                                   \u003C!--Checks during compiletime (into CIL) for unused core libraries and classes and excludes them--\u003E\n  \u003C/PropertyGroup\u003E\n\n  \u003CItemGroup\u003E\n    \u003CCompile Include=\u0022Program.fs\u0022 /\u003E\n  \u003C/ItemGroup\u003E\n\n\u003C/Project\u003E\n\u0060\u0060\u0060\n\n\u0060\u003CEnableCompression\u003E\u0060 decreases file size by about 50 %. This comes at the cost of a higher startup time.\n\u0060\u003CPublishTrimmed\u003E\u0060 decreases file size depending on the number of unused libraries and classes but compiletime is noticeably increased. Since this feature is still in beta stage, it is possible that the resulting app does not start or fails under special circumstances, though this seems rarely to be the case (I personally never encountered it).\n\nThere are a lot (!) of different properties you can set in your project file. I won\u0027t cover all of them here, but here are a few other things that might be important to you:\n\n\u0060\u0060\u0060xml\n\u003CProject Sdk=\u0022Microsoft.NET.Sdk\u0022\u003E\n\n  \u003CPropertyGroup\u003E\n    \u003COutputType\u003EExe\u003C/OutputType\u003E\n    \u003CTargetFramework\u003Enet6.0\u003C/TargetFramework\u003E\n    \u003CPublishSingleFile\u003Etrue\u003C/PublishSingleFile\u003E\n    \u003CRuntimeIdentifier\u003Ewin-x64\u003C/RuntimeIdentifier\u003E\n    \u003CCultureInvariant\u003Etrue\u003C/CultureInvariant\u003E       \u003C!--Depending on the regional settings of your system, you might get problems with different signs (\u0060,\u0060, \u0060.\u0060, and so on)--\u003E\n                                                    \u003C!--Due to this, it is best practice to set \u0060\u003CCultureInvariant\u003E\u0060 to true, so that you don\u0027t have to expect parsing errors--\u003E\n    \u003CInvariantGlobalization\u003Etrue\u003C/InvariantGlobalization\u003E   \u003C!--Comparable to the setting above--\u003E\n    \u003CServerGarbageCollection\u003Etrue\u003C/ServerGarbageCollection\u003E     \u003C!--Important to set this to true if you don\u0027t want to expect performance problems due to garbage collection--\u003E\n    \u003CVersion\u003E0.0.1\u003C/Version\u003E                    \u003C!--There are 3 version settings: \u0060\u003CVersion\u003E\u0060, \u0060AssemblyVersion\u003E, and \u0060FileVersion\u0060. \u0060\u003CVersion\u003E\u0060 is an informal version tag of your application--\u003E\n    \u003CAssemblyVersion\u003E0.0.1.0\u003C/AssemblyVersion\u003E  \u003C!--\u0060\u003CAssemblyVersion\u003E\u0060 is the version tag that you can access to while using your app via \u0060System.Reflection.Assembly.GetExecutingAssembly()\u0060--\u003E\n    \u003CFileVersion\u003E0.0.1.0\u003C/FileVersion\u003E          \u003C!--This is the version tag that you can see when rightclicking on your app and looking at the properties. It defaults to 1.0.0.0--\u003E\n                                                \u003C!--Keep in mind that the versioning follows the \u0060(Major).(Minor).(Build).(Revision)\u0060 pattern (except \u0060\u003CVersion\u003E\u0060 tag)--\u003E\n  \u003C/PropertyGroup\u003E\n\n  \u003CItemGroup\u003E\n    \u003CCompile Include=\u0022Program.fs\u0022 /\u003E\n  \u003C/ItemGroup\u003E\n\n\u003C/Project\u003E\n\u0060\u0060\u0060\n\n_([Further reading](https://dotnetcoretutorials.com/2021/11/10/single-file-apps-in-net-6/))_\n\n## How to create an F# console app in .NET\n\nThere are several ways to start a console app written in F#. As prerequisite you need to have the .NET SDK installed.\n\n### Via .NET CLI\n\nWith the .NET SDK installed, you already are able to create a console app barebone into your folder with any CLI using the following command:\n\n\u0060\u0060\u0060powershell\ndotnet new console -lang \u0022F#\u0022 --framework net6.0    # or any other .NET version you want to use\n\u0060\u0060\u0060\n\nYou can also specify an output path (\u0060-o [yourPath]\u0060) and a name (\u0060-n [desiredName]\u0060).\n\nThe console app will consist of the project file (as seen above) and the Program.fs file.\n\n### Via Visual Studio\n\nOpen a new Visual Studio instance:\n\n![](../img/CreateANewProjectWindow1.png)  \n__Select F# Console Application. If not present, filter for F# language.__\n\n\u003Cbr\u003E\n\n![](../img/CreateANewProjectWindow2.png)  \n__Choose name and location of your console app.__\n\n\u003Cbr\u003E\n\n![](../img/CreateANewProjectWindow3.png)  \n__Choose your target .NET version.__\n\n\u003Cbr\u003E\n\n### Building vs. publishing\n\nWhen creating a file from the project, [MSBuild (the Microsoft Build Engine)](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild?view=vs-2022) takes the information from the project file to determine what and how to build. But you are not restricted to that. Most of the MSBuild information can be given directly when deploying the app (see below).  \nAs compiling methods you can choose between building and publishing. When building, all files and dependencies get compiled and an executable will be created. When publishing, building will be executed but on top it will be taken into account that the result shall be used as a whole (in the shape of a file or a folder), thus putting everything together and making it deployable. For normal, you _build_ libraries to use them and _build_ console apps to test them but you _publish_ console apps when you want to distribute them. Since publishing is special to apps in general (but not to libraries), we will focus on it in the following.\n\n#### Via .NET CLI\n\nUsing a CLI, publishing your project works as follows:\n\n\u0060\u0060\u0060powershell\ndotnet publish\n\u0060\u0060\u0060\n\nwhen executed in the folder where project file is located, otherwise the path to the project file containing folder or to the project file itself must be given:\n\n\u0060\u0060\u0060powershell\ndotnet publish C:\\testFolder\\minimumConsoleAppNet6\ndotnet publish C:\\testFolder\\minimumConsoleAppNet6\\minimumConsoleAppNet6.fsproj\n\n# relative paths are possible too\n\u0060\u0060\u0060\n\nAs written earlier, you can give a lot of arguments into MSBuild, e.g.:\n\n\u0060\u0060\u0060powershell\ndotnet publish -o [path]                        # output directory\ndotnet publish -f [framework]                   # target framework, e.g. \u0060net6.0\u0060\ndotnet publish -r [rID]                         # target runtime, \u0060[rID]\u0060 being the runtime identifier, as seen in the project file above\ndotnet publish --self-contained [true]/[false]\ndotnet publish -p:[propName]=[value]            # \u0060[propName]\u0060 is the name of the property you want to set, [value] the value you want to set it to, e.g.\ndotnet publish -p:PublishSingleFile=true\n\u0060\u0060\u0060\n\nFor a full list of commands, look [here](https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-publish).\n\n#### Via FAKE\n\n[FAKE](https://fake.build/) is a nice tool that aids with automatizing building, publishing and deploying. It also allows to chain Unit Tests while doing so.  \nIf you already have a FAKE build script ready, it is very easy to extend it with a publishing task:  \n(If not, you might want to look into the FAKE build scripts we use in our repositories)\n\n*)\n\n// we start with a simple build\nlet publishBinariesWin = BuildTask.create \u0022PublishBinariesWin\u0022 [clean.IfNeeded; build.IfNeeded] {\n    let outputPath = sprintf \u0022%s/win-x64\u0022 publishDir\n    solutionFile\n    |\u003E DotNet.publish (fun p -\u003E\n        // and then call MSBuild to run with the arguments we parse into it:\n        let standardParams = Fake.DotNet.MSBuild.CliArguments.Create ()\n        {\n            p with\n                // set some of the properties...\n                Runtime = Some \u0022win-x64\u0022\n                Configuration = DotNet.BuildConfiguration.fromString configuration\n                OutputPath = Some outputPath\n                MSBuildParams = {\n                    standardParams with\n                        Properties = [      // here you can set all the properties that were not treated before\n                            \u0022Version\u0022, stableVersionTag\n                            \u0022Platform\u0022, \u0022x64\u0022\n                            \u0022PublishSingleFile\u0022, \u0022true\u0022\n                        ]\n                };\n        }\n    )\n}\n\n(**\n\n#### Via Visual Studio\n\n![](../img/Publish1.png)  \n__Right click on your project file in the solution explorer and choose \u0022Publish...\u0022.__\n\n\u003Cbr\u003E\n\n![](../img/Publish2.png)  \n__Choose your desired output target (e.g. \u0022Folder\u0022 if you like to get your executable file in a folder).__\n\n\u003Cbr\u003E\n\n![](../img/Publish3.png)  \n__Set the output path.__\n\n\u003Cbr\u003E\n\n![](../img/Publish4.png)  \n__By clicking on \u0022Show all settings\u0022 you can apply additional settings like deployment type, target runtime, etc. Finish the publishing via clicking on \u0022Publish\u0022 at the top.__\n\n## How to extend console apps\n\nYou now know how to create and deploy console apps but of course you want more than just printing Hello to the World.  \nThe most common extension of your current console app (besides adding code) is the addition of further source files. You can either just create the file in the project folder and add it to the project file...\n\n\u0060\u0060\u0060xml\n\u003CProject Sdk=\u0022Microsoft.NET.Sdk\u0022\u003E\n\n  \u003CPropertyGroup\u003E\n    \u003COutputType\u003EExe\u003C/OutputType\u003E\n    \u003CTargetFramework\u003Enet6.0\u003C/TargetFramework\u003E\n  \u003C/PropertyGroup\u003E\n\n  \u003CItemGroup\u003E\n    \u003CCompile Include=\u0022SecondSourceFile.fs\u0022 /\u003E\n    \u003CCompile Include=\u0022Program.fs\u0022 /\u003E\n  \u003C/ItemGroup\u003E\n\n\u003C/Project\u003E\n\u0060\u0060\u0060\n\n...or use the Visual Studio interface for that:\n\n![](../img/AddFile1.png)\n\n\u003Cbr\u003E\n\nKeep in mind that your executing source file (most often Program.fs) must be at the last position!\n\n\u003Cbr\u003E\n\nWhat will also often be the case, is that you will want to use external libraries inside your tool. [NuGet](https://www.nuget.org/) is the best source for that. To add a NuGet package to your app, you can either add the line for it to the project file, or use the .NET CLI or Visual Studio for doing so:\n\n\u0060\u0060\u0060powershell\ndotnet add package [packageName]    # with \u0060[packageName]\u0060 being, e.g., \u0060FSharpAux\u0060\n\u0060\u0060\u0060\n\n![](../img/ManageNuGet1.png)\n\n\u003Cbr\u003E\n\n![](../img/ManageNuGet2.png)\n\n\u003Cbr\u003E\n\nThe resulting project file:\n\n\u0060\u0060\u0060xml\n\u003CProject Sdk=\u0022Microsoft.NET.Sdk\u0022\u003E\n\n  \u003CPropertyGroup\u003E\n    \u003COutputType\u003EExe\u003C/OutputType\u003E\n    \u003CTargetFramework\u003Enet6.0\u003C/TargetFramework\u003E\n  \u003C/PropertyGroup\u003E\n\n  \u003CItemGroup\u003E\n    \u003CCompile Include=\u0022Program.fs\u0022 /\u003E\n  \u003C/ItemGroup\u003E\n\n  \u003CItemGroup\u003E\n    \u003CPackageReference Include=\u0022FSharpAux\u0022 Version=\u00221.1.0\u0022 /\u003E\n  \u003C/ItemGroup\u003E\n\n\u003C/Project\u003E\n\u0060\u0060\u0060\n\nThere are a few very helpful libraries for console apps that I want to show you in the following.\n\n*)\n\n(***hide***)\n\n#r \u0022nuget: Argu, 6.1.1\u0022\n#r \u0022nuget: NLog, 4.7.13\u0022\n#r \u0022nuget: Spectre.Console, 0.43.0\u0022\n#r \u0022nuget: FSharpAux, 1.1.0\u0022\n#r \u0022nuget: System.Drawing.Common, 6.0.0\u0022\n\n(**\n\n### Argu\n\n[Argu](https://fsprojects.github.io/Argu/) is a library which facilitates the creation of command-line argument parsing a lot for you. It allows you to create commands and infinitely nestable subcommands for your console app. It comes with built-in error parsing and creating a simple help-command that grows along the commands you add.  \nDue to its implementation in F#, it is especially simple to in F# console apps.\n\n*)\n\nopen Argu\n\n// Union type for a kind of command\ntype MainCommands =\n    // each field is a command. Specific properties are realized via attributes\n    | [\u003CCliPrefix(CliPrefix.None)\u003E]                         PrintHWFs\n    | [\u003CCliPrefix(CliPrefix.None)\u003E]                         PrintHWfrom     of person : string\n    // the \u0060ParseResults\u003CyourType\u003E\u0060 type makes subcommands possible (see below)\n    | [\u003CCliPrefix(CliPrefix.None)\u003E][\u003CAltCommandLine(\u0022-e\u0022)\u003E] PrintHWextended of ParseResults\u003CSubCommands\u003E\n    // the \u0060IArgParserTemplates\u0060 allows for adding usage descriptions which are shown when calling \u0060--help\u0060 or giving a wrong input argument\n    interface IArgParserTemplate with\n        member this.Usage =\n            match this with\n            | PrintHWFs         -\u003E \u0022Print Hello World\u0022\n            | PrintHWfrom _     -\u003E \u0022Print Hello World from someone\u0022\n            | PrintHWextended _ -\u003E \u0022Print Hello World from someone to someone\u0022\n\nand SubCommands =\n    | To       of person : string\n    | FromTo   of sender : string * receiver : string\n    interface IArgParserTemplate with\n        member this.Usage =\n            match this with\n            | To _      -\u003E \u0022Receiver of the message\u0022\n            | FromTo _  -\u003E \u0022Sender and receiver of the message\u0022\n\n// initialization of the parser\nlet parser = ArgumentParser.Create\u003CMainCommands\u003E()\n\n[\u003CEntryPoint\u003E]\nlet main argv =\n    try \n        // parse the user\u0027s command-line arguments\n        let pr = parser.ParseCommandLine(inputs = argv, raiseOnUsage = true)\n        // return the results\n        let ar = pr.GetAllResults()\n        // this is the actual control flow: What shall happen if the user gives what argument, what second argument, and so on\n        match ar.Length with\n        | 0 -\u003E printfn \u0022No input.\u0022\n        | _ -\u003E\n            ar\n            |\u003E List.iter (\n                fun r -\u003E\n                    match r with\n                    | PrintHWFs         -\u003E printfn \u0022Hello World from F#!\u0022\n                    | PrintHWfrom p     -\u003E printfn $\u0022Hello World from {p}!\u0022\n                    | PrintHWextended p -\u003E\n                        p.GetAllResults()\n                        |\u003E List.iter (\n                            fun r2 -\u003E\n                                match r2 with\n                                | To p2             -\u003E printfn $\u0022Hello World from F# to {p2}!\u0022\n                                | FromTo (p2,p3)    -\u003E printfn $\u0022Hello World from {p2} to {p3}!\u0022\n                        )\n            )\n    with e -\u003E printfn \u0022%A\u0022 e\n    0\n\n(**\n\nNotable examples:\n\n- [ArcCommander](https://github.com/nfdi4plants/arcCommander)\n- [ProteomIqon](https://github.com/CSBiology/ProteomIQon)\n\n### Spectre.Console\n\nAnother library extending command-line argument parsing is [Spectre.Console](https://spectreconsole.net/). Compared to Argu, it is less intuitive to use in an F# project due to its object-oriented (OO) design. Aside from that, it comes with a load of extra features like table depiction, tree construction, live updates, charts, and even pixel drawings!\n\nSetting a table:\n\n*)\n\nopen System\nopen System.IO\nopen System.Threading\nopen Spectre.Console\nopen FSharpAux\n\n[\u003CEntryPoint\u003E]\nlet main _ =\n\n    // a test file for our purposes\n    let table =\n        let file = File.ReadAllLines(Path.Combine(\u0022c:\u0022, \u0022testFolder\u0022, \u0022table.tsv\u0022))\n        file\n        |\u003E Array.map (\n            fun s -\u003E s.Split(\u0027\\t\u0027)\n        )\n        |\u003E array2D\n\n    // initialize a new table and set the border style\n    let spectreTable = new Table()\n    spectreTable.Border \u003C- TableBorder.HeavyHead\n\n    let cols = table[0,0 ..]\n    let rows = table[1 ..,0 ..]\n\n    // apply some markup to our strings\n    let markupdCols = cols |\u003E Array.map (fun s -\u003E ($\u0022[bold][italic]{s}[/][/]\u0022))\n    let markupdRows = \n        rows\n        |\u003E Array2D.mapColI (\n            fun iCol s -\u003E\n                if iCol = 4 then\n                    match int s with\n                    | x when x \u003E 80     -\u003E $\u0022[red]{s}[/]\u0022\n                    | x when x \u003C= 80    -\u003E $\u0022[green]{s}[/]\u0022\n                    | _                 -\u003E failwith \u0022cannot happen\u0022\n                else s\n        )\n\n    // add columns and rows to the table\n    spectreTable.AddColumns(markupdCols) |\u003E ignore\n    for i = 0 to rows.GetLength(0) - 1 do\n        spectreTable.AddRow(markupdRows.[i,0 ..])\n        |\u003E ignore\n\n    spectreTable.Title \u003C- TableTitle(\u0022Musterpeople\u0022)\n\n    // display the table\n    AnsiConsole.Write(spectreTable)\n\n(**\n\nConstruct a tree:\n\n*)\n\ntype Dir = {\n    Name    : string\n    Subdirs : Dir []\n    Files   : FileInfo []\n}\n\n[\u003CEntryPoint\u003E]\nlet main _ =\n\n    // special markup for special files\n    let matchFileExt f =\n        match f with\n        | x when String.contains(\u0022.jpg\u0022) x -\u003E $\u0022[orange1]{f}[/]\u0022\n        | x when String.contains(\u0022.png\u0022) x -\u003E $\u0022[gold1]{f}[/]\u0022\n        | x when String.contains(\u0022.txt\u0022) x -\u003E f\n        | x when String.contains(\u0022.xlsx\u0022) x -\u003E $\u0022[green]{f}[/]\u0022\n        | x when String.contains(\u0022.pub\u0022) x -\u003E $\u0022[darkslategray3]{f}[/]\u0022\n        | x when String.contains(\u0022.rtf\u0022) x -\u003E $\u0022[blue]{f}[/]\u0022\n        | _ -\u003E f\n\n    let rec constructDir path = {\n        Name    = (DirectoryInfo path).Name\n        Files   = Directory.GetFiles(path) |\u003E Array.map FileInfo\n        Subdirs = \n            Directory.GetDirectories(path)\n            |\u003E Array.map constructDir\n    }\n\n    let topDir = constructDir @\u0022C:\\testFolder\\testDir\u0022\n\n    // add a node with every new file and folder but only check folders for files and subfolders\n    let rec addNode (node : TreeNode) dir =\n        dir.Subdirs |\u003E Array.map (fun di -\u003E addNode (node.AddNode(di.Name)) di) |\u003E ignore\n        dir.Files |\u003E Array.map (fun fi -\u003E node.AddNode(fi.Name |\u003E matchFileExt)) |\u003E ignore\n        node\n\n    // initialize tree and style it\n    let root = Tree(topDir.Name)\n    root.Style \u003C- Style(Color.Red1)\n    root.Guide \u003C- TreeGuide.Line\n    // add the nodes\n    root.AddNodes(topDir.Files |\u003E Array.map (fun fi -\u003E fi.Name |\u003E matchFileExt))\n    topDir.Subdirs \n    |\u003E Array.map (\n        fun di -\u003E\n            addNode (root.AddNode(di.Name)) di\n    )\n    |\u003E ignore\n\n    AnsiConsole.Write(root)\n\n(**\n\nBuilding a Bar Chart:\n\n*)\n\n[\u003CEntryPoint\u003E]\nlet main _ =\n\n    let noOfContributionsIn2021 =\n        [|(\u0022muehlhaus\u0022, 158); (\u0022geodels\u0022, 0); (\u0022MikhayN\u0022, 0); (\u0022HLWeil\u0022, 463);\n        (\u0022ZimmerD\u0022, 273); (\u0022kMutagene\u0022, 1858); (\u0022bvenn\u0022, 260); (\u0022Etschbeijer\u0022, 0);\n        (\u0022bellacapilla\u0022, 0); (\u0022Joott\u0022, 754); (\u0022Freymaurer\u0022, 710); (\u0022SchuckL\u0022, 0);\n        (\u0022omaus\u0022, 609); (\u0022ZimmerA\u0022, 352); (\u0022LibraChris\u0022, 121); (\u0022CMR248\u0022, 122);\n        (\u0022JessicaFaryadMarani\u0022, 0); (\u0022zieglerSe\u0022, 18); (\u0022Falkenei\u0022, 7);\n        (\u0022vLeidel\u0022, 0)|]\n        |\u003E Array.filter (fun (person,conts) -\u003E conts \u003E 0)\n        |\u003E Array.sortByDescending snd\n\n    let colors = [|\n        Color.Red\n        Color.Gold1\n        Color.Lime\n        Color.Yellow\n        Color.Blue\n        Color.Fuchsia\n        Color.Silver\n        Color.Teal\n        Color.Olive\n        Color.Maroon\n        Color.White\n        Color.LightSteelBlue1\n        Color.LightPink1\n        Color.Green\n        Color.Aqua\n    |]\n\n    let rnd = Random()\n\n    // initialize bar chart with style\n    let barChart = BarChart()\n    barChart.Width \u003C- 100\n    barChart.Label \u003C- \u0022[underline]No. of GitHub contributions (in 2021)[/]\u0022\n    barChart.CenterLabel() |\u003E ignore\n\n    // add a bar with a new color (and make sure the color is unique)\n    let rec addWithColor i usedColors =\n        let color = colors |\u003E Array.shuffleFisherYates rnd |\u003E Array.head\n        let cond1 = i \u003C noOfContributionsIn2021.Length\n        let cond2 = List.contains color usedColors\n        if cond1 \u0026\u0026 not cond2 then\n            barChart.AddItem(\n                noOfContributionsIn2021[i] |\u003E fst, \n                noOfContributionsIn2021[i] |\u003E snd |\u003E float, \n                color\n            )\n            |\u003E ignore\n            addWithColor (i \u002B 1) (color :: usedColors)\n        elif List.contains color usedColors then\n            addWithColor i usedColors\n\n    addWithColor 0 []\n\n    AnsiConsole.Write(barChart)\n\n(**\n\n(Re)Drawing a picture:\n\n*)\n\n[\u003CEntryPoint\u003E]\nlet main _ =\n\n    let bm = new System.Drawing.Bitmap(@\u0022C:\\testFolder\\testDir\\sp.png\u0022)\n\n    let xMax = bm.Width - 1\n    let yMax = bm.Height - 1\n\n    // initialize a canvas with width and height\n    let cnvs = Canvas(xMax \u002B 1,yMax \u002B 1)\n\n    for y = 0 to yMax do\n        for x = 0 to xMax do\n            let px = bm.GetPixel(x,y)\n            let col = Color(px.R, px.G, px.B)\n            // set pixel after pixel for our picture\n            cnvs.SetPixel(x,y,col)\n            |\u003E ignore\n\n    AnsiConsole.Write(cnvs)\n    Console.WriteLine()\n\n(**\n\nStarting a live update:\n\n*)\n\n[\u003CEntryPoint\u003E]\nlet main _ =\n    \n    // initialize a status report\n    AnsiConsole.Status().Start(\n        // first message\n        \u0022Initiating looong list...\u0022, \n        fun stCtxt -\u003E \n            // do our stuff\n            List.init 100000000 id |\u003E ignore\n            // update message after task is done\n            stCtxt.Status \u003C- \u0022Done.\u0022\n            Thread.Sleep(1000)\n    )\n\n(**\n\n### ConsoleToolMenu\n\nA library written by myself that shall provide a simple text-based interface. Its purpose lies especially in offering easy-to-create menu-like structures via the creation of \u0060Options\u0060 that can be infinitely nested and assembled with actions that get called when choosing a bullet point.\n\n*)\n\nopen ConsoleToolMenu\nopen ConsoleToolMenu.Functions\n\n// initialize the options you want to have\nlet options = [|\n    // each option consists of a name and an action that gets triggered when the option is chosen\n    Option.create \u0022Option 1\u0022 (fun _ -\u003E printfn \u0022Option 1 was chosen\u0022)\n    Option.create \u0022Option 2\u0022 (fun _ -\u003E printfn \u0022Option 2 was chosen\u0022)\n    // options can serve as folders, inhabiting other options\n    Option.createFolder \n        \u0022Option 3\u0022 \n        (fun _ -\u003E printfn \u0022Option 3 was chosen\u0022)\n        (Array.map2 \n            Option.create \n            [|\u0022SubOption1\u0022; \u0022SubOption2\u0022|] \n            [|(fun _ -\u003E printfn \u0022SubOption 1 was chosen\u0022); fun _ -\u003E printfn \u0022SubOption 2 was chosen\u0022|]\n        )\n    Option.createFolder \n        \u0022Option 4\u0022 \n        (fun _ -\u003E ()) \n        [|Option.createFolder \n            \u0022SubOption 1b\u0022 (fun () -\u003E ()) [|\n                Option.create \u0022SubSubOption 1\u0022 (fun _ -\u003E printfn \u0022SubSubOption 1 chosen\u0022)\n            |]\n        |]\n|]\n\n// choose the look of your cursor\nlet cursor = SelectionPointer.create \u0027\u003E\u0027\n\n// add messages for start and end\nlet startMsg = \u0022Hello there\u0022\nlet endMsg = \u0022Goodbye there\u0022\n// start the menu. Use Up and Down arrow keys, and Enter and Escape to navigate\nstart cursor startMsg endMsg options\n\n(**\n\n### NLog\n\nLogging is an important part of any bigger application. It makes debugging and app usage documentation much easier and logging libraries also often offer customization of the console appearance to some extent.  \nOne of the largest logging libraries in the .NET ecosystem is [NLog](https://nlog-project.org/). It allows for writing to several targets (files and the console itself, e.g.) and can be customized via an XML-settings file or directly in code.  \nLike Spectre.Console, it is a C# library which means we have to use it in an OO way.\n\n*)\n\nopen System.IO\nopen NLog\nopen NLog.Config\nopen NLog.Targets\nopen NLog.Conditions\n\n// we start with initializing the base config object which can be modified\nlet config = new LoggingConfiguration()\n\n// we initialize the first console target\nlet consoleTarget1 = new ColoredConsoleTarget(\u0022console\u0022)\n// and set its layout to a new one we created. The string is parsed internally similar to how interpolated strings work\nlet layoutConsole1 = new Layouts.SimpleLayout(@\u0022${message} ${exception}\u0022)\nconsoleTarget1.Layout \u003C- layoutConsole1\n\n// a second target that differs from the first one\nlet consoleTarget2 = new ColoredConsoleTarget(\u0022console\u0022)\nlet layoutConsole2 = new Layouts.SimpleLayout(@\u0022${level:uppercase=true} ${message} ${exception}\u0022)\nconsoleTarget2.Layout \u003C- layoutConsole2\n\n// a file target, for writing into a text file\nlet fileTarget = new FileTarget(\u0022file\u0022)\nlet folderPath = Path.Combine(\u0022C:\u0022, \u0022testFolder\u0022, \u0022minimumConsoleAppNet6\u0022)\n// we set filename and layout for the file target\nlet fileName = new Layouts.SimpleLayout(Path.Combine (folderPath, @\u0022minimumConsoleAppNet6.log\u0022))\nlet layoutFile = new Layouts.SimpleLayout(\u0022${longdate} ${level:uppercase=true} ${message} ${exception}\u0022)\nfileTarget.FileName \u003C- fileName\nfileTarget.Layout \u003C- layoutFile\n\n// the targets are added to the config object\nconfig.AddTarget(consoleTarget1)\nconfig.AddTarget(consoleTarget2)\nconfig.AddTarget(fileTarget)\n\n// we define rules for colors that shall differ from the default color theme (which is black background, grey font)\nlet warnColorRule = new ConsoleRowHighlightingRule()\nwarnColorRule.Condition \u003C- ConditionParser.ParseExpression(\u0022level == LogLevel.Warn\u0022)\nwarnColorRule.ForegroundColor \u003C- ConsoleOutputColor.Yellow\nlet errorColorRule = new ConsoleRowHighlightingRule()\nerrorColorRule.Condition \u003C- ConditionParser.ParseExpression(\u0022level == LogLevel.Error\u0022)\nerrorColorRule.ForegroundColor \u003C- ConsoleOutputColor.Red\nlet fatalColorRule = new ConsoleRowHighlightingRule()\nfatalColorRule.Condition \u003C- ConditionParser.ParseExpression(\u0022level == LogLevel.Fatal\u0022)\nfatalColorRule.ForegroundColor \u003C- ConsoleOutputColor.Red\nfatalColorRule.BackgroundColor \u003C- ConsoleOutputColor.DarkYellow\n\n// now we add the newly defined rules to the console target\nconsoleTarget2.RowHighlightingRules.Add(warnColorRule)\nconsoleTarget2.RowHighlightingRules.Add(errorColorRule)\nconsoleTarget2.RowHighlightingRules.Add(fatalColorRule)\n\n// we declare which message of a log level goes to which target\nconfig.AddRuleForOneLevel(LogLevel.Info, consoleTarget1)\nconfig.AddRuleForOneLevel(LogLevel.Info, fileTarget)\nconfig.AddRuleForOneLevel(LogLevel.Trace, fileTarget) // here, we only write Trace and Debug log level into the file but don\u0027t show them in the console\nconfig.AddRuleForOneLevel(LogLevel.Debug, fileTarget)\nconfig.AddRuleForOneLevel(LogLevel.Warn, consoleTarget2)\nconfig.AddRuleForOneLevel(LogLevel.Warn, fileTarget)\nconfig.AddRuleForOneLevel(LogLevel.Error, consoleTarget2)\nconfig.AddRuleForOneLevel(LogLevel.Error, fileTarget)\nconfig.AddRuleForOneLevel(LogLevel.Fatal, consoleTarget2)\nconfig.AddRuleForOneLevel(LogLevel.Fatal, fileTarget)\n\n// set the config for the logger\nLogManager.Configuration \u003C- config\n\n// finally, we bind a logger of the name \u0022NLog logger\u0022 to the name log which we will use afterwards\nlet log = LogManager.GetLogger(\u0022NLog logger\u0022)\n\n(**\n\nNotice that we have to apply rules for each log level. The different log levels stand for different things you want to address with. Info is comparable to a normal print command, Debug and Trace serve for debugging purposes while Warn, Error, and Fatal shall capture problematic events.\n\n*)\n\n[\u003CEntryPoint\u003E]\nlet main _ =\n\n    log.Info(\u0022Info Message\u0022)\n    log.Trace(\u0022Trace Message\u0022)\n    log.Debug(\u0022Debug Message\u0022)\n    log.Warn(\u0022Warn Message\u0022)\n    try 1 / 0 with e -\u003E log.Error(e, $\u0022Error Message:\\n\u0022); 0\n    |\u003E ignore\n    log.Fatal(\u0022Fatal Message\u0022)\n\n    0\n\n(**\n\nNotable examples:\n\n- [ProteomIqon](https://github.com/CSBiology/ProteomIQon)\n- [ArcCommander](https://github.com/nfdi4plants/arcCommander)\n\n## App conventions\n\nStylewise, there are a few things to know:\n\n- When tackling the naming of commands and subcommands, try to stick closely to easy to follow names. Look at the dotnet CLI or the Git CLI for impressions\n  - This is especially important when designing your app API-wise\n- \u0060--[word]\u0060 or \u0060-[letter]\u0060 for argument specifiers (as in Argu!)\n- Not directly related to APIs, but it is common to return an [exit integer](https://en.wikipedia.org/wiki/Exit_status):\n  - 0 for successfull termination\n  - 1 to 255 for any error\n  - Do this via returning the exit code as the last integer (see .NET 5 Program.fs example above) or use \u0060System.Environment.Exit(code)\u0060\n- Try to keep your executing source file (default: Program.fs) as clean as possible. Like when working with libraries, try not to pack all the code into 1 source file but instead distribute it according to functionality into modules and classes within respective source files\n\n### Data folders\n\nThe following does not solely apply to console apps but to all applications in general:  \nMore complex apps might need to read or save config or user-specific data. Best practice is to follow common standards for doing so, like [XDG Base Directory Specification](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html) which is based on Linux or [directories](https://github.com/dirs-dev/directories-rs#design-goals) which is platform-independent.\n\n*)"},{"uri":"/CSBlog/posts/documentation.html","title":"Creating a Documentation","content":"(**\n\n---\ntitle: Creating a Documentation\ncategory: Documentation\ncategoryindex: 1\nindex: 0\n---\n\n*)\n\n(*** hide ***)\n\n#r \u0022nuget: Plotly.NET, 2.0.0-preview.16\u0022\nopen Plotly.NET\n\n(**\n_[Henrich Lukas Weil](https://github.com/HLWeil)_\n\n# Creating a Documentation\n## Introduction\n\nThis documentation is aimed at people of the CSB team who want to document their stuff by using the FSharp.Formatting formatter. \nThere of course is an [in depth documentation of how to use FSharp.Formatting by the creators](http://fsprojects.github.io/FSharp.Formatting/). \nAlso there\u0027s a good overview of the different mark down commands on [wikipedia](https://de.wikipedia.org/wiki/Markdown). \nThose things can be very cryptical at the beginning though. \nTherefore with this tutorial I want to give a quick and structured introduction into this topic. \nFor further information check out the aforementioned websites.  \nThe basic structure is as follows:\n\n* [At the start I want to introduce you to the **ProjectScaffold**](documentation.html#PS)\n* [Afterwards I\u0027ll explain **how to get started** and where to find what](documentation.html#Basics)\n* [Then I\u0027ll give a little introduction on **how you should write the documentian** for your code](documentation.html#What)\n* [I also include a small overview over the **different features** you have with markdown language and the formatted F#](documentation.html#Legend)\n* [At the end I\u0027ll explain **how to test your documentation**](documentation.html#Testing)  \n\n\u003Ca name=\u0022PS\u0022\u003E\u003C/a\u003E\n## What is Project Scaffold?\n\nThe libraries of the CSBiology organization are built using the [ProjectScaffold](https://github.com/fsprojects/ProjectScaffold). In principle, this is a blueprint project to make creating and maintaining a F# project easier.\nBesides many other features, this includes automatic Documentation via the [FSharp.Formatting](https://github.com/fsprojects/FSharp.Formatting) formatter. \nThis formatter is called when one executes the **build.cmd** which is located in the project folder. Opening this build.cmd does not only compile the project, it also formats the \u003Cb\u003E.fsx\u003C/b\u003E(FSharp script file) documents to \u003Cb\u003E.html\u003C/b\u003E documents by using the FSharpFormatting formatter, besides other things. \nThe script files which are formatted have to be placed in \u0022..*project name*\\docsrc\\content\u0022. The formatted html files are then automatically placed in \u0022..*project name*\\docs\u0022. Keep in mind that by using the build.cmd, those files are built and stored only locally.\n\nNow that that\u0027s covered let\u0027s get to the important questions:\n*)\n(**\n\u003Ca name=\u0022Basics\u0022\u003E\u003C/a\u003E\n## Where to put what?\nLet\u0027s say you want to write a documentation about the topic \u0060topic\u0060\n\n* Place \u0060topic.fsx\u0060 in \u0022..*project name*\\docsrc\\content\u0022\n* Write the documentation in this \u0060topic.fsx\u0060 as follows\n\n   \u0060(*** hide ***)\u0060 in front of helpful library calls; Those won\u0027t be formatted.  \n   Put text into a comment as follows: \u0060(** text *)\u0060. This text will be formatted by markdown.  \n   Everything outside those brackets will be formatted as an F#-snippet  \n\n* In the \u0022..*project name*docsrc\\tools\\templates\\template.cshtml\u0022: Put a link to the html using the following line in the place you want your link to be created:\n\n   \u0060\u003Cli\u003E\u003Ca href=\u0022@Root/topic.html\u0022\u003ETopic\u003C/a\u003E\u003C/li\u003E\u0060\n   If you have some experience with HTML, how to do this comes quite naturally. If not, you can either do it via [Trial and Error](documentation.html#Testing) or even easier: just ask.\n\n* Commit your changes and create a pull request to the upstream repository. The added htmls will be included in the next release.\n\n\n\u003Ca name=\u0022What\u0022\u003E\u003C/a\u003E\n## What should I write about? \n\nGood question! But all good questions of course also have good answers (unfortunately not really). \nThe people who will read your tutorial are of course the ones who want to use your functions. So your task in the tutorial is basically to tell them \u003Cb\u003Ehow to use\u003C/b\u003E it, not necessarily how it works. \nThe core of your documentation therefore should be code snippets of the function being applied with real values, not snippets of the function definition:\n\n\u003Cb class=\u0022redText\u0022\u003E Bad Snippet: \u003C/b\u003E\n\u0022As you can see this function takes an int and a string and multiplies every letter in the string by using an enumerator...\u0022\n*)\n\nlet multiplyLetters (count:int) (word:string) = \n    let en = word.GetEnumerator()\n    let rec loop l =\n        match en.MoveNext() with\n        | true -\u003E loop (l @ List.init count (fun i -\u003E en.Current))\n        | false -\u003E l\n    loop []\n    |\u003E fun chars -\u003E new string [|for c in chars -\u003E c|]\n  \n(**\nShowing the definition will just result in the reader to lose a lot of time deciphering your code. The snippet should only show how to apply the function, so that the user can pick it up quick and apply it to his values. What the function does behind the screens should be explained separately.\n\n\u003Cb class=\u0022greenText\u0022\u003E Good Snippet: \u003C/b\u003E\n\u0022As you can see this function takes an int and a string and multiplies the number of every letter in the string by the int\u0022\n*)\n\nlet originalString = \u0022Hello!\u0022\nlet newString = multiplyLetters 5 originalString\n\n(**\nIn many cases the user will only look for the snippet because he already knows the algorithm but is not sure about how to use the implementation. \nOf course also delivering an explanation of the background of your implementation is highly advised. Especially when the algorithms used are not as trivial as the example above. For this you can give a short intro to the topic in general and even include \u003Ca href=\u0022@Root/Documentation.html#Links\u0022\u003Elinks\u003C/a\u003E.\n*)\n\n\n\n\n\n(**\n\u003Ca name=\u0022Legend\u0022\u003E\u003C/a\u003E\n## What are the features?\n\nAs already mentioned, there are already many lists for the standard mark down commands available. A quick google search yields:\n\n* [quick intro by wikipedia](https://de.wikipedia.org/wiki/Markdown)\n* [very in-depth list by adam-p](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet)\n\nFor the matter of completion I\u0027ll still give a little overview on the different \u0060markdown-commands\u0060:  \n\n* [Headers](documentation.html#Headers) \n* Highlighting\n* [Links](documentation.html#Links) \n* [Images](documentation.html#Images) \n* [Lists](documentation.html#Lists) \n* [Escaping Markdown](documentation.html#[Escaping-Markdown) \n\nWhat\u0027s more important here though are the extra \u0060features of FSharp.Formatting\u0060, which are a bit hard to find otherwise:\n\n* Highlighting\n* [f# interactive output](documentation.html#ConsoleOutput) \n* [Plots by FSharp.Plotly](documentation.html#Plots)  \n\n\n### Headers\nFor headers, you can just put a number of \u0027#\u0027 at the start of the line, the header gets smaller, the more \u0027#\u0027 you use:  \n# One hashtag\n\u0060# One hashtag\u0060\n\n## Two hashtags\n\u0060## Two hashtags\u0060\n\n### Three hashtag\n\u0060### Three hashtags\u0060\n\n#### Four hashtags\n\u0060#### Four hashtags\u0060\n\n\u003Cbr\u003E\n\n### Links\nYou can easily link external websites or internal documents.\n\nThe basic command for this is\n\u003Cbr\u003E\n \u0060[text](link)\u0060\n\u003Cbr\u003E\nThe text you insert into the square brackets will be formatted to a clickable text. When you click it, the link will be opened. What you link to is your choice. You could for example link to external websites:  \n\u0060[Wikipedia](https://de.wikipedia.org/wiki/Wikipedia)\u0060 will be [Wikipedia](https://de.wikipedia.org/wiki/Wikipedia).  \nOn the other hand you can link local files:  \n\u0060[index](index.html)\u0060 will be [index](index.html)\n\n\n### Images\n\nImages are included similarly to normal links, but with a \u0060!\u0060 in front of them. So instead of \u0022\\[text](link)\u0022 you use  \n\u0060![image name](image link)\u0060  \nAgain you can link external images with a full url:  \n\u0060![Marshmallow](\\https://www.sammobile.com/wp-content/uploads/2015/12/android-marshmallow.jpg)\u0060 will be  \n\u003Cbr\u003E\n![Marshmallow](https://www.sammobile.com/wp-content/uploads/2015/12/android-marshmallow.jpg)\n\nOn the other hand you can link local files:  \n\u0060![logo](img/logo.png)\u0060 will be ![logo](img/logo.png) \nMake sure that the image you want to reference is located at \u0022..*project name*/docs/files/img\u0022. Also at the moment only **.png**s can be used for local referencing because only those are copied to the gh-pages in the building process.\n\n### Lists\n\nThere are unnumbered and numbered lists. For unnumbered lists, do a break and write consecutive lines with \u0060*\u0060 at the beginning. \nFor numbered lists, do the same but with numbers\u002Bdot instead.\nUnnumbered Lists:  \n\n\u0060* Entry1\u0060  \n\u0060* Entry2\u0060  \n\u0060* Entry3 also I include a piece of text so you get the idea of how the text will align when it reaches the end of the line.\u0060  \n\nwill be  \n\n* Entry1\n* Entry2\n* Entry3 also I include a piece of text so you get the idea of how the text will align when it reaches the end of the line.\n\nNumbered Lists:  \n\n\u00601. Entry1\u0060  \n\u00602. Entry2\u0060  \n\u00603. Entry3 also I include a piece of text so you get the idea of how the text will align when it reaches the end of the line.\u0060  \n\nwill be  \n\n1. Entry1\n2. Entry2\n3. Entry3 also I include a piece of text so you get the idea of how the text will align when it reaches the end of the line.  \n\nWhen you want to write **indented paragraphs** for one bullet point, \nafter writing the text which is supposed to stick to the bulletpoint, do: break, leave a line, tap space 3 times and write the text.  \n\u0060* Entry1\u0060  \n\u0060* Entry2 this is the text which sticks to this point, after this text I\u0027ll do the aforementioned things for an indented paragraph  \u0060  \n\u0060\u0060  \n\u0060   This is the next paragraph of this bulletpoint  \u0060  \n\u0060\u0060  \n\u0060* Entry3\u0060  \n\nwill be  \n\n* Entry1\n* Entry2 this is the text which sticks to this point, after this text I\u0027ll do the aforementioned things for an indented paragraph  \n\n   This is the next paragraph of this bulletpoint  \n\n* Entry3\n\n\n\n### Escaping Markdown\n\nSometimes you need to use characters for your documentation, which also are used by markdown. \nThis can lead to weird outcomes where characters are missing. \nTo circumvent this, you can use a \u0060\\\u0060 (backslash) infront of those characters.  \nE.g.:\n\n* \u0060There were two ** in the night sky\u0060 will be \u0060There were two in the night sky\u0060  \n* \u0060There were two \\*\\* in the night sky\u0060 will be \u0060There were two ** in the night sky\u0060\n\n\u003Ca name=\u0022ConsoleOutput\u0022\u003E\u003C/a\u003E\n### Console Output\nWith the FSharp.Formatting you can not only include stylized code snippets, but also include console output of the F# interactive. \n\nFor this, just put (\\*\\*\\* include-value:*ValueName* \\*\\*\\*\\) at the position in your document where you want your output to end up. The *ValueName* is the name to which a value has to be bound.\n\nE.g.:\n\u003Cpre\u003E\nlet whatAGreatName = 4 \u002B 5\n\n(\\*\\*\\* include-value:whatAGreatName \\*\\*\\*\\) \n\u003C/pre\u003E\nwill be\n\n*)\n\nlet whatAGreatName = 4 \u002B 5\n\n(*** include-value:whatAGreatName ***) \n\n(**\n\u003Ca name=\u0022Plots\u0022\u003E\u003C/a\u003E\n### Plots\nFor an in depth FSharp.Plotly tutorial, look [here](http://muehlhaus.github.io/FSharp.Plotly/).\n\nPlots can also be included via the same procedure:\n\u003Cpre\u003E\nlet myChart = Array.init 10 id |\u003E Array.indexed |\u003E Chart.Point\n\n(\\*\\*\\* include-value:myChart \\*\\*\\*\\) \n\u003C/pre\u003E\nwill be\n*)\n\nlet myChart = Array.init 10 id |\u003E Array.indexed |\u003E Chart.Point \n\n(*** include-value:myChart ***) \n\n(**\n\u003Ca name=\u0022Testing\u0022\u003E\u003C/a\u003E\n## How can I test my formatted documentation?\nYou can play around with the markdown text in an online tool like [dillinger.io](http://dillinger.io/).  \nThis is not really helpful though, if you want to test how the formattet site will look like on the project website. [As stated above](documentation.html#How), the build.cmd will create the \u0060htmls\u0060s of the \u0060fsx\u0060s which are located at \u0022..*project name*\\docsrc\\content\u0022 and automatically put them into \u0022..*project name*\\docs\u0022 together with all other needed files.\nYou can access the htmls there after building, but the references to the css styling files and all other ressources won\u0027t work. Therefore you will get a very plain looking, unstyled website.  \nTo bring everything in good form. A new buildtarget \u0022**releaseLocal**\u0022 was included in the CSB-projects. To access this target:\n\n### With VS2017\n\n* you have to **open your windows command prompt**\n* afterwards **navigate to the repository** \n\n   e.g. \u0060cd C:\\Users\\*ExampleUser*\\Source\\Repos\\*project name*\u0060\n\n* run \u0022**build -t releaselocal**\u0022\n\n   Besides compiling the repository, this will create the html files and copy everything from \u0022..*project name*\\docs\u0022 to \u0022..*project name*\\temp\\localDocs\u0022. \n\nWhen this is done, you can just open the \u0022temp/localDocs\u0022 folder and browse the htmls in a stylized form.\n\n*)"},{"uri":"/CSBlog/posts/WorkshopSeries_3_plotly.html","title":"Introduction to Data visualization using Plotly.NET","content":"(**\n\n---\ntitle: Introduction to Data visualization using Plotly.NET\ncategory: Visualization\ncategoryindex: 2\nindex: 0\n---\n\n*)\n\n(***hide***)\n#r \u0022nuget: Plotly.NET, 2.0.0-preview.16\u0022\n#r \u0022nuget: FSharpAux, 1.0.0\u0022\n\nopen Plotly.NET\nopen FSharpAux\n\nlet xSin = [0. .. 0.01 .. (4. * System.Math.PI)]\nlet ySin = xSin |\u003E List.map sin\nlet sinChart = \n    Chart.Spline(xSin,ySin)\n    |\u003E Chart.withTitle(\u0022sin(x)\u0022)\n    |\u003E Chart.withX_AxisStyle(\u0022x\u0022,ShowGrid=false,ShowLine=true)\n    |\u003E Chart.withY_AxisStyle(\u0022y\u0022,ShowGrid=false,ShowLine=true)\n\n#nowarn \u00220044\u0022\n\n(**\n![HeaderPicture](../img/Plotly_HeadPic.png)\n\n# Introduction to Data visualization using Plotly.NET\n_[Kevin Schneider](https://github.com/kMutagene)_\n\n## Table of contents \n * [Plotly.js](#Plotly.js)\n * [FSharp.Plotly](#FSharp.Plotly)\n * [Chart functions](#Chart functions)\n * [Rendering Charts](#Rendering Charts)\n * [Styling your Charts](#Styling your Charts)\n * [Multicharts](#Multicharts)\n\nIn the scope of this post, I will shortly introduce Plotly.js and our .NET counterpart Plotly.NET.\nI will go over the basic workflow to generate charts from data and how to style and combine charts.\n\n\u003C/br\u003E\n\n## Plotly.js\n\n[Plotly.js](https://plot.ly/javascript/) is an open source charting library written in javascript.\n\n![Plotly.js](../img/Plotly_1.png)\n\nVarious chart types are supported. From simple scatter and line plots over heatmaps and various 3D-plots to Map charts, \nyou will find something fitting your needs for visualization. \n\nOne of the coolest things about these charts is that all of them are interactive, as you can see in the example below. You can Zoom in and out,\nresize and move the axis, and much more.\n*)\n\n(***hide***)\nsinChart |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nPlotly does not only generate your charts. It provides a service to change style and data of your chart after generation, which is called the chart studio.\n\u00DDou can access the chart studio by clicking on the \u0027edit in chart studio\u0027 icon above the chart.\n\n\u003C/br\u003E\n\n## FSharp.Plotly\n\n[FSharp.Plotly](https://github.com/muehlhaus/FSharp.Plotly) is a FSharp wrapper for Plotly.js. The library provides a complete mapping for the configuration options of \nthe underlying library but empowers you to use multiple programming styles (object oriented, functional, mixtures). So you get a nice F# interface support with the full power of Plotly.\n\n\u003C/br\u003E\n\n## Chart functions\n\nIn general, the Chart functions are a mapping from any kind of data to a GenericChart type:\n\n![chart functions](../img/ChartFunctions.png)\n\nAll chart functions (Point,Line,Heatmap,etc.) are provided as static methods of the \u0060Chart\u0060 Class. All of them take the input data and map\nto a \u0060GenericChart\u0060 type. Creating a chart can be as easy as this:\n*)\n\nopen Plotly.NET\n\n//Create some example data\n\n/// x values ranging from 0 to 4 \u03C0\nlet xVals = [0. .. 0.01 .. (4. * System.Math.PI)]\n/// Cosine values from 0 to 4 \u03C0\nlet yVals = xVals |\u003E List.map cos\n\n///GenericChart containing an X/Y scatter plot of the values above\nlet cosChart = Chart.Point(xVals,yVals)\n\n(**\n\n\u003C/br\u003E\n\n## Rendering Charts\n\nAll cool and good, but how to actually render a chart? This is pretty easy. We simply use the \u0060Chart.Show\u0060 function, which can take any\n\u0060GenericChart\u0060, generate the respective html file, and display it in your default browser.\n\nIn general, the Chart.Show function maps from the GenericChart type to unit, and rendering the html file as a side effect:\n\n![Chart.Show](../img/ChartShow.png)\n\n\n*)\n(***do-not-eval***)\n//Render the chart from the example above in your browser\ncosChart\n|\u003E Chart.show\n(**\n\nThis will display the following chart in your browser:\n\n*)\n\n(***hide***)\ncosChart |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n\n\u003C/br\u003E\n\n## Styling your Charts\n\nI don\u0027t know about you, but I think this chart could look a little bit better.\n\nStyling charts with FSharp.Plotly can be done in multiple ways. We can use the optional parameters when initializing a chart:\n\n*)\n\nopen FSharpAux.Colors\n\nlet cosChart2 = \n    Chart.Point\n        (\n            xVals,\n            yVals,\n            MarkerSymbol = StyleParam.MarkerSymbol.Square,\n            MarkerColor = Color.fromKeyword LightGreen\n        )\n\n(***hide***)\ncosChart2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(** \nOr use a more functional style and pipe our chart into styling functions, which have even more control:\nWe first apply a similar styling as in the example above, but then additionally take control over the axis stylings (title,line style, and grid display):\n*)\n\nlet sinChart2 =\n    Chart.Point(xVals,yVals)\n    |\u003E Chart.withMarkerStyle(Size = 1, Color = Color.fromKeyword LightGreen, Symbol = StyleParam.MarkerSymbol.Square)\n    |\u003E Chart.withTitle(\u0022sin(x)\u0022)\n    |\u003E Chart.withXAxisStyle(\u0022x\u0022, ShowLine = true, ShowGrid = false, MinMax = (0.,(4.* System.Math.PI)))\n    |\u003E Chart.withYAxisStyle(\u0022y\u0022, ShowLine = true, ShowGrid = false)\n\n(***hide***)\nsinChart2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nI am a fan of mirrored axis. There is no option to do that in \u0060Chart.withX_AxisStyle\u0060.\nTo have even more control over the Axis, we can initialize custom axis. This has to be implemented as a \nfunction because of the axis object may be mutated by styling functions when used in different charts. \nWe can prevent this by using a function that for every chart returns a new Axis.\n*)\nopen Plotly.NET.LayoutObjects\n\nlet myXAxis () = \n    LinearAxis.init(\n        Title   = Title.init(\u0022x\u0022),\n        ShowGrid= false,\n        ShowLine= true,\n        Mirror  = StyleParam.Mirror.All,\n        Range   = StyleParam.Range.MinMax (0.,(4. * System.Math.PI)),\n        TickMode = StyleParam.TickMode.Array,\n        TickVals = ([|0. .. (0.5 * System.Math.PI) .. (4. * System.Math.PI)|] |\u003E Array.map (round 2)),\n        Ticks   = StyleParam.TickOptions.Inside\n        )\n\nlet myYAxis () = \n    LinearAxis.init(\n        Title   = Title.init(\u0022y\u0022),\n        ShowGrid= false,\n        ShowLine= true,\n        Mirror  = StyleParam.Mirror.AllTicks,\n        Range   = StyleParam.Range.MinMax (-1.,1.),\n        TickMode = StyleParam.TickMode.Auto,\n        Ticks   = StyleParam.TickOptions.Inside\n        )\n\nlet mirroredSinChart =\n    Chart.Point(xVals,yVals)\n    |\u003E Chart.withMarkerStyle(Size = 1, Color = Color.fromKeyword DarkBlue, Symbol = StyleParam.MarkerSymbol.Square)\n    |\u003E Chart.withTitle(\u0022sin(x)\u0022)\n    |\u003E Chart.withXAxis(myXAxis())\n    |\u003E Chart.withYAxis(myYAxis())\n    |\u003E Chart.withSize(750.,750.)\n\n(***hide***)\nmirroredSinChart |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n\n\u003C/br\u003E\n\n## Multicharts\n\nTo leverage the full power of data visualization, we often want to display multiple data series in the same plot. There are basically\ntwo options: Combining charts in a single plot or displaying them side-by-side in a stacked chart. Both functions map from a GenericChart collection to a single GenericChart:\n\n![MultiCharts](../img/MultiCharts.png)\n\n### Combining charts\n\nThe \u0060Chart.combine\u0060 function creates a single plot with the same axis from a collection of charts:\n\n*)\n\nlet combinedChart = \n    [\n        Chart.Spline(xVals,xVals |\u003E List.map sin, Name=\u0022sin(x)\u0022)\n\n        Chart.Spline(xVals,xVals |\u003E List.map cos,Name=\u0022cos(x)\u0022)\n    ]\n    |\u003E Chart.combine\n    |\u003E Chart.withTitle(\u0022sin(x) and cos(x)\u0022)\n    |\u003E Chart.withXAxis(myXAxis())\n    |\u003E Chart.withYAxis(myYAxis())\n    |\u003E Chart.withSize(750.,750.)\n\n(***hide***)\ncombinedChart |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n\u003C/br\u003E\n\n### Stacking charts\n\nThe \u0060Chart.Stack\u0060 function creates a multichart with the contents in a given collection of charts.\nAll subplots keep their own axis.\n\n*)\n\nlet stackedChart = \n    [\n        Chart.Spline(xVals,xVals |\u003E List.map sin)\n        |\u003E Chart.withTraceName(Name = \u0022sin(x)\u0022)\n        |\u003E Chart.withYAxis(myYAxis())\n        |\u003E Chart.withXAxis(myXAxis())\n\n        Chart.Spline(xVals,xVals |\u003E List.map cos)\n        |\u003E Chart.withTraceName(Name = \u0022sin(x)\u0022)\n        |\u003E Chart.withYAxis(myYAxis())\n        |\u003E Chart.withXAxis(myXAxis())\n    ]\n    |\u003E Chart.SingleStack()\n\n(***hide***)\nstackedChart |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"}]